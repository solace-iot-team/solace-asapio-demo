[
    {
        "id": "3eb672f6.dc73fe",
        "type": "tab",
        "label": "main.app",
        "disabled": false,
        "info": "The app controller.\n\n---\nThe End.\n"
    },
    {
        "id": "4d60d452.18914c",
        "type": "tab",
        "label": "main.order",
        "disabled": false,
        "info": ""
    },
    {
        "id": "12e201f9.88b2be",
        "type": "tab",
        "label": "main.sap-event-log",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4b36e62d.340ed8",
        "type": "tab",
        "label": "main.test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b661b75c.e7b738",
        "type": "tab",
        "label": "main.about",
        "disabled": false,
        "info": ""
    },
    {
        "id": "46127397.12a33c",
        "type": "tab",
        "label": "main.mqttCm",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9207c7bc.35e4b8",
        "type": "tab",
        "label": "save.tests",
        "disabled": false,
        "info": ""
    },
    {
        "id": "317873af.a031fc",
        "type": "subflow",
        "name": "app error handler",
        "info": "# Log and display an error\n\n## Input\n\nA ``solaceError`` object within the input msg.\n\nExample:\n\n```json\n{\n  \"solaceError\": {\n    \"origin\": {\n      \"componentName\": \"TestSolaceError\",\n      \"instanceName\": \"create-SolaceError\",\n      \"source\": {\n        \"id\": \"fa0f610d.8f829\",\n        \"type\": \"function\",\n        \"name\": \"create-SolaceError\",\n        \"count\": 1\n      }\n    },\n    \"message\": \"error_1: user message describing the error\",\n    \"severity\": \"ERROR\",\n    \"details\": {\n      \"detail_1\": \"add more details about the error here if useful\",\n      \"detail_2\": \"detail_2\"\n    },\n    \"msg\": {\n      \"_msgid\": \"44914cde.2f4b74\",\n      \"topic\": \"\",\n      \"payload\": {\n        \"error_1\": true\n      }\n    },\n    \"caughtBy\": {\n      \"flow\": \"TestSolaceError\",\n      \"function\": \"handleAnyErrorType\"\n    }\n  }\n}\n```\n\n## Example Usage: Generating the Solace Error\n\n```js \nlet su = global.get('solaceUtils');\n\nif(errorCondition) {\n    let message = 'user message describing the error';\n    let details = {\n        detail_1: 'add more details about the error here if useful',\n        detail_2: 'detail_2'\n    }\n    let errObj = new su.SolaceError('thisComponent', 'thisInstance', message, 'ERROR', details, msg);\n\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n    return;\n}\n```",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 380,
                "wires": [
                    {
                        "id": "40923531.4b5a4c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "meta.packageId",
                "type": "str",
                "value": "app",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "meta.componentId",
                "type": "str",
                "value": "SolaceErrorHandler",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "meta.version",
                "type": "str",
                "value": "0.2.0",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "color": "#db7163",
        "inputLabels": [
            "error"
        ],
        "icon": "node-red/alert.svg",
        "status": {
            "x": 200,
            "y": 320,
            "wires": [
                {
                    "id": "aea90ded.7c436",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "72433083.19e34",
        "type": "subflow",
        "name": "sempv2 config",
        "info": "Configuration node for a Solace broker instance for the ``solace.sempv2`` nodes.\n\n[see solace.sempv2.config](http://github.com/.../node-red-contrib-solace-sempv2/doc/sempv2.config.md)\n\n---\nThe End.\n",
        "category": "solace sempv2",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "efd76714.54afd8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1780,
                "y": 220,
                "wires": [
                    {
                        "id": "9602ae1.378fd5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1780,
                "y": 340,
                "wires": [
                    {
                        "id": "ed2cae31.155fb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "unset"
                                },
                                "v": "unset"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "solaceBrokerId",
                "type": "str",
                "value": "solaceDeviceBroker",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "sempv2 config id"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "solaceDeviceBroker"
                                },
                                "v": "solaceDeviceBroker"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "input"
        ],
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1780,
            "y": 160,
            "wires": [
                {
                    "id": "502e8b1d.28cda4",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7335a6bf.4e03a8",
        "type": "subflow",
        "name": "app controller",
        "info": "Manages the app state.\n\n[see appStateInterfaces.md](https:/github.link)\n\n---\nThe End.\n",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 600,
                "wires": [
                    {
                        "id": "455042b0.6e533c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 580,
                "wires": [
                    {
                        "id": "6967887e.553fb8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "clear-state"
                                },
                                "v": "clear-state"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#21cc9e",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1580,
            "y": 500,
            "wires": [
                {
                    "id": "4b1decb9.9c4564",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6b984824.a17568",
        "type": "subflow",
        "name": "sempv2 about",
        "info": "\nCall [Solace SempV2 About API](https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/about).\n\n\n[see solace.sempv2.about](http://github.com/.../node-red-contrib-solace-sempv2/doc/sempv2.about.md)\n\n",
        "category": "solace sempv2",
        "in": [
            {
                "x": 80,
                "y": 280,
                "wires": [
                    {
                        "id": "616e0712.29bdf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1780,
                "y": 300,
                "wires": [
                    {
                        "id": "4b5c1ce7.4c9eb4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1780,
                "y": 240,
                "wires": [
                    {
                        "id": "ddd8e537.7b8b08",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "solaceBrokerId",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "resource",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "all"
                                },
                                "v": "all"
                            },
                            {
                                "l": {
                                    "en-US": "about"
                                },
                                "v": "about"
                            },
                            {
                                "l": {
                                    "en-US": "about/api"
                                },
                                "v": "about/api"
                            },
                            {
                                "l": {
                                    "en-US": "about/user"
                                },
                                "v": "about/user"
                            },
                            {
                                "l": {
                                    "en-US": "about/user/msgVpns"
                                },
                                "v": "about/user/msgVpns"
                            },
                            {
                                "l": {
                                    "en-US": "about/user/msgVpns/{vpn}"
                                },
                                "v": "about/user/msgVpns/{vpn}"
                            }
                        ]
                    }
                }
            },
            {
                "name": "vpn",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "msg.payload"
        ],
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "font-awesome/fa-exchange",
        "status": {
            "x": 1780,
            "y": 380,
            "wires": [
                {
                    "id": "2ff6e77b.3ac0c8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "44813701.a560c8",
        "type": "subflow",
        "name": "forEach",
        "info": "\nIterate over an input array of items and send item by item to output after receiving the next input.\nThis is a stateful node, it saves state per instance in parent flow and in the output msg. Use the output msg as the input to trigger the next item (or end) send.\n\n\n[see solace.utils.forEach](http://github.com/.../node-red-contrib-solace-utils/doc/utils.forEach.md)\n",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 280,
                "wires": [
                    {
                        "id": "c3b8d0b6.9f5fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 240,
                "wires": [
                    {
                        "id": "cb9e650e.ac4bc8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 280,
                "wires": [
                    {
                        "id": "ed1738d5.4622f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 320,
                "wires": [
                    {
                        "id": "404b41c4.06b95",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "new or existing instance"
        ],
        "outputLabels": [
            "start",
            "items",
            "end"
        ],
        "icon": "node-red/split.svg",
        "status": {
            "x": 880,
            "y": 360,
            "wires": [
                {
                    "id": "220d2334.7e8a6c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8e181349.856bd",
        "type": "subflow",
        "name": "SolaceError",
        "info": "Access to SolaceError\n\n[see SolaceError.md](http://git/doc/SolaceError.md)",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 260,
                "wires": [
                    {
                        "id": "67b8792c.811068"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 280,
                "wires": [
                    {
                        "id": "7cd15b6d.5a5a04",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1240,
                "y": 140,
                "wires": [
                    {
                        "id": "39daa6eb.d9b0ba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "unset"
                                },
                                "v": "unset"
                            },
                            {
                                "l": {
                                    "en-US": "getTotalErrorCount"
                                },
                                "v": "getTotalErrorCount"
                            },
                            {
                                "l": {
                                    "en-US": "setTotalErrorCount"
                                },
                                "v": "setTotalErrorCount"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#34e39a",
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1260,
            "y": 340,
            "wires": [
                {
                    "id": "66204707.f77548",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4f07498e.ebb5f8",
        "type": "subflow",
        "name": "flow properties",
        "info": "",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "ca728d7e.faee2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "a4aea2a3.c1433",
                        "port": 0
                    },
                    {
                        "id": "5ce3bcc2.d2fd74",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "packageId",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "set: packageId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "componentId",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "set: componentId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "icon": "node-red/db.svg",
        "status": {
            "x": 1140,
            "y": 300,
            "wires": [
                {
                    "id": "9a4e0854.e6b948",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "776ea548.cb42dc",
        "type": "subflow",
        "name": "subflow error handler",
        "info": "Solace Utils: Error handler for subflows.\n\n**_do not use as is, build an app specific subflow that wraps this one_**\n\n## Inputs\n\n``msg._solaceUtilsSubflowErrorHandler`` with:\n\n- ``solaceUtilsGlobalContext`` - global context path of the Solace utils functions\n- ``solaceAppUtilsGlobalContext`` - global context path of the Solace app utils functions\n- ``solaceAppUtilsComponentGlobalContext`` - global context path of the component functions in ``solaceAppUtilsGlobalContext``\n\nExample:\n\n```js\nmsg._solaceUtilsSubflowErrorHandler = {\n    solaceUtilsGlobalContext: '_solaceUtils',\n    solaceAppUtilsGlobalContext: '_solaceAppUtils',\n    solaceAppUtilsComponentGlobalContext: 'app'\n};\n```",
        "category": "solace utils",
        "in": [
            {
                "x": 180,
                "y": 180,
                "wires": [
                    {
                        "id": "afcb3a99.477868"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#db7163",
        "icon": "node-red/alert.svg",
        "status": {
            "x": 320,
            "y": 80,
            "wires": [
                {
                    "id": "6596e39f.b8f7ec",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f315565e.b7a9b8",
        "type": "subflow",
        "name": "app subflow error handler",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 180,
                "y": 140,
                "wires": [
                    {
                        "id": "ab2bbf0.6e03b4"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "solace-app-component",
                "type": "str",
                "value": "not-configured",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": "not-configured"
                            },
                            {
                                "l": {
                                    "en-US": "app"
                                },
                                "v": "app"
                            },
                            {
                                "l": {
                                    "en-US": "productCatalog"
                                },
                                "v": "productCatalog"
                            },
                            {
                                "l": {
                                    "en-US": "mqttConnectionMonitor"
                                },
                                "v": "mqttConnectionMonitor"
                            },
                            {
                                "l": {
                                    "en-US": "mqttDeviceSessionControl"
                                },
                                "v": "mqttDeviceSessionControl"
                            },
                            {
                                "l": {
                                    "en-US": "about"
                                },
                                "v": "about"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#db7163",
        "icon": "node-red/alert.svg",
        "status": {
            "x": 340,
            "y": 60,
            "wires": [
                {
                    "id": "cacc3e4f.9c57d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6be2bb10.2f7fa4",
        "type": "subflow",
        "name": "mqtt connection monitor",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 300,
                "wires": [
                    {
                        "id": "17bf0d5e.27ce63"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 300,
                "wires": [
                    {
                        "id": "c0092c06.69623",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get-status"
                                },
                                "v": "get-status"
                            },
                            {
                                "l": {
                                    "en-US": "set-status"
                                },
                                "v": "set-status"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#21cc9e",
        "status": {
            "x": 1280,
            "y": 180,
            "wires": [
                {
                    "id": "c688684.fb4c298",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ba93632a.b212b",
        "type": "subflow",
        "name": "flow log",
        "info": "",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 400,
                "wires": [
                    {
                        "id": "65f0e574.7b208c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 400,
                "wires": [
                    {
                        "id": "94c8332b.57079",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "log.{method}@{where}",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "log-name",
                "type": "str",
                "value": "log",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "log.clear"
                                },
                                "v": "log.clear"
                            },
                            {
                                "l": {
                                    "en-US": "log.init(log.entry)"
                                },
                                "v": "log.init"
                            },
                            {
                                "l": {
                                    "en-US": "log.append(log.entry)"
                                },
                                "v": "log.append"
                            },
                            {
                                "l": {
                                    "en-US": "log.append.httpResponse"
                                },
                                "v": "log.append.httpResponse"
                            },
                            {
                                "l": {
                                    "en-US": "log.get"
                                },
                                "v": "log.get"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "log.entry",
                "type": "str",
                "value": "msg.payload",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "max-entries",
                "type": "str",
                "value": "20",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "20"
                                },
                                "v": "20"
                            },
                            {
                                "l": {
                                    "en-US": "50"
                                },
                                "v": "50"
                            },
                            {
                                "l": {
                                    "en-US": "100"
                                },
                                "v": "100"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "add-timestamp",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "add timestamp to every entry"
                    },
                    "type": "checkbox",
                    "opts": {}
                }
            }
        ],
        "color": "#34e39a",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1480,
            "y": 240,
            "wires": [
                {
                    "id": "d2b698bc.dacf78",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d4ac8a00.7ba108",
        "type": "subflow",
        "name": "prod cat",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 340,
                "wires": [
                    {
                        "id": "3e2146.890fbeba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 320,
                "wires": [
                    {
                        "id": "30f7c7ae.b1f508",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1580,
                "y": 360,
                "wires": [
                    {
                        "id": "bba22b64.48e368",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "prodCat.{method}@where",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#21cc9e",
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/db.svg",
        "status": {
            "x": 1580,
            "y": 400,
            "wires": [
                {
                    "id": "58202c41.46c074",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ad119746.2f1168",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "sap-demo-theme",
                "default": "#4B7930",
                "baseColor": "#72b94b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#72b94b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#9dce82",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "SAP Demo: Order System Simulator",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d6498160.c8849",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "62bac859.25e008",
        "type": "mqtt-broker",
        "z": "",
        "name": "SAP_DEMO_MQTT_BROKER",
        "broker": "$(SOLACE_SAP_DEMO_MQTT_BROKER_HOST)",
        "port": "$(SOLACE_SAP_DEMO_MQTT_BROKER_PORT)",
        "clientid": "$(SOLACE_SAP_DEMO_MQTT_CLIENT_ID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "600",
        "cleansession": true,
        "birthTopic": "iot-mgmt/connection/birth",
        "birthQos": "1",
        "birthPayload": "{\"birth\":\"birth\"}",
        "closeTopic": "iot-mgmt/connection/close",
        "closeQos": "1",
        "closePayload": "{\"close\":\"close\"}",
        "willTopic": "iot-mgmt/connection/will",
        "willQos": "1",
        "willPayload": "{\"will\":\"will\"}"
    },
    {
        "id": "c3b5e796.9436e8",
        "type": "ui_tab",
        "z": "",
        "name": "About",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a449e70c.3c11a8",
        "type": "ui_group",
        "z": "",
        "name": "SAP Demo: Order System Simulator",
        "tab": "c3b5e796.9436e8",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "ede2c094.95dbd",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "a21a4aca.ac5b38",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "979cbe9.a92274",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "663366ac.400278",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "d64a9e3e.85716",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "20ae59d9.885f86",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "1d704910.48c9e7",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "64f0f988.765608",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "bd2af989.97c0b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "6f6ee107.dfc2a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "770f1c0e.0fb904",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": "14",
        "height": 1
    },
    {
        "id": "47727c58.1de504",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": "14",
        "height": 1
    },
    {
        "id": "fc8a0439.ab4d28",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": "14",
        "height": 1
    },
    {
        "id": "cc6753eb.d0f5c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": "14",
        "height": 1
    },
    {
        "id": "8fbc39ce.f454c8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 21,
        "width": "14",
        "height": 1
    },
    {
        "id": "43f5f0a4.72d2d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": "14",
        "height": 1
    },
    {
        "id": "b4961e39.27a81",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "298a7e90.c76a82",
        "type": "ui_group",
        "z": "",
        "name": "App Details",
        "tab": "c3b5e796.9436e8",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "b957fef7.e902d",
        "type": "ui_group",
        "z": "",
        "name": "About Solace Broker",
        "tab": "c3b5e796.9436e8",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "68e5a2a5.0d004c",
        "type": "ui_tab",
        "z": "",
        "name": "Order",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a0d570c.092769",
        "type": "ui_group",
        "z": "",
        "name": "Compose Order",
        "tab": "68e5a2a5.0d004c",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "3d41adcb.3fe412",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe63781d.693448",
        "type": "ui_group",
        "z": "",
        "name": "Order Updates",
        "tab": "68e5a2a5.0d004c",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "b1ee4438.4885c8",
        "type": "ui_group",
        "z": "",
        "name": "SAP Event Log",
        "tab": "858fa0a9.7048d",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "5e99e8e3.026488",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 6,
        "width": "7",
        "height": 1
    },
    {
        "id": "b2dbb49b.39f8e8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 4,
        "width": "7",
        "height": 1
    },
    {
        "id": "858fa0a9.7048d",
        "type": "ui_tab",
        "z": "",
        "name": "SAP Event Log",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9c9ae5b4.ea3b48",
        "type": "Log",
        "z": "",
        "name": "orderDisplayLog",
        "maxEntries": "20",
        "isAddTimestamp2Entries": false
    },
    {
        "id": "4d494f6d.5997c",
        "type": "Log",
        "z": "",
        "name": "SAPEventLog",
        "maxEntries": "100",
        "isAddTimestamp2Entries": true
    },
    {
        "id": "8c779f84.c086",
        "type": "Mutex",
        "z": "",
        "name": "mutex.app.initialize"
    },
    {
        "id": "41222dff.1824c4",
        "type": "ui_tab",
        "z": "",
        "name": "Tests",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d7e8a590.ae7fe8",
        "type": "ui_group",
        "z": "",
        "name": "Create Orders",
        "tab": "41222dff.1824c4",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "740619e9.082388",
        "type": "ui_group",
        "z": "",
        "name": "Create Faulty Orders",
        "tab": "41222dff.1824c4",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "b0cdeb86.b10de8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "740619e9.082388",
        "order": 6,
        "width": "7",
        "height": 1
    },
    {
        "id": "1e3d4002.580e9",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Version:",
        "format": "{{msg.payload.app.about.version}}",
        "layout": "row-left",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2f3d83f.dacbc8",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Date:",
        "format": "{{msg.payload.app.about.date}}",
        "layout": "row-left",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "19640171.0e9bcf",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Author:",
        "format": "{{msg.payload.app.about.author}}",
        "layout": "row-left",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "235db0fa.2b603",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "For ASAPIO version:",
        "format": "{{msg.payload.app.about.asapioVersion}}",
        "layout": "row-left",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "304a9d71.09e7a2",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "top right",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrNotification",
        "x": 1250,
        "y": 480,
        "wires": []
    },
    {
        "id": "8878549f.474918",
        "type": "switch",
        "z": "317873af.a031fc",
        "name": "popupModal?",
        "property": "isPopupModal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 520,
        "wires": [
            [
                "57e50758.396568"
            ]
        ]
    },
    {
        "id": "57e50758.396568",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "prompt",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrModal",
        "x": 1420,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2d5224dc.2df6bc",
        "type": "link in",
        "z": "b661b75c.e7b738",
        "name": "main.app.startup.create",
        "links": [
            "784b6bf1.5317b4"
        ],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "27a69d9c.3a3da2"
            ]
        ],
        "l": true
    },
    {
        "id": "ea57e263.ad971",
        "type": "subflow:72433083.19e34",
        "z": "3eb672f6.dc73fe",
        "name": "sempv2 config unset",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 config unset",
                "type": "str"
            },
            {
                "name": "method",
                "value": "unset",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempv2 config unset",
                "type": "str"
            },
            {
                "name": "debugName",
                "value": "SempV2:Config:clearConfig",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "ccc8ddc6.25c34"
            ],
            []
        ]
    },
    {
        "id": "9185b714.c09188",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.prepare4UsrDisplay",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nlet errorHeading = 'Internal Server Exception';\n\nlet userDisplayMsg = {\n    topic: errorHeading\n}\n    \nlet sourceStr = '';\nif((errorObj.getPreviousSourceType()!==null) && (errorObj.getPreviousSourceName()!==null)) {\n    sourceStr += errorObj.getPreviousSourceType() + \":\" + errorObj.getPreviousSourceName();\n} else {\n    sourceStr += errorObj.getSourceType() + \":\" + errorObj.getSourceName();\n}\n    \nuserDisplayMsg.payload = \n    \"component: \" + errorObj.getComponentName() +\n    \", instance: \" + errorObj.getInstanceName() +\n    \", source:\" + sourceStr +\n    \", caughtBy: \" + JSON.stringify(errorObj.getCaughtBy()) +\n    \"<br/>\" + errorObj.getMessage() +\n    \"<br/>details:\" + JSON.stringify(errorObj.getDetails());\n\n// prepare the message for user modal popup\nlet userModalMsg = {};\nif(errorObj.getSeverity() === 'ERROR') {\n    userModalMsg.isPopupModal = true;\n    userModalMsg.topic = errorHeading;\n    userModalMsg.payload = \n        errorObj.getMessage() +\n        \"<br/>\" + \n        \"<br/>-component:\" + errorObj.getComponentName() + \n        \"<br/>-instance:\" + errorObj.getInstanceName() + \n        \"<br/>-source:\" + sourceStr +\n        \"<br/><br/>Check the log for more details.\"; \n}\n\nreturn [userDisplayMsg, userModalMsg];\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 980,
        "y": 500,
        "wires": [
            [
                "304a9d71.09e7a2"
            ],
            [
                "8878549f.474918"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg",
            "userModalMsg"
        ]
    },
    {
        "id": "fde55a3d.37c0f8",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "bb9da227.7310c",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "initialize app  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 500,
        "wires": []
    },
    {
        "id": "4dd1ba1b.914c84",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.about",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet about = {\n    version: _meta.version,\n    date: 'May-2020 to June-2020',\n    author: 'Solace & ASAPIO',\n    asapioVersion: {\n        major: 9,\n        minor: 3,\n        build: 2004\n    },\n    details: {\n        app: su.flow.getMsgProperties(msg, _meta)\n    }\n}\n\nglobal.set(sau.app.getAboutPath(_meta), about);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 460,
        "wires": [
            [
                "19465cb4.994783"
            ]
        ]
    },
    {
        "id": "c47a31d.a5a67d",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "disableTabs",
        "func": "\nmsg.payload = {\n    tab: 'About',\n    tabs: {\n        disable: [\n            'Order', 'SAP Event Log', 'Tests'\n        ]\n    }\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "df6765ae.b94958"
            ]
        ]
    },
    {
        "id": "df6765ae.b94958",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "78311e04.935a3",
        "type": "inject",
        "z": "3eb672f6.dc73fe",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "c4bd5101.221ef",
                "8ce917e4.1a7b88"
            ]
        ]
    },
    {
        "id": "4e74e35b.6b8ddc",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.hide.group",
        "func": "\n//{\"group\": {\"hide\": [\"tab_name_group_name_with_underscores\"], \"show\": [\"reveal_another_group\"], \"focus\": true}}\n\nmsg.payload = {\n    group: {\n        hide: [\n            'About_About_Solace_Device_Broker'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "f651c8f1.3c4aa8"
            ]
        ]
    },
    {
        "id": "9b9e8ec9.d916e",
        "type": "inject",
        "z": "b661b75c.e7b738",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "4e74e35b.6b8ddc",
                "e6c7abb3.5c08f8"
            ]
        ]
    },
    {
        "id": "f651c8f1.3c4aa8",
        "type": "ui_ui_control",
        "z": "b661b75c.e7b738",
        "name": "applyGroup",
        "events": "all",
        "x": 530,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db82e187.a2ea5",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.showAboutSolaceDeviceBroker",
        "func": "\n//{\"group\": {\"hide\": [\"tab_name_group_name_with_underscores\"], \"show\": [\"reveal_another_group\"], \"focus\": true}}\n\nmsg.payload = {\n    group: {\n        show: [\n            'About_About_Solace_Device_Broker'\n        ]\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "9e02b983.635dc8"
            ]
        ]
    },
    {
        "id": "9e02b983.635dc8",
        "type": "ui_ui_control",
        "z": "b661b75c.e7b738",
        "name": "applyGroup",
        "events": "all",
        "x": 1390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e13cb973.0aab68",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "trigger_init",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1310,
        "y": 360,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "865a717d.2d77a",
        "type": "complete",
        "z": "3eb672f6.dc73fe",
        "name": "on_init",
        "scope": [
            "e13cb973.0aab68"
        ],
        "uncaught": false,
        "x": 90,
        "y": 620,
        "wires": [
            [
                "f02344e2.5b23b8"
            ]
        ]
    },
    {
        "id": "7122ecfb.104184",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "120",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Please wait for the application to start",
        "name": "plsWait",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "4de7c1a8.404b1",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.payload = \"it'll only take a few seconds ...\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 280,
        "wires": [
            [
                "7122ecfb.104184"
            ]
        ]
    },
    {
        "id": "346232b6.b3dd7e",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "collect initialized update responses from other components ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 930,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e0024adb.7c14e8",
        "type": "catch",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "c0a145aa.41d538"
            ]
        ]
    },
    {
        "id": "b5a3e8df.459f58",
        "type": "subflow:317873af.a031fc",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "b127ccda.4e18b",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "solace.sempv2.about ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "bf5fe39e.a6b9e",
        "type": "catch",
        "z": "6b984824.a17568",
        "name": "catch httpRequest",
        "scope": [
            "dfaf881c.36c188"
        ],
        "uncaught": false,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "9a74b452.a0a7a8"
            ]
        ]
    },
    {
        "id": "f4cc72ee.c9615",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "main app -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "517e908a.3a45",
        "type": "ui_ui_control",
        "z": "317873af.a031fc",
        "name": "onBrowserConnect",
        "events": "connect",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "f9dac897.4c5b98"
            ]
        ]
    },
    {
        "id": "917f42fe.c5335",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "disableTabs",
        "func": "\nmsg.payload = {\n    tab: 'About',\n    tabs: {\n        disable: [\n            'Settings', 'Device Commands', 'Device Config', 'Broker Control', 'Device Monitor'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "507320fc.fc9f4"
            ]
        ]
    },
    {
        "id": "507320fc.fc9f4",
        "type": "ui_ui_control",
        "z": "317873af.a031fc",
        "name": "applyTabs",
        "events": "change",
        "x": 670,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c2676af7.59e7d8",
        "type": "ui_template",
        "z": "b661b75c.e7b738",
        "group": "b957fef7.e902d",
        "name": "displayAboutDeviceBroker",
        "order": 2,
        "width": "21",
        "height": "6",
        "format": "\n\n<div>\n    <pre>{{msg.payload.deviceBroker.about | json}}</pre>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "db82e187.a2ea5",
                "e58bfb0.929d608"
            ]
        ]
    },
    {
        "id": "7f0709b4.bf3a18",
        "type": "catch",
        "z": "b661b75c.e7b738",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "c8e458a6.7dc698"
            ]
        ]
    },
    {
        "id": "8532221e.d70a4",
        "type": "subflow:317873af.a031fc",
        "z": "b661b75c.e7b738",
        "name": "",
        "env": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "545f4874.7569c8",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "the end  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 900,
        "y": 1760,
        "wires": []
    },
    {
        "id": "ccc02dd2.c6ca",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 940,
        "wires": []
    },
    {
        "id": "5e5c85ac.ee167c",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "main.about -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "87606983.0864e8",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 168,
        "wires": []
    },
    {
        "id": "e62ceaed.ba9d88",
        "type": "comment",
        "z": "72433083.19e34",
        "name": "solace.sempv2.config ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 40,
        "wires": []
    },
    {
        "id": "8d628a2d.6a2d98",
        "type": "comment",
        "z": "72433083.19e34",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "4d33dbd6.9af704",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "solace.utils.forEach -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "18b8e08f.3f88af",
        "type": "catch",
        "z": "44813701.a560c8",
        "name": "catch-all x errHandler",
        "scope": [
            "4d33dbd6.9af704",
            "220d2334.7e8a6c",
            "f72481f9.0d87a",
            "e907d4d0.096d08",
            "c3b8d0b6.9f5fa",
            "cb9e650e.ac4bc8",
            "ed1738d5.4622f8",
            "404b41c4.06b95",
            "d9c35b38.533828"
        ],
        "uncaught": false,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "4c8cf9e.3b8d708"
            ]
        ]
    },
    {
        "id": "220d2334.7e8a6c",
        "type": "status",
        "z": "44813701.a560c8",
        "name": "",
        "scope": null,
        "x": 780,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "502e8b1d.28cda4",
        "type": "status",
        "z": "72433083.19e34",
        "name": "",
        "scope": null,
        "x": 1680,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f72481f9.0d87a",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "end -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "122fe845.c2a7e8",
        "type": "catch",
        "z": "6b984824.a17568",
        "name": "catch-all x (error handler, httpRequest)",
        "scope": [
            "b127ccda.4e18b",
            "80537b6a.50ea28",
            "2ff6e77b.3ac0c8",
            "6020c05e.e4d69",
            "ebb26519.80ab48",
            "118812c3.9520cd",
            "74cdef40.01333",
            "65c36bb9.6d9814",
            "9a74b452.a0a7a8",
            "884cdb87.779788",
            "616e0712.29bdf8",
            "ee0d5851.17a708",
            "d0a63fcb.ec5a2",
            "fbc76c69.56629",
            "c4faeee4.3ed8d",
            "cb9207f3.f22508",
            "94e6c844.2878f8",
            "6f489538.8a154c",
            "4b5c1ce7.4c9eb4",
            "382d8818.fc2bd8",
            "ddd8e537.7b8b08"
        ],
        "uncaught": false,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "b4377583.93fd98"
            ]
        ]
    },
    {
        "id": "2ff6e77b.3ac0c8",
        "type": "status",
        "z": "6b984824.a17568",
        "name": "",
        "scope": null,
        "x": 1660,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6020c05e.e4d69",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ESOCKETTIMEDOUT\"",
        "info": "```json\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/xxxxxxabout\",\n \"requestTimeout\": 100,\n \"_msgid\": \"ec7a77e9.a9b788\",\n \"payload\": \"Error: ESOCKETTIMEDOUT : https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/xxxxxxabout\",\n \"statusCode\": \"ESOCKETTIMEDOUT\"\n}\n```",
        "x": 1370,
        "y": 560,
        "wires": []
    },
    {
        "id": "ebb26519.80ab48",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": 400",
        "info": "```json\n\n\"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 14,\n    \"description\": \"API confi not supported.\",\n    \"status\": \"NOT_SUPPORTED\"\n   },\n\n\n\n```\n\n\n\n```json\n\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:31:40 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"20b17e5b\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\",\n \"requestTimeout\": 30000,\n \"_msgid\": \"e464a037.d5043\",\n \"statusCode\": 400,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 535,\n    \"description\": \"No paths found for /aboutxxx\",\n    \"status\": \"INVALID_PATH\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\"\n   },\n   \"responseCode\": 400\n  }\n },\n \"redirectList\": []\n}\n\n\n\n```\n\n\n```json\n\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:50:54 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"78e79f5a\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"8e2fd7cf.f99218\",\n \"statusCode\": 400,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 14,\n    \"description\": \"API confi not supported.\",\n    \"status\": \"NOT_SUPPORTED\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\"\n   },\n   \"responseCode\": 400\n  }\n },\n \"redirectList\": []\n}\n\n```",
        "x": 1310,
        "y": 405,
        "wires": []
    },
    {
        "id": "118812c3.9520cd",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": 401",
        "info": "```json\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:46:42 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"www-authenticate\": \"Basic realm=\\\"Unauthorized\\\"\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"023f4222\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\",\n \"requestTimeout\": 30000,\n \"_msgid\": \"57c9fe3c.cef7d\",\n \"statusCode\": 401,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 72,\n    \"description\": \"Authorization Failed\",\n    \"status\": \"UNAUTHORIZED\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\"\n   },\n   \"responseCode\": 401\n  }\n },\n \"redirectList\": []\n}\n\n\n```",
        "x": 1310,
        "y": 445,
        "wires": []
    },
    {
        "id": "74cdef40.01333",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ENOTFOUND\"",
        "info": "```json\n\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mrm7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"9de696e5.4faef8\",\n \"payload\": \"Error: getaddrinfo ENOTFOUND mrm7sc2dxasz.messaging.solace.cloud mrm7sc2dxasz.messaging.solace.cloud:943 : https://mrm7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about\",\n \"statusCode\": \"ENOTFOUND\"\n}\n\n```",
        "x": 1340,
        "y": 520,
        "wires": []
    },
    {
        "id": "65c36bb9.6d9814",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ETIMEDOUT\"",
        "info": "wrong port\n\n```json\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:942/SEMP/v2/config/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"c2f12edc.bee16\",\n \"payload\": \"Error: ETIMEDOUT : https://mr6m7sc2dxasz.messaging.solace.cloud:942/SEMP/v2/config/about\",\n \"statusCode\": \"ETIMEDOUT\"\n}\n```",
        "x": 1340,
        "y": 480,
        "wires": []
    },
    {
        "id": "9517c0dd.9e911",
        "type": "function",
        "z": "72433083.19e34",
        "name": "utils.debug(sempv2.config)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1520,
        "y": 80,
        "wires": []
    },
    {
        "id": "c1e143dc.91573",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "app controller ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "89ff5802.1a7e98",
        "type": "catch",
        "z": "7335a6bf.4e03a8",
        "name": "catch-all x (err handler)",
        "scope": [
            "4dd1ba1b.914c84",
            "c1e143dc.91573",
            "455042b0.6e533c",
            "4b1decb9.9c4564",
            "e64af90a.71bbf8",
            "5b5c96c8.4cbd18",
            "7bc56d49.97b274",
            "f75ff44f.2edeb8",
            "6967887e.553fb8",
            "e10a5cf1.0efdd",
            "781428bf.b860f8",
            "190b317f.4c610f",
            "c291703e.44635",
            "ede934bb.6c6d58",
            "82c135ff.9b73f8",
            "187dc50e.337d6b",
            "accb2e2b.aeb15",
            "eb11d271.83f0c",
            "ec2f888a.3917d8",
            "5f1a5110.7b057",
            "ed1064cf.934c58",
            "3e6162b4.7ea1ae",
            "19465cb4.994783",
            "9038781a.7c79d8",
            "1b1b527c.6b9e1e",
            "f8d8cfbe.743ab"
        ],
        "uncaught": false,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "c728f80b.a1d258"
            ]
        ]
    },
    {
        "id": "9a74b452.a0a7a8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.log(sempv2.about.httpErr)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\n\nmsg = su.misc.setObjectPath(msg, '_solace.utils.log.meta', _meta);\n\nnode.error(JSON.stringify(msg, null, 1));\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"http error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "455042b0.6e533c",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n\n    //todo test\n    //return throwError(msg, 'testing solace error', {where: 'isValidFrameworkInstanceProperties'});\n\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    \n    return true;\n    \n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 600,
        "wires": [
            [
                "e64af90a.71bbf8"
            ]
        ]
    },
    {
        "id": "fb1bd8f9.91f568",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app:init (app)",
        "env": [
            {
                "name": "instance-name",
                "value": "app:init (app)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 340,
        "wires": [
            [
                "1e49af32.8e4871"
            ]
        ]
    },
    {
        "id": "4b1decb9.9c4564",
        "type": "status",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "scope": null,
        "x": 1480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e64af90a.71bbf8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return [msg];\n    case 'get':\n        return [null, msg];\n    case 'set':\n        return [null, null, msg];\n    case 'clear-state':\n        global.set(su.flow.getPackageBasePath(_meta), undefined);\n        return [null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 4,
        "noerr": 0,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "7bc56d49.97b274"
            ],
            [
                "e10a5cf1.0efdd"
            ],
            [
                "190b317f.4c610f"
            ],
            [
                "5f1a5110.7b057"
            ]
        ],
        "outputLabels": [
            "init",
            "get",
            "set",
            "clear-state"
        ]
    },
    {
        "id": "5b5c96c8.4cbd18",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc56d49.97b274",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\n/* main --- */\n\nlet state = sau.app.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(su.flow.getBasePath(_meta), state);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 520,
        "wires": [
            [
                "f75ff44f.2edeb8"
            ]
        ]
    },
    {
        "id": "67b8792c.811068",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "cb69f0a5.ffc2b"
            ]
        ]
    },
    {
        "id": "7f85f6b3.d94528",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "utils.debug (SolaceError)",
        "func": "\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e5268.9f0bdd8",
        "type": "catch",
        "z": "8e181349.856bd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "39daa6eb.d9b0ba"
            ]
        ]
    },
    {
        "id": "39daa6eb.d9b0ba",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "utils.logError(SolaceError)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "66204707.f77548",
        "type": "status",
        "z": "8e181349.856bd",
        "name": "",
        "scope": null,
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f75ff44f.2edeb8",
        "type": "subflow:8e181349.856bd",
        "z": "7335a6bf.4e03a8",
        "name": "SolaceError.unset (app.init)",
        "env": [
            {
                "name": "instance-name",
                "value": "SolaceError.unset (app.init)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "unset",
                "type": "str"
            }
        ],
        "x": 740,
        "y": 520,
        "wires": [
            [
                "4dd1ba1b.914c84"
            ],
            [
                "82c135ff.9b73f8"
            ]
        ]
    },
    {
        "id": "cb69f0a5.ffc2b",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'get':\n        return[msg];\n    case 'set': \n        return [null, msg];\n    case 'unset': \n        return [null, null, msg];\n    case 'getTotalErrorCount':\n        return [null, null, null, msg];\n    case 'setTotalErrorCount':\n        return [null, null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 5,
        "noerr": 0,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "35fd3a6c.90ac66"
            ],
            [
                "7f8d7044.dffd7"
            ],
            [
                "cec31427.df89c8"
            ],
            [
                "7c5e199f.3cec78"
            ],
            [
                "5a0dacb9.04ce04"
            ]
        ],
        "outputLabels": [
            "get",
            "set",
            "unset",
            "getTotalErrorCount",
            "setTotalErrorCount"
        ]
    },
    {
        "id": "cec31427.df89c8",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.unset",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nglobal.set(su.flow.getBasePath(_meta), undefined);\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 280,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "7cd15b6d.5a5a04",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "40923531.4b5a4c",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.createSolaceError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n\nlet flowProperties = su.flowProperties.getMsgFlowProperties(msg);\n\nlet errObj = new su.SolaceError();\nif(!errObj.populateFromMsgError(msg)) {\n    // not a Solace Error\n    errObj.setComponentName(flowProperties.packageId + '.' + flowProperties.componentId);\n    errObj.setInstanceName(flowProperties.instanceName);\n}\nerrObj.setCaughtBy({flow: flowProperties});\n\nlet newMsg = errObj.mergeInto(msg);\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "4bd780ca.5274"
            ]
        ]
    },
    {
        "id": "40bf8325.122cbc",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.set",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.set",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 500,
        "wires": [
            [
                "9185b714.c09188"
            ],
            [
                "a042ac9c.ba70f"
            ]
        ]
    },
    {
        "id": "7f8d7044.dffd7",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\n// validate we have a SolaceError in the message\nlet se = new su.SolaceError();\nif(!se.populateFromMsgError(msg)) return throwError(msg, 'SolaceError not found in msg', {msg: msg});\n\n// save it in global state\nlet currentProperties = global.get(su.flow.getPropertiesPath(_meta));\nlet count = su.SolaceError.getStatePropertiesTotalErrorCount(currentProperties);\n\nlet newProperties = su.SolaceError.createStateProperties(se, count+1);\n\nglobal.set(su.flow.getPropertiesPath(_meta), newProperties);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 240,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "5c97a965.2c1048",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.get",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "ded44cbd.6f7fb",
                "6c18ac59.e29e54"
            ],
            [
                "eaae46ee.ec4098"
            ]
        ]
    },
    {
        "id": "35fd3a6c.90ac66",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet properties = global.get(su.flow.getPropertiesPath(_meta));\n\nif(!su.misc.isObjectEmpty(properties)) {\n    let se = su.SolaceError.getStatePropertiesSolaceError(properties);\n    if(se === null) return throwError(msg, 'SolaceError not found in global context', {properties: properties});\n    se.setMsgError(msg);\n    msg.payload.isSolaceError = true;\n} else {\n    msg.payload.isSolaceError = false;\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "6967887e.553fb8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d3d9e124.a0f95",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.totalErrorCount",
        "func": "\nmsg.payload.solaceErrorCount++;\n\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"error count:\" + msg.payload.solaceErrorCount });\n\nif(msg.payload.solaceErrorCount === 1) {\n\n    return msg;\n\n} else {\n\n    return[null, msg]\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 230,
        "y": 500,
        "wires": [
            [
                "917f42fe.c5335",
                "40bf8325.122cbc"
            ],
            [
                "8696ab06.ffa0f8"
            ]
        ],
        "outputLabels": [
            "totalErrorCount = 1",
            "totalErrorCount > 1"
        ]
    },
    {
        "id": "ff2a45aa.69c188",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "app error handler (appErrHandler) -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "56725407.e8971c",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "SolaceError -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "7c5e199f.3cec78",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.getTotalErrorCount",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet properties = global.get(su.flow.getPropertiesPath(_meta));\n\nmsg.payload = {\n    solaceErrorCount: su.SolaceError.getStatePropertiesTotalErrorCount(properties)\n}\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 320,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "2cdd074c.b22cc8",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todo: test for loops ...",
        "info": "",
        "x": 1520,
        "y": 80,
        "wires": []
    },
    {
        "id": "70faa34.7dde75c",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "SolaceError.getTotalErrorCount(appErrHandler)",
        "env": [
            {
                "name": "instance-name",
                "value": "SolaceError.getTotalErrorCount(appErrHandler)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getTotalErrorCount",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "d3d9e124.a0f95"
            ],
            [
                "2db4be75.9ac632"
            ]
        ]
    },
    {
        "id": "f38af028.18c6c",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "throw.error.javascript - SolaceError - Internal",
        "func": "\nlet hello = SolaceErrorInternalError.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "21d06f8b.09f81",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "throw.error.javascript - appErrHandler - Internal",
        "func": "\nlet hello = SolaceErrorHandlerInternalError.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6c8901a9.e67ab",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "b661b75c.e7b738",
        "name": "app - get about",
        "env": [
            {
                "name": "instance-name",
                "value": "app - get about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "1e3d4002.580e9",
                "a2f3d83f.dacbc8",
                "19640171.0e9bcf",
                "235db0fa.2b603",
                "5615438f.c8e9fc"
            ]
        ]
    },
    {
        "id": "e10a5cf1.0efdd",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.state')) return throwError(msg, 'msg.payload.get.state is empty');\n    \n    return true;\n}\n\nfunction isValidMsgPayloadParams(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.params')) return throwError(msg, 'msg.payload.get.params is empty');\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return; \n\nswitch(msg.payload.get.state) {\n    case 'app.properties': {\n        msg.payload = {\n            app: {\n                properties: global.get(su.flow.getPropertiesPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'app.about': {\n        msg.payload = {\n            app: {\n                about: global.get(sau.app.getAboutPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'app.isStartupComplete': {\n        msg.payload = {\n            app: {\n                isStartupComplete: global.get(sau.app.getIsStartupCompletePath(_meta))\n            }\n        }\n        return msg;\n    }    \n    case 'app.isInitialized': {\n        msg.payload = {\n            app: {\n                isInitialized: global.get(sau.app.getIsInitializedPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'broker.isConnected': {\n        msg.payload = {\n            broker: {\n                isConnected: global.get(sau.app.getIsAppSolaceBrokerConnectedPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'broker.about': {\n        \n        if(!isValidMsgPayloadParams(msg)) return; \n        \n        let solaceBrokerId = msg.payload.get.params.solaceBrokerId;\n        if(su.misc.isStringEmpty(solaceBrokerId)) return throwError(msg, 'payload.get.params.solaceBrokerId not found', {payload: msg.payload});\n\n        path = sau.app.getDeviceBrokersPath(_meta) + '.' + solaceBrokerId + '.about';\n        about = global.get(path);\n        if(su.misc.isObjectEmpty(about)) return throwError(msg, \"'broker.about' not found in global context\", {path: path});\n        msg.payload = {\n            deviceBroker: {\n                solaceBrokerId: solaceBrokerId,\n                about: about\n            }\n        }\n        return msg;\n    }\n    /*\n    case 'config.deviceDefaults': {\n        msg.payload = {\n            deviceDefaults: global.get(sau.app.getConfigPath(_meta) + '.deviceDefaults')\n        }\n        return msg;\n    }\n    */\n    case 'config.broker': {\n        msg.payload = {\n            config: {\n                broker: global.get(sau.app.getConfigPath(_meta) + '.broker')\n            }\n        }\n        return msg;\n    }\n    case 'config.broker.sempv2': {\n        msg.payload = {\n            config: {\n                broker: {\n                    sempv2: global.get(sau.app.getConfigPath(_meta) + '.broker.sempv2')\n                }\n            }\n        }\n        return msg;\n    }\n    case 'config.broker.mqtt': {\n        msg.payload = {\n            config: {\n                broker: {\n                    mqtt: global.get(sau.app.getConfigPath(_meta) + '.mgmtBroker')\n                }\n            }\n        }\n        return msg;\n    }\n    default: {\n        return throwError(msg, 'unknown msg.payload.get.state', {payload: msg.payload});\n    }\n}\n\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 560,
        "wires": [
            [
                "c291703e.44635"
            ]
        ]
    },
    {
        "id": "781428bf.b860f8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.broker.mqtt",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet envVars = [\n    'SOLACE_SAP_DEMO_MQTT_BROKER_HOST',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_PORT',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_USER',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_PASSWORD',\n    'SOLACE_SAP_DEMO_MQTT_CLIENT_ID'\n    ];\n\nlet config = {};\nfor(i=0; i < envVars.length; i++) {\n    let v = env.get(envVars[i]);\n    if(su.misc.isStringEmpty(v)) return throwError(msg, \"environment variable not found\", {envVar: envVars[i]});\n    su.misc.setObjectPath(config, envVars[i], v);\n}\n\nglobal.set(sau.app.getConfigPath(_meta) + '.broker.mqtt', config);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 380,
        "wires": [
            [
                "9038781a.7c79d8"
            ]
        ]
    },
    {
        "id": "190b317f.4c610f",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.set.state')) return throwError(msg, 'msg.payload.set.state is empty');\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params')) return throwError(msg, 'msg.payload.set.params is empty');\n    \n    return true;\n}\n\nfunction isValueBoolean(msg) {\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params.value')) return throwError(msg, 'msg.payload.set.params.value is empty');\n    if(!su.misc.isBoolean(msg.payload.set.params.value)) return throwError(msg, 'msg.payload.set.params.value is not a boolean', {payload: msg.payload});\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nswitch(msg.payload.set.state) {\n    case 'app.isStartupComplete': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsStartupCompletePath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'app.isInitialized': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsInitializedPath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'broker.isConnected': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsAppSolaceBrokerConnectedPath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'broker.about': {\n        \n        let solaceBrokerId = msg.payload.set.params.solaceBrokerId;\n        if(su.misc.isStringEmpty(solaceBrokerId)) return throwError(msg, 'msg.payload.set.params.solaceBrokerId is empty', {payload: msg.payload});\n        \n        let about = msg.payload.set.params.about;\n        if(su.misc.isObjectEmpty(about)) return throwError(msg, 'msg.payload.set.params.about is empty', {payload: msg.payload});\n\n        let path = sau.app.getDeviceBrokersPath(_meta) + '.' + solaceBrokerId + '.about';\n        \n        global.set(path, about);\n        \n        return msg;\n    }\n    case 'app.configfile': {\n        /*\n        msg.payload = {\n            set: {\n                state: 'app.configfile',\n                params: {\n                    filename: 'solace-xdk110-mgmt-config.json'\n                } \n            }\n        }\n        */\n        \n        let filename = msg.payload.set.params.filename;\n        if(su.misc.isStringEmpty(filename)) return throwError(msg, 'msg.payload.set.params.filename is empty', {payload: msg.payload});\n        \n        let path = sau.app.getConfigfilePath(_meta) + '.filename';\n        \n        global.set(path, filename);\n        \n        msg.filename = filename;\n\n        return [null, msg];\n    }\n    default: {\n        return throwError(msg, 'unknown msg.payload.set.state', {payload: msg.payload});\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 520,
        "y": 600,
        "wires": [
            [
                "c291703e.44635"
            ],
            [
                "187dc50e.337d6b"
            ]
        ],
        "outputLabels": [
            "generic",
            "app.configfile"
        ]
    },
    {
        "id": "27a69d9c.3a3da2",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "setInput",
        "func": "msg.payload = {\n    get: {\n        state: 'app.about'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "6c8901a9.e67ab"
            ]
        ]
    },
    {
        "id": "c291703e.44635",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1e49af32.8e4871",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.isStartupComplete',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "8b4c82c0.ab974"
            ]
        ]
    },
    {
        "id": "8b4c82c0.ab974",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app set startupComplete",
        "env": [
            {
                "name": "instance-name",
                "value": "app set startupComplete",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "e13cb973.0aab68",
                "784b6bf1.5317b4"
            ]
        ]
    },
    {
        "id": "99df6675.e1bf88",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "utils.log (app) start initialization",
        "func": "\nmsg.payload = {\n    log:    '_START_:_INITIALIZATION_:' + JSON.stringify(msg.payload.app.properties) \n/*\n    log:    'START:INITIALIZATION:componentName=' + \n            msg.payload.app.properties.componentName + \n            ':displayName=' + msg.payload.app.properties.displayName + \n            ':instanceId=' + msg.payload.app.properties.instanceId\n*/\n}\n\nnode.log(msg.payload.log);           \n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 750,
        "y": 580,
        "wires": []
    },
    {
        "id": "f02344e2.5b23b8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "start",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"start\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 620,
        "wires": [
            [
                "70263948.fe9768",
                "b952b68d.087178"
            ]
        ]
    },
    {
        "id": "59c5efb3.5e814",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get:properties",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get:properties",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 580,
        "wires": [
            [
                "99df6675.e1bf88"
            ]
        ]
    },
    {
        "id": "70263948.fe9768",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.properties'\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "59c5efb3.5e814"
            ]
        ]
    },
    {
        "id": "51efcbf6.b4be64",
        "type": "catch",
        "z": "72433083.19e34",
        "name": "catch-all x (err handler)",
        "scope": [
            "e62ceaed.ba9d88",
            "8d628a2d.6a2d98",
            "502e8b1d.28cda4",
            "9517c0dd.9e911",
            "efd76714.54afd8",
            "479174e5.df47cc",
            "fb2e0fdb.2a72d",
            "9602ae1.378fd5",
            "c993e3b5.08e35",
            "fadb9ae6.eac3a8",
            "df8275be.a20e68",
            "7974ec04.8977c4",
            "ed2cae31.155fb",
            "644ca100.f8086",
            "71fb6edf.d408",
            "f8140932.bb3d38",
            "750c1d8d.8501c4"
        ],
        "uncaught": false,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "c73be3b9.05f3a"
            ]
        ]
    },
    {
        "id": "efd76714.54afd8",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, \"property 'instance-name' not found\");\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidComponentInstanceProperties(msg) {\n    \n    let cips = {\n        method: env.get('method'),\n        solaceBrokerId: env.get('solaceBrokerId')\n    };\n\n    if(su.misc.isStringEmpty(cips.method)) return throwError(msg, \"property 'method' not found\");\n\n    if(!su.misc.isStringEmpty(cips.solaceBrokerId)) {\n        \n        if(!su.misc.isValidId(cips.solaceBrokerId)) return throwError(\"property 'solaceBrokerId' is not a valid id\");\n            \n    } else return throwError(\"property 'solaceBrokerId' not found\");\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, cips);\n    \n    return true;\n\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return; \n\nif(!isValidComponentInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "479174e5.df47cc"
            ]
        ]
    },
    {
        "id": "479174e5.df47cc",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// main ----------------------------------------------------\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, \"msg instance property 'method' not found\");\n\nswitch(method) {\n    case 'get':\n        return [msg];\n    case 'set':\n        return [null, msg];\n    case 'unset':\n        return [null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 3,
        "noerr": 0,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "644ca100.f8086"
            ],
            [
                "c993e3b5.08e35"
            ],
            [
                "fb2e0fdb.2a72d"
            ]
        ],
        "outputLabels": [
            "get",
            "set",
            "unset"
        ]
    },
    {
        "id": "fb2e0fdb.2a72d",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.unset",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nglobal.set(path, undefined);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 260,
        "wires": [
            [
                "f8140932.bb3d38"
            ]
        ]
    },
    {
        "id": "9602ae1.378fd5",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1620,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "be6725c8.ea7ea8",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get:config.sempv2",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get:config.sempv2",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 800,
        "wires": [
            [
                "7867718f.f1e47"
            ]
        ]
    },
    {
        "id": "ccc8ddc6.25c34",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'config.broker.sempv2'\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 800,
        "wires": [
            [
                "be6725c8.ea7ea8"
            ]
        ]
    },
    {
        "id": "c993e3b5.08e35",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidBrokerConfig(msg, c) {\n    \n    let isError = false;\n    let message;\n    let details = {};\n    \n    if(su.misc.isObjectEmpty(c)) {\n        \n        isError = true;\n        message = \"'brokerConfig' not found in msg payload\";\n        \n    } else {\n\n        let issues = suSempv2.config.testValidBrokerConfig(c);\n        if(issues.length > 0) {\n            isError = true;\n            message = \"'brokerConfig' in msg payload is not valid\";\n            details.issues = issues;\n        }\n    }\n    \n    if(isError) { \n        details.payload = msg.payload, \n        details.expected = {\n                path: su.flow.getMsgPayloadPath(_meta, 'brokerConfig'),\n                sampleContents: suSempv2.config.getBrokerConfigReference(),\n        };\n        return throwError(msg, message, details);\n    }\n    return true;\n}\n\n// main ----------------------------------------------------\n\nlet c = su.flow.getMsgPayload(msg, _meta, 'brokerConfig');\n\nif(!isValidBrokerConfig(msg, c)) return;\n\n// create a sempv2.config function for this\nlet config = {\n    basePath: c.basePath,\n    vpn: c.vpn,\n    virtualRouter: c.virtualRouter,\n    headers: {\n      Authorization: 'Basic ' + new Buffer(c.user + ':' + c.pwd).toString('base64')\n    },\n    requestTimeout: 10000,\n    api: {\n        mqttSession: {\n            basePath: c.basePath + '/msgVpns/' + c.vpn + '/mqttSessions'\n        },\n        about: {\n            basePath: c.basePath\n        }\n    }\n};\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nglobal.set(path, config);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 220,
        "wires": [
            [
                "df8275be.a20e68"
            ]
        ]
    },
    {
        "id": "7867718f.f1e47",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "\nlet payload = {\n    sempv2: {\n        config: {\n            brokerConfig: msg.payload.config.broker.sempv2\n        }\n    }\n}\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 800,
        "wires": [
            [
                "d464c6aa.271cd8"
            ]
        ]
    },
    {
        "id": "d464c6aa.271cd8",
        "type": "subflow:72433083.19e34",
        "z": "3eb672f6.dc73fe",
        "name": "sempv2.config.set@app",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2.config.set@app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "c3d7a262.3e2",
                "fc6dd38b.c144e"
            ],
            [
                "a3c60d3d.c74f5",
                "336138b0.b0e838"
            ]
        ]
    },
    {
        "id": "fadb9ae6.eac3a8",
        "type": "subflow:6b984824.a17568",
        "z": "72433083.19e34",
        "name": "sempv2 config-sempv2 about",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 config-sempv2 about",
                "type": "str"
            },
            {
                "name": "resource",
                "value": "all",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempv2 config-sempv2 about",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "7974ec04.8977c4"
            ],
            [
                "ed2cae31.155fb"
            ]
        ]
    },
    {
        "id": "884cdb87.779788",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.debug(sempv2.about)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1160,
        "y": 140,
        "wires": []
    },
    {
        "id": "616e0712.29bdf8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, \"property 'instance-name' not found\");\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidComponentInstanceProperties(msg) {\n\n    let cips = {\n        solaceBrokerId: env.get('solaceBrokerId'),\n        resource: env.get('resource'),\n        vpn: env.get('vpn')\n    };\n\n    if(su.misc.isStringEmpty(cips.solaceBrokerId)) isPayloadRequiresSolaceBrokerId = true;\n    else {\n        if(!su.misc.isValidId(cips.solaceBrokerId)) return throwError(msg, \"property 'solaceBrokerId' is not a valid id\", {solaceBrokerId: cips.solaceBrokerId});\n        solaceBrokerId = cips.solaceBrokerId;\n    }\n\n    if(su.misc.isStringEmpty(cips.resource)) return throwError(msg, \"property 'resource' not found\");\n\n    switch(cips.resource) {\n        case 'all':\n        case 'about':\n        case 'about/api':\n        case 'about/user':\n        case 'about/user/msgVpns':\n            break;\n        case 'about/user/msgVpns/{vpn}': {\n            if(su.misc.isStringEmpty(cips.vpn)) \n                return throwError(msg, \"property 'vpn' required for resource='about/user/msgVpns/{vpn}'\");\n        }    \n            break;\n        default: {\n            return throwError(msg, 'unknown resource', {resource: cips.resource});\n        }\n    }\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, cips);\n    \n    return true;\n}\n\nfunction isValidMsgPayloadParams(msg, params) {\n\n    let details = {\n        payload: msg.payload,\n        expected: {\n            params: {\n                path: su.flow.getMsgPayloadPath(_meta, 'params'),\n                sampleContents: suSempv2.about.getMsgPayloadParamsReference()\n            }\n        }\n    }   \n    \n    if(su.misc.isObjectEmpty(params)) return throwError(msg, \"'params' not found in msg payload\", details);\n    \n    if(isPayloadRequiresSolaceBrokerId) {\n\n        if(su.misc.isStringEmpty(params.solaceBrokerId)) return throwError(msg, \"'params.solaceBrokerId' not found in msg payload\", details);\n\n        if(!su.misc.isValidId(params.solaceBrokerId)) return throwError(msg, \"'params.solaceBrokerId' is not a valid id\", {solaceBrokerId: params.solaceBrokerId});\n        \n        solaceBrokerId = params.solaceBrokerId;\n    }\n    \n    return true;\n}\n\n// main ----------------------------------------------------\n\nvar solaceBrokerId = null;\nvar isPayloadRequiresSolaceBrokerId = false;\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return; \n\nif(!isValidComponentInstanceProperties(msg)) return;\n\nlet params = su.flow.getMsgPayload(msg, _meta, 'params');\n  \nif(!isValidMsgPayloadParams(msg, params)) return;\n\nlet path = suSempv2.config.getConfigPath(solaceBrokerId);\nlet sempv2 = global.get(path);\nif(su.misc.isObjectEmpty(sempv2)) return throwError(msg, \"sempv2 config not found in global context\", {path: path})\nlet update = {\n    sempv2: sempv2\n};\n\nsu.misc.merge(params, update);\n\nsu.flow.updateMsgInstanceProperties(msg, _meta, params)\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 280,
        "wires": [
            [
                "ee0d5851.17a708"
            ]
        ]
    },
    {
        "id": "b4377583.93fd98",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.subflowErrorHandler(sempv2.about)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\n    var _meta = suSempv2.about.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "df8275be.a20e68",
        "type": "function",
        "z": "72433083.19e34",
        "name": "input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n      sempv2: {\n          about: {\n              params: {\n                solaceBrokerId: mips.solaceBrokerId\n              }\n          }\n     }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 220,
        "wires": [
            [
                "fadb9ae6.eac3a8"
            ]
        ]
    },
    {
        "id": "ee0d5851.17a708",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.calls",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n// main ----------------------------------------------------\n\nlet ips = su.flow.getMsgInstanceProperties(msg, _meta); \nvar _payload = {\n    resource: ips.resource, \n    solaceBrokerId: ips.solaceBrokerId\n}\n\nvar calls = [];\n\nlet call;\n\nswitch(_payload.resource) {\n    case 'about':\n    case 'about/api':\n    case 'about/user':\n    case 'about/user/msgVpns': {\n        call = { \n            payload: { \n                resource: _payload.resource, \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break; \n    case 'about/user/msgVpns/{vpn}': {\n        call = { \n            payload: { \n                resource: 'about/user/msgVpns/' + _payload.resourceParams.vpn, \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break;\n    case 'all': {\n        call = { \n            payload: { \n                resource: 'about', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/api', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/user', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/user/msgVpns', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break;\n    default:\n        return throwError('unknown resource', {resource: _payload.resource}, msg);\n}\n\nmsg.payload = {\n    start: true,\n    end: true,\n    items: calls\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "d0a63fcb.ec5a2"
            ]
        ]
    },
    {
        "id": "e907d4d0.096d08",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.debug(utils.forEach)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "c3b8d0b6.9f5fa",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'property \"instance-name\" not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidNewInstanceMsgPayload(msg) {\n\n    if(su.misc.isObjectEmpty(msg.payload)) return throwError(msg, 'msg.payload not found', {msg: msg});\n    if(!su.misc.hasObjectPath(msg.payload, 'start')) return throwError(msg, 'msg.payload.start not found', {payload: msg.payload});\n    if(!su.misc.hasObjectPath(msg.payload, 'end')) return throwError(msg, 'msg.payload.end not found', {payload: msg.payload});\n    if(!su.misc.hasObjectPath(msg.payload, 'items')) return throwError(msg, 'msg.payload.items not found', {payload: msg.payload});\n    if(!su.misc.isArray(msg.payload.items)) return throwError(msg, 'msg.payload.items is not an array', {payload: msg.payload});\n    if(msg.payload.items.length === 0) return throwError(msg, 'msg.payload.items has no elements', {payload: msg.payload});\n\n    return true;\n}\n\n\n// main ----------------------------------------------------\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\n// new instance or continue?\nlet isNewInstance = (su.flow.getMsgInstanceProperties(msg, _meta) === null);\n\nlet action;\n\nif(isNewInstance) {\n\n    msg = su.flow.initMsgProperties(msg, _meta);\n\n    if(!isValidNewInstanceMsgPayload(msg)) return;\n\n    action = 'start';\n    let instanceProperties = {\n        start: JSON.parse(JSON.stringify(msg.payload.start)),\n        end: JSON.parse(JSON.stringify(msg.payload.end)),\n        items: JSON.parse(JSON.stringify(msg.payload.items))\n    }\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, instanceProperties);\n\n} else {\n    \n    let instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n    if(instanceProperties === null) return throwError(msg, 'instance properties not found in msg', {msg: msg});\n    \n    // i is not there at the start\n    let i = su.misc.getObjectPath(instanceProperties, 'i', null);\n    if(i === null || instanceProperties.i+1 < instanceProperties.items.length) {\n        \n        action ='next';\n\n    } else {\n        \n        action = 'end';\n\n    }\n}\n\nswitch(action) {\n    case 'start': {\n        return [msg];\n    }\n    case 'next': {\n        return [null, msg];\n    }\n    case 'end': {\n        return [null, null, msg];\n    }\n    default: return throwError(msg, 'unknown action', {action: action});\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "cb9e650e.ac4bc8"
            ],
            [
                "ed1738d5.4622f8"
            ],
            [
                "404b41c4.06b95"
            ]
        ],
        "outputLabels": [
            "start",
            "next",
            "end"
        ]
    },
    {
        "id": "d0a63fcb.ec5a2",
        "type": "subflow:44813701.a560c8",
        "z": "6b984824.a17568",
        "name": "sempv2 about forEach",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 about forEach",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempV2.config",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "fbc76c69.56629"
            ],
            [
                "c4faeee4.3ed8d"
            ],
            [
                "382d8818.fc2bd8"
            ]
        ]
    },
    {
        "id": "cb9e650e.ac4bc8",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendStart",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n    start: instanceProperties.start\n}\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"start\"});\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fbc76c69.56629",
        "type": "delay",
        "z": "6b984824.a17568",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 650,
        "y": 380,
        "wires": [
            [
                "d0a63fcb.ec5a2"
            ]
        ]
    },
    {
        "id": "ed1738d5.4622f8",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendNextItem",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\n// i is not there at the start\nlet i = su.misc.getObjectPath(instanceProperties, 'i', null);\nif(i === null) i = 0; else i++;\n\n// save i\ninstanceProperties.i = i;\nmsg = su.flow.updateMsgInstanceProperties(msg, _meta, instanceProperties);\n//su.sf.setMsgPropertiesInstance(msg, packageId, componentId, instanceProperties);\n\n// send next one:\nmsg.payload = {\n    item: {\n        i: i,\n        v: instanceProperties.items[i],\n        l: instanceProperties.items.length\n    }\n}\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"item:\" + (i+1) + \"(\" + instanceProperties.items.length + \")\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c4faeee4.3ed8d",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.input4http",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet solaceBrokerId = msg.payload.item.v.payload.solaceBrokerId;\n\nlet sempv2 = su.flow.getMsgInstanceProperties(msg, _meta).sempv2;\n\nlet url=sempv2.api.about.basePath + '/' + msg.payload.item.v.payload.resource;\n\nvar httpMsg = {\n    headers: sempv2.headers,\n    method: 'GET',\n    url: url,\n    requestTimeout: sempv2.requestTimeout\n}\n\nsu.misc.merge(msg, httpMsg);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"http get \" + msg.payload.item.v.payload.resource});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 260,
        "wires": [
            [
                "dfaf881c.36c188"
            ]
        ]
    },
    {
        "id": "dfaf881c.36c188",
        "type": "http request",
        "z": "6b984824.a17568",
        "name": "sempv2.about.httpRequest",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "cb9207f3.f22508"
            ]
        ]
    },
    {
        "id": "cb9207f3.f22508",
        "type": "switch",
        "z": "6b984824.a17568",
        "name": "200?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 260,
        "wires": [
            [
                "6f489538.8a154c"
            ],
            [
                "94e6c844.2878f8"
            ]
        ]
    },
    {
        "id": "94e6c844.2878f8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setOutputError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// put the error together\n\nvar errorDetails = {\n    _meta: _meta,\n    statusCode: msg.statusCode,\n    payload: msg.payload\n};\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) errorDetails.type = 'api'; \nelse errorDetails.type = 'http';\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\nmsgUpdate = {\n    payload: {\n        sempv2: {\n            about: {\n                solaceBrokerId: mips.solaceBrokerId,\n                error: errorDetails    \n            }\n        }\n    }\n}\n\nsu.misc.merge(msg, msgUpdate);\n\nsuccess = su.flow.unsetMsg(msg);\nmsg.payload.meta = undefined;\n\nnode.status({fill:\"red\", shape:\"dot\", text:\"end:error\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1610,
        "y": 200,
        "wires": [
            [
                "ddd8e537.7b8b08"
            ]
        ]
    },
    {
        "id": "6f489538.8a154c",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setInstanceData",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// get the resource from the url\n// msg.url: \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\"\n// extract: everything after /about, convert / to .\n\nvar pos = msg.url.lastIndexOf('/about');\nif(pos === -1) return throwError(msg, '/about not found in url', {url: msg.url});\nvar resourceUrl = msg.url.substr(pos);\nvar resourceDot = resourceUrl.replace(/\\//g, '.');\n//node.warn('resourceDot = ' + resourceDot);\n//contains '.about.user'\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\n//if(su.misc.isObjectEmpty(mips.data)) mips.data = { about: {} };\n\n//about = mips.data.about;\n\nlet path = 'data' + resourceDot;\n\nsu.misc.setObjectPath(mips, path, msg.payload.data);\nsu.misc.setObjectPath(mips, path + '.server', msg.headers.server);\n\n//su.misc.merge(mips, about);\n\nmsg = su.flow.updateMsgInstanceProperties(msg, _meta, mips);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 520,
        "wires": [
            [
                "fbc76c69.56629"
            ]
        ]
    },
    {
        "id": "404b41c4.06b95",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendEnd",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n    end: instanceProperties.end\n}\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4b5c1ce7.4c9eb4",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setOutputSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\nmsgUpdate = {\n    payload: {\n        sempv2: {\n            about: {\n                solaceBrokerId: mips.solaceBrokerId,\n                data: mips.data.about    \n            }\n        }\n    }\n}\n\nsu.misc.merge(msg, msgUpdate);\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"end:success\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1600,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "382d8818.fc2bd8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.stripHttpFromMsg",
        "func": "\nmsg.headers = undefined;\nmsg.method = undefined;\nmsg.url = undefined;\nmsg.requestTimeout = undefined;\nmsg.statusCode = undefined;\nmsg.responseUrl = undefined;\nmsg.redirectList = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 300,
        "wires": [
            [
                "4b5c1ce7.4c9eb4"
            ]
        ]
    },
    {
        "id": "89ba3432.cbbfa8",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.set(broker.about)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.set(broker.about)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1540,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c3d7a262.3e2",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'broker.about',\n        params: {\n            solaceBrokerId: msg.payload.sempv2.about.solaceBrokerId,\n            about: msg.payload.sempv2.about\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "89ba3432.cbbfa8"
            ]
        ]
    },
    {
        "id": "1530c0ba.819a4f",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "b661b75c.e7b738",
        "name": "app get deviceBroker about",
        "env": [
            {
                "name": "instance-name",
                "value": "app get deviceBroker about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "c2676af7.59e7d8"
            ]
        ]
    },
    {
        "id": "27aaf355.bce7dc",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'broker.about',\n        params: {\n            solaceBrokerId: 'solaceDeviceBroker'\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 640,
        "wires": [
            [
                "1530c0ba.819a4f"
            ]
        ]
    },
    {
        "id": "7974ec04.8977c4",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.checks",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet about = msg.payload.sempv2.about.data;\nif(su.misc.isObjectEmpty(about)) return throwError(msg, 'msg.payload.sempv2.about not found', {payload:payload});\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\nlet config = global.get(path);\nif(su.misc.isObjectEmpty(config)) return throwError(msg, 'broker config not found in global context', {path: path});\n\n\n// now validate if configured vpn exists\nlet actualVpns = about.user.msgVpns;\nif(su.misc.isArrayEmpty(actualVpns)) return throwError(msg, 'about.user.msgVpns not found in sempv2/about call to broker', {about: about});\n\nlet actualVpn = su.misc.find(actualVpns, function(o) { return o.msgVpnName === config.vpn; });\nif(actualVpn === undefined) return throwError(msg, 'configured msgVpn not found on broker', {configuredVpn: config.vpn, brokerVpns: actualVpns});\n// check that \"accessLevel\": \"read-write\"\nif(actualVpn.accessLevel !== 'read-write') return throwError(msg, 'accessLevel of vpn not \\'read-write\\'', {brokerVpn: actualVpn});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 220,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "ed2cae31.155fb",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.endError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nvar aboutError = msg.payload.sempv2.about.error;\n\nmsg.payload = {\n    sempv2: {\n        config: {\n            error: aboutError\n        }\n    }\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"end:error\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1630,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "644ca100.f8086",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// main ----------------------------------------------------\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nlet config = global.get(path);\n\nif(su.misc.isObjectEmpty(config)) return throwError(msg, 'broker config not found in global context', {path: path});\n\nsu.flow.setMsgPayload(msg, _meta, 'brokerConfig', config);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 180,
        "wires": [
            [
                "71fb6edf.d408"
            ]
        ]
    },
    {
        "id": "ddd8e537.7b8b08",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.stripHttp",
        "func": "\nmsg.headers = undefined;\nmsg.method = undefined;\nmsg.url = undefined;\nmsg.requestTimeout = undefined;\nmsg.statusCode = undefined;\nmsg.responseUrl = undefined;\nmsg.redirectList = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "71fb6edf.d408",
        "type": "function",
        "z": "72433083.19e34",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 180,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "f8140932.bb3d38",
        "type": "function",
        "z": "72433083.19e34",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 260,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "a3c60d3d.c74f5",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.sempV2.error",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nif(su.misc.hasObjectPath(msg, 'payload.error.payload.meta.error')) {\n    \n    msg.sempV2Error = msg.payload.error.payload.meta.error;\n    return msg;    \n}\n\nmsg.sempv2Error = {\n    statusCode: msg.statusCode,\n    payload: msg.payload\n}\nreturn msg;\n\n//return throwError('unknown error, can\\'t extract error description. check msg and add here extraction rule', null, msg);\n   ",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 800,
        "wires": [
            [
                "d90447e1.a3b2d8"
            ]
        ]
    },
    {
        "id": "d90447e1.a3b2d8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "errorUsrMsg",
        "func": "\n/*\nlet message = 'Broker id: \\'solaceDeviceBroker\\'' +\n                '<br/>' + \n                'error:' +\n                '<br/><pre>' + JSON.stringify(msg.sempV2Error,2) + '</pre>' + \n                '<br/>' +               \n                '<br/>-check your internet connection' +\n                '<br/>-check your connection credentials' +\n                '<br/>' + \n                '<br/>Please fix and re-start the app.';\n*/                \n\nlet message = 'Broker id: \\'solaceDeviceBroker\\'' +\n                '<br/>' + \n                'error:' +\n                '<br/><pre>' + JSON.stringify(msg.sempV2Error,null, 1) + '</pre>' + \n                '<br/>Please fix and re-start the app.';\n\nmsg.topic   = 'Error executing SempV2 call on device broker';\n\nmsg.payload = message;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 800,
        "wires": [
            [
                "205744f.4d5a1bc"
            ]
        ]
    },
    {
        "id": "205744f.4d5a1bc",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "dialog",
        "displayTime": "120",
        "highlight": "green",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "usrDialog",
        "x": 1740,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "8a9ce915.54acb8",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "600",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "errPopup",
        "x": 1520,
        "y": 840,
        "wires": []
    },
    {
        "id": "336138b0.b0e838",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.topic = 'SempV2 Error';\nmsg.payload = \"see log for more details\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1380,
        "y": 840,
        "wires": [
            [
                "8a9ce915.54acb8"
            ]
        ]
    },
    {
        "id": "ab0b2dca.6528",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 560,
        "wires": []
    },
    {
        "id": "ede934bb.6c6d58",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "utils.debug(app)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1220,
        "y": 200,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "6d711a4a.39ac34",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "82c135ff.9b73f8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.error",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\nif(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});",
        "outputs": 0,
        "noerr": 0,
        "x": 1200,
        "y": 520,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "735b775a.b754d8",
        "type": "catch",
        "z": "317873af.a031fc",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "7484821b.b6244c"
            ]
        ]
    },
    {
        "id": "7484821b.b6244c",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "utils.logError(appErrHandler)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"internal error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 0,
        "noerr": 0,
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "e243a40b.346b98",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "utils.debug(appErrHandler)",
        "func": "\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4bd780ca.5274",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.logError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nnode.error('_INTERNAL_SERVER_ERROR_\\n' + errorObj.toString());\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 380,
        "wires": [
            [
                "70faa34.7dde75c"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg"
        ]
    },
    {
        "id": "3d0f9846.147378",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "The End -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 711,
        "wires": []
    },
    {
        "id": "aea90ded.7c436",
        "type": "status",
        "z": "317873af.a031fc",
        "name": "",
        "scope": [
            "d3d9e124.a0f95",
            "7484821b.b6244c"
        ],
        "x": 100,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8696ab06.ffa0f8",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.setTotalErrorCount",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.setTotalErrorCount",
                "type": "str"
            },
            {
                "name": "method",
                "value": "setTotalErrorCount",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 540,
        "wires": [
            [],
            [
                "a042ac9c.ba70f"
            ]
        ]
    },
    {
        "id": "5a0dacb9.04ce04",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.setTotalErrorCount",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\nlet totalErrorCount = msg.payload.solaceErrorCount;\nif(!su.misc.isNumber(totalErrorCount)) return throwError(msg, 'msg.payload.solaceErrorCount is not a number', {payload: msg.payload});\n\n// update properties        \nlet properties = global.get(su.flow.getPropertiesPath(_meta));\nsu.SolaceError.updateStatePropertiesTotalErrorCount(properties, totalErrorCount);\n\n// save it in global state\nglobal.set(su.flow.getPropertiesPath(_meta), properties);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 360,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "a042ac9c.ba70f",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "eaae46ee.ec4098",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 380,
        "y": 260,
        "wires": []
    },
    {
        "id": "ded44cbd.6f7fb",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "todo SolaceErrorHandler",
        "func": "\nnode.warn(node.name + ': implement on browser connect', msg);\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "784b6bf1.5317b4",
        "type": "link out",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.startup.create",
        "links": [
            "2d5224dc.2df6bc"
        ],
        "x": 1350,
        "y": 300,
        "wires": [],
        "l": true
    },
    {
        "id": "ca728d7e.faee2",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "f492cfb7.ad103"
            ]
        ]
    },
    {
        "id": "f492cfb7.ad103",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'get':\n        return[msg];\n    case 'set': \n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "763d50e6.dd6b7"
            ],
            [
                "af583688.0c15b8"
            ]
        ],
        "outputLabels": [
            "get",
            "set"
        ]
    },
    {
        "id": "5685c913.594f58",
        "type": "comment",
        "z": "4f07498e.ebb5f8",
        "name": "utils.flowProperties -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a4e0854.e6b948",
        "type": "status",
        "z": "4f07498e.ebb5f8",
        "name": "",
        "scope": null,
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "763d50e6.dd6b7",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flowProperties.getParentFlowPath();\n\nflowProperties = flow.get(path);\n\nif(su.misc.isObjectEmpty(flowProperties)) return throwError(msg, 'flowProperties not found', {path:path});\n\nsu.flowProperties.setMsgFlowProperties(msg, flowProperties);\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "a4aea2a3.c1433"
            ]
        ]
    },
    {
        "id": "af583688.0c15b8",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet e = {\n    packageId: env.get('packageId'),    \n    componentId: env.get('componentId')\n}\n\nif(su.misc.isStringEmpty(e.packageId)) return throwError(msg, 'env.packageId not found', {env:e});\nif(su.misc.isStringEmpty(e.componentId)) return throwError(msg, 'env.componentId not found', {env:e});\n\nflow.set(su.flowProperties.getParentFlowPath(), su.flowProperties.createFlowProperties(e.packageId, e.componentId));\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 240,
        "wires": [
            [
                "a4aea2a3.c1433"
            ]
        ]
    },
    {
        "id": "a4aea2a3.c1433",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c4bd5101.221ef",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "3eb672f6.dc73fe",
        "name": "flowProperties:set main.app",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set main.app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "app",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "b85f42f2.75907"
            ]
        ]
    },
    {
        "id": "e6c7abb3.5c08f8",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "b661b75c.e7b738",
        "name": "flowProperties:set main.about",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set main.about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "about",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5858ed7a.deaca4",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todo: getting lots of them, only do it once... keep state",
        "info": "",
        "x": 1480,
        "y": 120,
        "wires": []
    },
    {
        "id": "c8e458a6.7dc698",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "b661b75c.e7b738",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "8532221e.d70a4"
            ]
        ]
    },
    {
        "id": "c0a145aa.41d538",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "3eb672f6.dc73fe",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "b5a3e8df.459f58"
            ]
        ]
    },
    {
        "id": "3d3a6a2.d7d2c96",
        "type": "catch",
        "z": "4f07498e.ebb5f8",
        "name": "catch-all x (err handler)",
        "scope": [
            "ca728d7e.faee2",
            "f492cfb7.ad103",
            "5685c913.594f58",
            "9a4e0854.e6b948",
            "763d50e6.dd6b7",
            "af583688.0c15b8",
            "a4aea2a3.c1433"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "5ce3bcc2.d2fd74"
            ]
        ]
    },
    {
        "id": "5ce3bcc2.d2fd74",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "utils.logError(flowProperties)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"internal error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5615438f.c8e9fc",
        "type": "ui_template",
        "z": "b661b75c.e7b738",
        "group": "298a7e90.c76a82",
        "name": "displayAppDetails",
        "order": 2,
        "width": "21",
        "height": "5",
        "format": "\n\n<div>\n    <pre>{{msg.payload.app.about.details | json}}</pre>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 870,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b85f42f2.75907",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.clear-state (app)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.clear-state (app)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "clear-state",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "fb1bd8f9.91f568"
            ]
        ]
    },
    {
        "id": "4c8cf9e.3b8d708",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.subflowErrorHandler(forEach) - make a subflow-node",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.forEach.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "d9c35b38.533828",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c73be3b9.05f3a",
        "type": "function",
        "z": "72433083.19e34",
        "name": "utils.subflowErrorHandler(sempv2.config)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\n    var _meta = suSempv2.config.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "750c1d8d.8501c4",
        "type": "function",
        "z": "72433083.19e34",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "193fe52b.b9a7fb",
        "type": "link in",
        "z": "b661b75c.e7b738",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 210,
        "y": 640,
        "wires": [
            [
                "27aaf355.bce7dc"
            ]
        ],
        "l": true
    },
    {
        "id": "f96041d6.ab02",
        "type": "link out",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.initialize.create",
        "links": [
            "193fe52b.b9a7fb",
            "af47e4e7.3f1028",
            "2bce26b2.a7cd2a",
            "7228d7e4.7201d8",
            "f57ca277.7980b",
            "4fc1447.062e8bc"
        ],
        "x": 610,
        "y": 1020,
        "wires": [],
        "l": true
    },
    {
        "id": "8940887d.e380d8",
        "type": "link in",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.initialize.update",
        "links": [
            "4b3510ea.91f22",
            "c3a55027.c2818",
            "fa9e6fc1.f5adb",
            "a6890ed.17d7ff",
            "33a06c8f.527d04",
            "5dd06c84.955c14"
        ],
        "x": 350,
        "y": 1380,
        "wires": [
            [
                "2debfd8e.0a3792"
            ]
        ],
        "l": true
    },
    {
        "id": "4b3510ea.91f22",
        "type": "link out",
        "z": "b661b75c.e7b738",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 850,
        "y": 700,
        "wires": [],
        "l": true
    },
    {
        "id": "d5f2be92.b4c37",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 700,
        "wires": [
            [
                "4b3510ea.91f22"
            ]
        ]
    },
    {
        "id": "845713fc.bbc2b",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "call modules: initialize ",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nsuccess = su.flow.unsetMsgAll(msg);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "f96041d6.ab02"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "50816677.e479f8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.checkModules",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction showStatus(status) {\n    if(!status) node.status({fill:'yellow', shape: 'dot', text: 'false'});\n    else node.status({fill:'green', shape: 'dot', text: 'true'});     \n    return status;\n}\n\n// main -----------------------------------------------------------------\n\n\nlet modules = {\n    isAboutInitialized: global.get(sau.app.getIsInitializedPath(sau.about.getMetaInfo())) || false,\n    isOrderInitialized: global.get(sau.app.getIsInitializedPath(sau.order.getMetaInfo())) || false,\n    isSAPEventLogInitialized: global.get(sau.app.getIsInitializedPath(sau.sapEventLog.getMetaInfo())) || false,\n    isTestInitialized: global.get(sau.app.getIsInitializedPath(sau.test.getMetaInfo())) || false,\n}\n\nlet isFullyInitialized = true;\n\nfor(var p in modules) {\n    if(modules[p] === false) isFullyInitialized = false;\n}\n\nshowStatus(isFullyInitialized);\n\nmsg.payload = modules;\n\nif(!isFullyInitialized) {\n    return [null, msg];\n} \n\nreturn msg;\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 1050,
        "y": 1460,
        "wires": [
            [
                "25855df.ddca3a2"
            ],
            [
                "24d718e.46061e8"
            ]
        ],
        "outputLabels": [
            "true",
            "false"
        ]
    },
    {
        "id": "e58bfb0.929d608",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 700,
        "wires": [
            [
                "d5f2be92.b4c37"
            ]
        ]
    },
    {
        "id": "d9f82abd.764ae8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "enableTabs",
        "func": "\nmsg.payload = {\n    tab: 'Order',\n    tabs: {\n        enable: [\n            'Order', 'SAP Event Log', 'Tests'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 1640,
        "wires": [
            [
                "952ad74a.443de8"
            ]
        ]
    },
    {
        "id": "952ad74a.443de8",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 1010,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "60f3a96.b5b3158",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "1",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Application started successfully.",
        "name": "done.",
        "x": 1030,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5e92c59c.1030dc",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.payload = \"enjoy.\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 1680,
        "wires": [
            [
                "60f3a96.b5b3158"
            ]
        ]
    },
    {
        "id": "8708783b.8323a8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "utils.log (app) end initialization",
        "func": "\nmsg.payload = {\n    log:    '_END_:_INITIALIZATION_'\n}\n\nnode.log(msg.payload.log);           \n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 770,
        "y": 1600,
        "wires": []
    },
    {
        "id": "f7521c5a.a9712",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app set initialized=true",
        "env": [
            {
                "name": "instance-name",
                "value": "app set initialized=true",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1440,
        "y": 1460,
        "wires": [
            [
                "82c734da.6ecea8"
            ]
        ]
    },
    {
        "id": "25855df.ddca3a2",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.isInitialized',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "f7521c5a.a9712"
            ]
        ]
    },
    {
        "id": "ea43befa.23769",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.set:configfile",
        "env": [
            {
                "name": "instance-name",
                "value": "app.set:configfile",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 900,
        "wires": [
            [
                "4c847b18.4176b4"
            ]
        ]
    },
    {
        "id": "fc6dd38b.c144e",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.configfile',\n        params: {\n            filename: 'solace-asapio-demo-config.json'\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 900,
        "wires": [
            [
                "ea43befa.23769"
            ]
        ]
    },
    {
        "id": "187dc50e.337d6b",
        "type": "file in",
        "z": "7335a6bf.4e03a8",
        "name": "app.read.configfile",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 710,
        "y": 620,
        "wires": [
            [
                "accb2e2b.aeb15"
            ]
        ]
    },
    {
        "id": "accb2e2b.aeb15",
        "type": "json",
        "z": "7335a6bf.4e03a8",
        "name": "app.parse.configFile",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 920,
        "y": 620,
        "wires": [
            [
                "eb11d271.83f0c"
            ]
        ]
    },
    {
        "id": "eb11d271.83f0c",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.setConfigFile",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nif(!su.misc.hasObjectPath(msg.payload, 'config')) {\n    let path = sau.app.getConfigfilePath(_meta) + '.filename';\n    return throwError(msg, \"config file must start with root element 'config'\", {filename: global.get(path)});\n}\n\nlet config = msg.payload.config;\n\nglobal.set(sau.app.getConfigfileConfigPath(_meta), config);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ]
    },
    {
        "id": "288aace.55bda54",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "var _meta = {   packageId: 'utils',   componentId: 'forEach',   version: '0.2.1' }",
        "info": "",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "6596e39f.b8f7ec",
        "type": "status",
        "z": "776ea548.cb42dc",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "afcb3a99.477868",
        "type": "function",
        "z": "776ea548.cb42dc",
        "name": "app.subflow.error-handler",
        "func": "//var solaceUtilsGlobalContext = '_solaceUtils';\n//var solaceAppUtilsGlobalContext = '_solaceAppUtils';\n//var solaceAppComponent = 'app';\n\nvar solaceUtilsGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceUtilsGlobalContext;\nvar solaceAppUtilsGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceAppUtilsGlobalContext;\nvar solaceAppUtilsComponentGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceAppUtilsComponentGlobalContext;\n\ntry {\n    var su = global.get(solaceUtilsGlobalContext) || node.error(solaceUtilsGlobalContext + ' not found in global context', msg);\n    var sau = global.get(solaceAppUtilsGlobalContext) || node.error(solaceAppUtilsGlobalContext + ' not found in global context', msg);\n    var _meta = sau[solaceAppUtilsComponentGlobalContext].getMetaInfo();\n    \n    //var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    //var sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\n    //var _meta = sau.devicesettings.getMetaInfo()\n\n\n        //node.warn(node.name + ': msg = \\n' + JSON.stringify(msg, null, 1));\n    \n    let method = 'unknown-method';\n    if(su.misc.hasObjectPath(msg, 'solaceError')) {\n        if(su.misc.hasObjectPath(msg.solaceError, 'msg')) {\n            let mips = su.flow.getMsgInstanceProperties(msg.solaceError.msg, _meta);\n                //node.warn(node.name + ': mips = \\n' + JSON.stringify(mips, null, 1));\n            method = mips.method;    \n        }\n    } else method = 'js';\n    \n    node.status({fill:\"red\",shape:\"dot\",text:\"error:\" + _meta.shortName + \":\" + method});\n    \n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n    node.status({fill:\"red\",shape:\"dot\",text:\"error:\" + _meta.shortName + \":err-handler\"});\n}\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 450,
        "y": 180,
        "wires": []
    },
    {
        "id": "cacc3e4f.9c57d",
        "type": "status",
        "z": "f315565e.b7a9b8",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3fec6f17.cf63e",
        "type": "subflow:776ea548.cb42dc",
        "z": "f315565e.b7a9b8",
        "name": "",
        "env": [],
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "ab2bbf0.6e03b4",
        "type": "function",
        "z": "f315565e.b7a9b8",
        "name": "input",
        "func": "\nvar solaceAppComponent = env.get('solace-app-component');\nif(solaceAppComponent === 'not-configured') solaceAppComponent = 'app';\n\nmsg._solaceUtilsSubflowErrorHandler = {\n    solaceUtilsGlobalContext: '_solaceUtils',\n    solaceAppUtilsGlobalContext: '_solaceAppUtils',\n    solaceAppUtilsComponentGlobalContext: solaceAppComponent\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "3fec6f17.cf63e"
            ]
        ]
    },
    {
        "id": "c728f80b.a1d258",
        "type": "subflow:f315565e.b7a9b8",
        "z": "7335a6bf.4e03a8",
        "name": "sf err handler (app)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "app",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec2f888a.3917d8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "5f1a5110.7b057",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 680,
        "wires": [
            [
                "ec2f888a.3917d8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "4a61cafd.01b3d4",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "guiMgmt",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 1660,
        "wires": [
            [
                "d9f82abd.764ae8",
                "5e92c59c.1030dc"
            ]
        ]
    },
    {
        "id": "8ce917e4.1a7b88",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "guiMgmt",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "c47a31d.a5a67d",
                "4de7c1a8.404b1"
            ]
        ]
    },
    {
        "id": "2db4be75.9ac632",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1180,
        "y": 380,
        "wires": []
    },
    {
        "id": "e3c5221f.e2984",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "top right",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrNotification",
        "x": 1370,
        "y": 220,
        "wires": []
    },
    {
        "id": "a196c4fe.0f9e18",
        "type": "switch",
        "z": "317873af.a031fc",
        "name": "popupModal?",
        "property": "isPopupModal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 260,
        "wires": [
            [
                "e1291347.14803"
            ]
        ]
    },
    {
        "id": "e1291347.14803",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "prompt",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrModal",
        "x": 1540,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6c18ac59.e29e54",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.prepare4UsrDisplay",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nlet errorHeading = 'Previous Internal Server Exception';\n\nlet userDisplayMsg = {\n    topic: errorHeading\n}\n    \nlet sourceStr = '';\nif((errorObj.getPreviousSourceType()!==null) && (errorObj.getPreviousSourceName()!==null)) {\n    sourceStr += errorObj.getPreviousSourceType() + \":\" + errorObj.getPreviousSourceName();\n} else {\n    sourceStr += errorObj.getSourceType() + \":\" + errorObj.getSourceName();\n}\n    \nuserDisplayMsg.payload = \n    \"component: \" + errorObj.getComponentName() +\n    \", instance: \" + errorObj.getInstanceName() +\n    \", source:\" + sourceStr +\n    \", caughtBy: \" + JSON.stringify(errorObj.getCaughtBy()) +\n    \"<br/>\" + errorObj.getMessage() +\n    \"<br/>details:\" + JSON.stringify(errorObj.getDetails());\n\n// prepare the message for user modal popup\nlet userModalMsg = {};\nif(errorObj.getSeverity() === 'ERROR') {\n    userModalMsg.isPopupModal = true;\n    userModalMsg.topic = errorHeading;\n    userModalMsg.payload = \n        errorObj.getMessage() +\n        \"<br/>\" + \n        \"<br/>-component:\" + errorObj.getComponentName() + \n        \"<br/>-instance:\" + errorObj.getInstanceName() + \n        \"<br/>-source:\" + sourceStr +\n        \"<br/><br/>Check the log for more details.\" + \n        \"<br/>(note: this is only the first error, there may be more in the log)\";\n}\n\nreturn [userDisplayMsg, userModalMsg];\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "e3c5221f.e2984"
            ],
            [
                "a196c4fe.0f9e18"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg",
            "userModalMsg"
        ]
    },
    {
        "id": "59a29827.5ca218",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "todo SolaceErrorHandler",
        "func": "\nnode.warn(node.name + ': implement on browser connect', msg);\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "f9dac897.4c5b98",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.blockExceptFirst",
        "func": "let path = '$parent.appErrHandler.onBrowserConnect.count';\n\nlet count = flow.get(path) || 0;\n\nnode.warn(node.name + ': current count = ' + count);\n\ncount++;\n\nflow.set(path, count);\n\nif(count === 1) return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 160,
        "wires": [
            [
                "59a29827.5ca218"
            ]
        ]
    },
    {
        "id": "a62af3f3.af666",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todos - xxxxxxxxxxxxxxxxxxxx",
        "info": "- can we find out if onBrowserConnect:\n    - sends a different message per browser session?\n    - number of messages depends on number of tabs?\n    - test with upgrading dashboard...\n    - ",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "8a55701b.04eec",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "todos xxxxxxxxxxxxxxxxxxx",
        "info": "SolaceError class:\n\n- sourceStack\n- catchStack\n\nperhaps:\nSolaceError subflow:\n- getOnBrowserConnectError:\n    - keeps counter and returns it only once per browser session\n    - can we actually find out if it is a new brower session?\n    - \ntest:\n- start browser with an existing error\n- multiple sessions\n\n",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "105fb369.9be87d",
        "type": "catch",
        "z": "6be2bb10.2f7fa4",
        "name": "catch-all x errHandler",
        "scope": [
            "55a3de07.952eb",
            "6bfcc2a5.afb3dc",
            "427d007.0f6b2",
            "17bf0d5e.27ce63",
            "c688684.fb4c298",
            "a1f75807.0e8888",
            "12ae2675.8d63aa",
            "c0092c06.69623",
            "20498c7b.18aa04",
            "127025cc.7032aa",
            "46892f4e.45ca1",
            "f8d76597.c978e8"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "8331919f.27a06"
            ]
        ]
    },
    {
        "id": "55a3de07.952eb",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.debug",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "6bfcc2a5.afb3dc",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "427d007.0f6b2",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "var _meta = {   packageId: 'app',   componentId: 'mqttConnectionMonitor',   version: '0.1.1',   shortName: 'mqttCm' }",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "17bf0d5e.27ce63",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'property \"instance-name\" not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "a1f75807.0e8888"
            ]
        ]
    },
    {
        "id": "c688684.fb4c298",
        "type": "status",
        "z": "6be2bb10.2f7fa4",
        "name": "",
        "scope": null,
        "x": 1180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a1f75807.0e8888",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return msg;\n    case 'get-status':\n        return[null, msg];\n    case 'set-status': \n        return [null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 3,
        "noerr": 0,
        "x": 360,
        "y": 300,
        "wires": [
            [
                "127025cc.7032aa"
            ],
            [
                "12ae2675.8d63aa"
            ],
            [
                "20498c7b.18aa04"
            ]
        ],
        "outputLabels": [
            "init",
            "get-status",
            "set-status"
        ]
    },
    {
        "id": "12ae2675.8d63aa",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.get-status",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flow.getPropertiesPath(_meta);\nlet properties = global.get(path);\nif(su.misc.isObjectEmpty(properties)) return throwError(msg, 'cannot get status: not initialized yet');\n\nmsg.payload = {\n    status: properties.currentStatus,\n    previousStatus: properties.previousStatus\n}\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "c0092c06.69623",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "20498c7b.18aa04",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.set-status",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\n// 'node-red:common.status.connected'\n// 'node-red:common.status.disconnected'\n// 'node-red:common.status.connecting' (lots of them)\n\nlet elements = msg.status.text.split('.');\nif(elements.length < 2) return throwError('cannot parse msg.status.text', {status: msg.status});\n\nlet status = elements[elements.length - 1];\n\n//node.warn(node.name + ': status.text = ' + msg.status.text + ', extracted status = ' + status);\n\nlet path = su.flow.getPropertiesPath(_meta);\n\nlet properties = global.get(path) || sau.mqttConnectionMonitor.getDefaultPropertiesObject();\n\nproperties.previousStatus = JSON.parse(JSON.stringify(properties.currentStatus));\n\nproperties.currentStatus = {\n    status: status,\n    details: msg.status\n}\nglobal.set(path, properties);\nreturn msg;        \n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 340,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "e33ef79f.130298",
        "type": "comment",
        "z": "46127397.12a33c",
        "name": "main mqtt Connection Monitor (mqttCm)  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "79028a44.bdb534",
        "type": "catch",
        "z": "46127397.12a33c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "a56fe5a2.c709a8"
            ]
        ]
    },
    {
        "id": "d5b6908.c2c6c7",
        "type": "subflow:317873af.a031fc",
        "z": "46127397.12a33c",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "a56fe5a2.c709a8",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "46127397.12a33c",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "d5b6908.c2c6c7"
            ]
        ]
    },
    {
        "id": "a89db6ab.2a7988",
        "type": "inject",
        "z": "46127397.12a33c",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "70af4bf0.c0cbc4"
            ]
        ]
    },
    {
        "id": "70af4bf0.c0cbc4",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "46127397.12a33c",
        "name": "flowProperties.set(main.mqttCm)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties.set(main.mqttCm)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "mqttCm",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "5f0f137e.bd4e5c"
            ]
        ]
    },
    {
        "id": "5f0f137e.bd4e5c",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.init",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "127025cc.7032aa",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flow.getPropertiesPath(_meta);\nlet properties = sau.mqttConnectionMonitor.getDefaultPropertiesObject();\nglobal.set(path, properties);\n\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 260,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "5da577dc.2ecb78",
        "type": "status",
        "z": "46127397.12a33c",
        "name": "on_mqttConnectionStatus",
        "scope": [
            "f3d40a1d.3a7608"
        ],
        "x": 150,
        "y": 480,
        "wires": [
            [
                "4e4e4b3f.1ebbf4"
            ]
        ]
    },
    {
        "id": "27f57376.8189ac",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.set-status",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.set-status",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set-status",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 480,
        "wires": [
            [
                "99ae49d3.7bde88"
            ]
        ]
    },
    {
        "id": "34155ee.83dbba2",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.get-status",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.get-status",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get-status",
                "type": "str"
            }
        ],
        "x": 790,
        "y": 480,
        "wires": [
            [
                "a222dac8.18b248"
            ]
        ]
    },
    {
        "id": "a222dac8.18b248",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "status",
        "property": "payload.status.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "disconnected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 480,
        "wires": [
            [
                "989d169e.098488",
                "643ac5be.eec56c"
            ],
            [
                "232875d9.abeb3a",
                "c804ae39.28795"
            ],
            [
                "232875d9.abeb3a",
                "42876d45.4ece84"
            ],
            [
                "c1f208bb.c169d8"
            ]
        ]
    },
    {
        "id": "ade44798.930b88",
        "type": "delay",
        "z": "46127397.12a33c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 640,
        "wires": [
            [
                "99ae49d3.7bde88"
            ]
        ]
    },
    {
        "id": "7ba82ae9.61b8c4",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app:set:isConnected=true",
        "env": [
            {
                "name": "instance-name",
                "value": "app:set:isConnected=true",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1310,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "989d169e.098488",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "\n//todo = finish_on_isConnectedChange(on_off);\n\n/*\n    probably send the on/off payload, then treat differently\n*/\n\nmsg.payload = {\n    set: {\n        state: 'broker.isConnected',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "7ba82ae9.61b8c4"
            ]
        ]
    },
    {
        "id": "4aefdd0.32b1024",
        "type": "debug",
        "z": "46127397.12a33c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 310,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1f208bb.c169d8",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "mqttCm.throwError(unknown-status)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nreturn throwError(\"unknown mqtt connection status\", {status: msg.payload.status});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1230,
        "y": 620,
        "wires": []
    },
    {
        "id": "99ae49d3.7bde88",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isStartupComplete'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "c83a791.0e36888"
            ]
        ]
    },
    {
        "id": "c83a791.0e36888",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app get isStartupComplete",
        "env": [
            {
                "name": "instance-name",
                "value": "app get isStartupComplete",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 580,
        "wires": [
            [
                "e0283eea.2b0c3"
            ]
        ]
    },
    {
        "id": "e0283eea.2b0c3",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "isStartupComplete?",
        "property": "payload.app.isStartupComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "34155ee.83dbba2"
            ],
            [
                "ade44798.930b88"
            ]
        ]
    },
    {
        "id": "643ac5be.eec56c",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "previousStatus",
        "property": "payload.previousStatus.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "unknown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 340,
        "wires": [
            [
                "5cfb0626.441d58"
            ]
        ]
    },
    {
        "id": "5cfb0626.441d58",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(connected)",
        "func": "\nmsg.topic   = 'Connection to broker successful.';\nmsg.payload = \"don't let it happen again\";\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 340,
        "wires": [
            [
                "2944b984.978436"
            ]
        ]
    },
    {
        "id": "2944b984.978436",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1520,
        "y": 340,
        "wires": []
    },
    {
        "id": "6b9b3f4b.63217",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(isConnected)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(isConnected)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 520,
        "y": 620,
        "wires": [
            [
                "303aa3a5.a3ccac"
            ]
        ]
    },
    {
        "id": "b952b68d.087178",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'broker.isConnected'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "6b9b3f4b.63217"
            ]
        ]
    },
    {
        "id": "303aa3a5.a3ccac",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "isConnected?",
        "property": "payload.broker.isConnected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 620,
        "wires": [
            [
                "ea57e263.ad971"
            ],
            [
                "54284a4a.389154",
                "517324eb.3c653c"
            ]
        ]
    },
    {
        "id": "fb957896.c755c8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.throwError(not connected)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nreturn throwError(\"no mqtt connection - check connection parameters?\");\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1050,
        "y": 660,
        "wires": []
    },
    {
        "id": "4e4e4b3f.1ebbf4",
        "type": "delay",
        "z": "46127397.12a33c",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 480,
        "wires": [
            [
                "27f57376.8189ac"
            ]
        ]
    },
    {
        "id": "f7548ed1.a51a9",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app:set:isConnected=false",
        "env": [
            {
                "name": "instance-name",
                "value": "app:set:isConnected=false",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1320,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "232875d9.abeb3a",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "\n//todo = finish_on_isConnectedChange(on_off);\n\n/*\n    probably send the on/off payload, then treat differently\n*/\n\nmsg.payload = {\n    set: {\n        state: 'broker.isConnected',\n        params: {\n            value: false \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "f7548ed1.a51a9"
            ]
        ]
    },
    {
        "id": "c804ae39.28795",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "previousStatus",
        "property": "payload.previousStatus.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "cbf3dc41.f2f02"
            ]
        ]
    },
    {
        "id": "cbf3dc41.f2f02",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(disconnected)",
        "func": "\nmsg.topic   = 'Connection to broker lost.';\nmsg.payload = 'trying to re-connect ...';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 460,
        "wires": [
            [
                "9fe4e938.875028"
            ]
        ]
    },
    {
        "id": "9fe4e938.875028",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1540,
        "y": 460,
        "wires": []
    },
    {
        "id": "42876d45.4ece84",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(connecting)",
        "func": "\nmsg.topic = 'Trying to connect to broker ...';\nmsg.payload = 'perhaps check the connection credentials';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "2bcbf7ad.267a18",
                "c85446ab.88cc88"
            ]
        ]
    },
    {
        "id": "2bcbf7ad.267a18",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1540,
        "y": 540,
        "wires": []
    },
    {
        "id": "54284a4a.389154",
        "type": "delay",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 540,
        "y": 680,
        "wires": [
            [
                "b952b68d.087178"
            ]
        ]
    },
    {
        "id": "6c6d8d1.38dc974",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "todo: hint:  check your connection parameters: display them here?",
        "info": "",
        "x": 1160,
        "y": 580,
        "wires": []
    },
    {
        "id": "517324eb.3c653c",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'config.broker'\n    }\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 620,
        "wires": [
            [
                "300006aa.e29c0a"
            ]
        ]
    },
    {
        "id": "300006aa.e29c0a",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(config.broker)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(config.broker)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "140374f6.8e392b"
            ]
        ]
    },
    {
        "id": "140374f6.8e392b",
        "type": "debug",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1360,
        "y": 620,
        "wires": []
    },
    {
        "id": "f3d40a1d.3a7608",
        "type": "mqtt in",
        "z": "46127397.12a33c",
        "name": "iot-mgmt/connection/+",
        "topic": "iot-mgmt/connection/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "62bac859.25e008",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "4aefdd0.32b1024"
            ]
        ]
    },
    {
        "id": "46892f4e.45ca1",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 80,
        "wires": []
    },
    {
        "id": "f8d76597.c978e8",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "todos",
        "info": " * re-package as part of solace.utils",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "8331919f.27a06",
        "type": "subflow:f315565e.b7a9b8",
        "z": "6be2bb10.2f7fa4",
        "name": "sf err handler (mqttCm)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "mqttConnectionMonitor",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "7fd75171.ba907",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "connect event only",
        "events": "connect",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "d093dddd.a1771"
            ]
        ]
    },
    {
        "id": "64ed80ba.c077b",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "enableTabs",
        "func": "\nmsg.payload = {\n    tab: 'Order',\n    tabs: {\n        enable: [\n            'Order', 'SAP Event Log'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 440,
        "wires": [
            [
                "61e753d6.19effc"
            ]
        ]
    },
    {
        "id": "61e753d6.19effc",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 970,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "79d86d11.3e20d4",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(isInitialized)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(isInitialized)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "6b1648d4.5a4af8"
            ]
        ]
    },
    {
        "id": "d093dddd.a1771",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isInitialized'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "79d86d11.3e20d4"
            ]
        ]
    },
    {
        "id": "6b1648d4.5a4af8",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "isInitialized?",
        "property": "payload.app.isInitialized",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "64ed80ba.c077b"
            ]
        ]
    },
    {
        "id": "ed1064cf.934c58",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "var _meta = {   packageId: 'app',   componentId: 'controller',   version: '0.1.1',   shortName: 'app',   id: 'solace-asapio-demo' }",
        "info": "",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "3e6162b4.7ea1ae",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "todos",
        "info": "",
        "x": 1470,
        "y": 120,
        "wires": []
    },
    {
        "id": "b4390b89.651248",
        "type": "comment",
        "z": "ba93632a.b212b",
        "name": "solace.utils.log ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "b9d72bab.020668",
        "type": "comment",
        "z": "ba93632a.b212b",
        "name": "var _meta = {   packageId: 'utils',   componentId: 'log',   version: '0.1.1',   shortName: 'log' }",
        "info": "",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "21fe3658.fe230a",
        "type": "catch",
        "z": "ba93632a.b212b",
        "name": "catch-all x (err handler)",
        "scope": [
            "b4390b89.651248",
            "b9d72bab.020668",
            "39be31cf.42580e",
            "c42f3895.218738",
            "5a98fb26.cd60f4",
            "e27a3447.462c88",
            "a0cd2ca8.265ee",
            "f61912dc.6a6d5",
            "ecb4a8b9.201e78",
            "656673fc.88ae2c",
            "e44de43e.0a56f8",
            "3f3a80bc.0462f",
            "14aae177.af539f",
            "d2132262.0ac85",
            "21cf0c91.df8e14",
            "5553d81c.2364f8",
            "bc80b362.aa9da",
            "ce4079c6.3a62a8"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "79715e40.41d8f"
            ]
        ]
    },
    {
        "id": "f61912dc.6a6d5",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "ce4079c6.3a62a8",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.debug(utils.log)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1140,
        "y": 140,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "65f0e574.7b208c",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n\n    let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n    let ips = {\n        logName: env.get('log-name'),\n        method: env.get('method'),\n        maxEntriesStr: env.get('max-entries'),\n        isAddTimestamp: env.get('add-timestamp')\n    };\n\n    if(su.misc.isStringEmpty(ips.logName)) return throwError(msg, 'log-name not found', {ips: ips});\n    // get the parent flowProperties\n    let properties = flow.get(su.flowProperties.getParentFlowPath());\n    if(su.misc.isObjectEmpty(properties)) \n        return throwError(msg, 'cannot find parent flow properties', {path: su.flowProperties.getParentFlowPath()});\n    \n    let fullLogName = properties.packageId + '.' + properties.componentId + '.' + ips.logName;\n    ips.logName = fullLogName;\n\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found', {ips: ips});\n\n    if(su.misc.isStringEmpty(ips.maxEntriesStr)) return throwError(msg, 'maxEntries not found', {ips: ips});\n\n    let maxEntries = su.misc.toNumber(ips.maxEntriesStr);\n    if(!su.misc.isNumber(maxEntries)) return throwError(msg, 'maxEntries is not a number string', {ips: ips});\n    ips.maxEntries = maxEntries;\n    ips.maxEntriesStr = undefined;\n    if(ips.maxEntries < 0 || ips.maxEntries > 100) return throwError(msg, 'maxEntries must be in range: 0 < maxEntries <= 100', {ips: ips});\n\n    if(!su.misc.isBoolean(ips.isAddTimestamp)) return throwError(msg, 'isAddTimestamp not found / not a boolean', {ips: ips});\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 400,
        "wires": [
            [
                "1995fadd.3126c5"
            ]
        ]
    },
    {
        "id": "1995fadd.3126c5",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet elems = mips.method.split('.');\nlet methodStartsWith = elems[0];\n\nswitch(methodStartsWith) {\n    case 'init':\n        return msg;\n    case 'log':\n        if(elems.length < 2) return throwError(msg, 'invalid log method, must have at least 2 elements', {method: mips.method});\n        elems.shift();\n        mips.logMethod = elems.join('.');\n        su.flow.updateMsgInstanceProperties(msg, _meta, mips);\n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: mips.method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 340,
        "y": 400,
        "wires": [
            [
                "18282ec9.81f671"
            ],
            [
                "9d8e0631.826108"
            ]
        ],
        "outputLabels": [
            "init",
            "log.x"
        ]
    },
    {
        "id": "18282ec9.81f671",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\n//if(!isValidMsgPayload(msg)) return;\n\n// set the state\nlet state = su.log.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(su.flow.getBasePath(_meta), state);\n\n// create the log\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet logProperties = su.log.createLogProperties(mips);\n\nflow.set(su.log.getLogBasePath(mips.logName), logProperties);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "76caf497.7891ac"
            ]
        ]
    },
    {
        "id": "94c8332b.57079",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d2b698bc.dacf78",
        "type": "status",
        "z": "ba93632a.b212b",
        "name": "",
        "scope": null,
        "x": 1380,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "76caf497.7891ac",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.isInitialized=true",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nglobal.set(su.flow.getIsInitializedPath(_meta), true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "94c8332b.57079"
            ]
        ]
    },
    {
        "id": "9d8e0631.826108",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method.log",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        logEntryPath: env.get('log.entry')\n    };\n    \n    if(su.misc.isStringEmpty(ips.logEntryPath)) return throwError(msg, 'log.entry not found');\n    // must have at least two levels\n    let elems = ips.logEntryPath.split('.');\n    if(elems.length < 2) return throwError(msg, \"log.entry must have the format 'msg.{path}'\");\n    let start = elems.shift();\n    if(start !== 'msg') return throwError(msg, \"log.entry must have the format 'msg.{path}'\");\n    ips.logEntryMsgPath = elems.join('.');\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nswitch(mips.logMethod) {\n    case 'clear': {\n        let log = [];\n        flow.set(su.log.getLogPath(mips.logName), log);\n        return msg;\n    }\n    case 'get': {\n        msg.payload = flow.get(su.log.getLogPath(mips.logName)) || [];\n        su.misc.setObjectPath(msg, su.flow.getMsgOutputBasePath(_meta), {logName:mips.logName});\n        return msg;\n    }\n}\n\nif(!isValidInstanceProperties(msg)) return;\n\n    //node.warn(node.name + ': logEntryMsgPath = ' + JSON.stringify(mips.logEntryMsgPath, null, 1));\n\nlet logEntry = su.misc.getObjectPath(msg, mips.logEntryMsgPath);\nif(su.misc.isEmpty(logEntry)) return throwError(msg, 'cannot find log entry in msg', {path: 'msg.' + mips.logEntryMsgPath });\n    \n    //node.warn(node.name + ': logEntry = \\n' + JSON.stringify(logEntry));\n\nswitch(mips.logMethod) {\n    case 'init': {\n        let logProperties = flow.get(su.log.getLogBasePath(mips.logName));\n        logEntry = su.log.createLogEntry(logProperties, logEntry);\n        let log = [];\n        log.push(logEntry);\n        flow.set(su.log.getLogPath(mips.logName), log);\n        mips.logEntry = logEntry;\n        msg = su.flow.updateMsgInstanceProperties(msg, _meta, {logEntry: logEntry});\n        return msg;\n    }\n    case 'append': {\n        let logProperties = flow.get(su.log.getLogBasePath(mips.logName));\n        logEntry = su.log.createLogEntry(logProperties, logEntry);\n        let log = flow.get(su.log.getLogPath(mips.logName)) || [];\n        if(log.length+1 > logProperties.maxEntries) {\n            log.shift();\n        }\n        log.push(logEntry);\n        flow.set(su.log.getLogPath(mips.logName), log);\n        mips.logEntry = logEntry;\n        msg = su.flow.updateMsgInstanceProperties(msg, _meta, {logEntry: logEntry});\n        return msg;\n    }\n    case 'append.httpResponse': {\n        return [null, msg];\n    }\n    break;\n    default: {\n        return throwError(msg, 'unknown log method', {method: mips.logMethod});\n    }\n}\n\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "94c8332b.57079"
            ],
            [
                "838df9d2.cdfd78"
            ]
        ],
        "outputLabels": [
            "done",
            "append.httpResponse"
        ]
    },
    {
        "id": "838df9d2.cdfd78",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.append.httpResponse",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet error;\nlet responseCode;\nlet request;\nlet headers;\nlet data;\n\n//if(msg.statusCode === 'ENOTFOUND') {\nif(msg.statusCode !== 200) {\n    error = msg.payload;\n    responseCode = msg.statusCode;\n} else {\n    error = msg.payload.meta.error;\n    request = msg.payload.meta.request;\n    responseCode = msg.payload.meta.responseCode;\n}\n\n//if(msg.properties.isLogEntireResponse) {\n    headers = msg.headers;\n    data = msg.payload.data;\n//}\n\nlet entry = {\n    responseCode: responseCode,\n    error: error,\n    request: request,\n    responseHeaders: headers,\n    responseData: data\n}\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet log = flow.get(su.log.getLogPath(mips.logName)) || [];\nlog.push(entry);\nflow.set(su.log.getLogPath(mips.logName), log);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 460,
        "wires": [
            [
                "94c8332b.57079"
            ]
        ]
    },
    {
        "id": "79715e40.41d8f",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.subflowErrorHandler(utils.log)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.log.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "37f2340a.15817c",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "var _meta = {   packageId: 'sempv2',   componentId: 'about',   version: '0.2.1',   shortName: 'about' }",
        "info": "",
        "x": 350,
        "y": 60,
        "wires": []
    },
    {
        "id": "c75372a4.e92b5",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isInitialized',\n        params: {}\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 1460,
        "wires": [
            [
                "f8e5df1f.800bd"
            ]
        ]
    },
    {
        "id": "f8e5df1f.800bd",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get.isInitialized",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get.isInitialized",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 1460,
        "wires": [
            [
                "44cb3f1.d0613c"
            ]
        ]
    },
    {
        "id": "44cb3f1.d0613c",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "! isInitialized",
        "property": "payload.app.isInitialized",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1460,
        "wires": [
            [
                "50816677.e479f8"
            ],
            [
                "24d718e.46061e8"
            ]
        ]
    },
    {
        "id": "19465cb4.994783",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.broker.sempv2",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet envVars = [\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_BASE_PATH','basePath'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_VPN', 'vpn'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_VIRTUAL_ROUTER', 'virtualRouter'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_USER', 'user' ],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_PASSWORD', 'pwd']\n    ];\n\nlet config = {};\nfor(i=0; i < envVars.length; i++) {\n    let v = env.get(envVars[i][0]);\n    if(su.misc.isStringEmpty(v)) return throwErrorEnvVar(msg, \"environment variable not found\", {envVar: envVars[i][0]});\n    su.misc.setObjectPath(config, envVars[i][1], v);\n}\n\nlet isSolaceCloudEnvVar = 'SOLACE_SAP_DEMO_BROKER_SEMPV2_IS_SOLACE_CLOUD';\nlet isSolaceCloudStr = env.get(isSolaceCloudEnvVar);\nif(su.misc.isStringEmpty(isSolaceCloudStr)) return throwError(msg, \"environment variable not found\", {envVar: isSolaceCloudEnvVar});\n\nlet isSolaceCloud = false;\ntry {\n    isSolaceCloud = JSON.parse(isSolaceCloudStr.toLowerCase());\n} catch(err) {\n    let message = 'Invalid boolean value of environment variable';\n    let details = {\n        envVar: isSolaceCloudEnvVar,\n        value: isSolaceCloudStr\n    }\n    return throwError(msg, message, details);\n}\nconfig.isSolaceCloud = isSolaceCloud;\n\n//node.warn(node.name + ':config = \\n' + JSON.stringify(config, null, 1));\n\nglobal.set(sau.app.getConfigPath(_meta) + '.broker.sempv2', config);\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 420,
        "wires": [
            [
                "781428bf.b860f8"
            ]
        ]
    },
    {
        "id": "9038781a.7c79d8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "2acc1d33.eaf0d2",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "main.order -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "ce702a10.2a3848",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "70c66c40.bd0074",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "fa4aef7.df3561",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4d60d452.18914c",
        "name": "flowProperties:set(main.order)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set(main.order)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "order",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "141896d.489c069"
            ]
        ]
    },
    {
        "id": "d402bbbf.9307c8",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "fa4aef7.df3561"
            ]
        ]
    },
    {
        "id": "7228d7e4.7201d8",
        "type": "link in",
        "z": "4d60d452.18914c",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "aa6c2d1.14194d"
            ]
        ],
        "l": true
    },
    {
        "id": "a6890ed.17d7ff",
        "type": "link out",
        "z": "4d60d452.18914c",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 890,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "d67b54aa.7eb338",
        "type": "catch",
        "z": "4d60d452.18914c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "51d5e181.33ec1"
            ]
        ]
    },
    {
        "id": "47ec1d0f.cf6b94",
        "type": "subflow:317873af.a031fc",
        "z": "4d60d452.18914c",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "51d5e181.33ec1",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4d60d452.18914c",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "47ec1d0f.cf6b94"
            ]
        ]
    },
    {
        "id": "f5a2c1a4.ff74b",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "var _meta = {   packageId: 'app',   componentId: 'order',   version: '0.1.0' }",
        "info": "",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "aa6c2d1.14194d",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "cee61bd8.0cb048",
                "37a23f.96f33dc2"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "cee61bd8.0cb048",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 540,
        "wires": [
            [
                "a6890ed.17d7ff"
            ]
        ]
    },
    {
        "id": "58202c41.46c074",
        "type": "status",
        "z": "d4ac8a00.7ba108",
        "name": "",
        "scope": null,
        "x": 1440,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "8bc06f73.0cf38",
        "type": "comment",
        "z": "d4ac8a00.7ba108",
        "name": "app product catalog (prodCat) ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "ecbd6d88.6206",
        "type": "comment",
        "z": "d4ac8a00.7ba108",
        "name": "var _meta = {   packageId: 'app',   componentId: 'productCatalog',   version: '0.1.0',   shortName: 'prodCat' }",
        "info": "",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "5824b5b7.2c73fc",
        "type": "catch",
        "z": "d4ac8a00.7ba108",
        "name": "catch-all x (err handler)",
        "scope": [
            "58202c41.46c074",
            "8bc06f73.0cf38",
            "ecbd6d88.6206",
            "3e2146.890fbeba",
            "f11dada0.e0e4f",
            "12aea1c9.e59e7e",
            "6e3c52a2.56d49c",
            "30227213.ebe22e",
            "30f7c7ae.b1f508",
            "bba22b64.48e368"
        ],
        "uncaught": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "ecf241b5.ed231"
            ]
        ]
    },
    {
        "id": "ecf241b5.ed231",
        "type": "subflow:f315565e.b7a9b8",
        "z": "d4ac8a00.7ba108",
        "name": "sf err handler (prodCat)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "productCatalog",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "3e2146.890fbeba",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "f11dada0.e0e4f"
            ]
        ]
    },
    {
        "id": "f11dada0.e0e4f",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return [msg];\n    case 'get':\n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "6e3c52a2.56d49c"
            ],
            [
                "30227213.ebe22e"
            ]
        ],
        "outputLabels": [
            "init",
            "get"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "12aea1c9.e59e7e",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "utils.debug(prodCat)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1500,
        "y": 140,
        "wires": []
    },
    {
        "id": "4c847b18.4176b4",
        "type": "subflow:d4ac8a00.7ba108",
        "z": "3eb672f6.dc73fe",
        "name": "prodCat.init@main.app",
        "env": [
            {
                "name": "instance-name",
                "value": "prodCat.init@main.app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 900,
        "wires": [
            [
                "845713fc.bbc2b"
            ],
            []
        ]
    },
    {
        "id": "6e3c52a2.56d49c",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\n// check if it exists and has the right schema\nlet path = sau.app.getProductCatalogConfigPath();\nlet prodCat = global.get(path) || {};\nif(su.misc.isObjectEmpty(prodCat)) return throwError(msg, \"cannot find product catalog in global context\", {path: path});\n\n// todo: check against the schema\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 320,
        "wires": [
            [
                "30f7c7ae.b1f508"
            ]
        ]
    },
    {
        "id": "30227213.ebe22e",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return; \n\nlet path = sau.app.getProductCatalogConfigPath();\nlet prodCat = global.get(path) || {};\nif(su.misc.isObjectEmpty(prodCat)) return throwError(msg, \"cannot find product catalog in global context\", {path: path});\n\nmsg.payload = {\n    productCatalog: prodCat\n}\n\nreturn msg;\n\n/*\nswitch(msg.payload.get.state) {\n    case 'ds.topics': {\n        msg.payload = {\n            topics: global.get(sau.devicesettings.getTopicsPath(_meta))\n        }\n        return msg;\n    }\n    case 'ds.entries': {\n        msg.payload = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.deviceId': {\n        msg.payload = {deviceId: global.get(sau.devicesettings.getDeviceIdPath(_meta), 'persistent')};\n        return msg;\n    }\n    /*\n    case 'ds.entries.region': {\n        msg.payload = global.get(sau.devicesettings.getRegionPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.site': {\n        msg.payload = global.get(sau.devicesettings.getSitePath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.subSitexxxxx': {\n        msg.payload = global.get(sau.devicesettings.getSubSitePath(_meta), 'persistent');\n        return msg;\n    }\n    \n    default: {\n        let supportedList = [   sau.devicesettings.getMethodGetTopicsInputReference(), \n                                sau.devicesettings.getMethodGetEntriesInputReference(),     \n                            ];\n        return throwError(msg, 'unknown msg.payload.get.state', {received:{msg:{payload: msg.payload}}, supported: supportedList});\n    }\n}\n*/\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 360,
        "wires": [
            [
                "30f7c7ae.b1f508"
            ]
        ]
    },
    {
        "id": "30f7c7ae.b1f508",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "bba22b64.48e368",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.endError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1450,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "37a23f.96f33dc2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 720,
        "y": 460,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "1e8e059.d4ee9fa",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_init_form",
        "scope": [
            "37a23f.96f33dc2",
            "9cf00085.0de8f",
            "9578252b.0883b8"
        ],
        "uncaught": false,
        "x": 110,
        "y": 660,
        "wires": [
            [
                "8f5549d2.0ed078",
                "ee2ec27a.9f713"
            ]
        ]
    },
    {
        "id": "8f5549d2.0ed078",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 350,
        "y": 600,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "1917bc4e.4f7644",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.enable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = true;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1120,
        "wires": [
            [
                "bea92709.2fe7d8",
                "5e3a3ac6.efd494"
            ]
        ]
    },
    {
        "id": "bd247377.be26b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.disable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = false;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1180,
        "wires": [
            [
                "bea92709.2fe7d8",
                "5e3a3ac6.efd494"
            ]
        ]
    },
    {
        "id": "ce7032d4.b8ef8",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_enable_buttons",
        "scope": [
            "59d7ce49.43d73"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "1917bc4e.4f7644"
            ]
        ]
    },
    {
        "id": "2f147ab9.50f086",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_disable_buttons",
        "scope": [
            "8f5549d2.0ed078",
            "a1f17392.1791a"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "bd247377.be26b"
            ]
        ]
    },
    {
        "id": "bea92709.2fe7d8",
        "type": "ui_button",
        "z": "4d60d452.18914c",
        "name": "placeOrder",
        "group": "a0d570c.092769",
        "order": 9,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "place order",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "place-order",
        "payloadType": "str",
        "topic": "",
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "7b3e0702.201668"
            ]
        ]
    },
    {
        "id": "5e3a3ac6.efd494",
        "type": "ui_button",
        "z": "4d60d452.18914c",
        "name": "discard",
        "group": "a0d570c.092769",
        "order": 7,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "discard changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DISCARD",
        "payloadType": "str",
        "topic": "",
        "x": 560,
        "y": 1180,
        "wires": [
            [
                "9cf00085.0de8f"
            ]
        ]
    },
    {
        "id": "ee2ec27a.9f713",
        "type": "subflow:d4ac8a00.7ba108",
        "z": "4d60d452.18914c",
        "name": "prodCat.get",
        "env": [
            {
                "name": "instance-name",
                "value": "prodCat.get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "e895572.1db39a8"
            ],
            []
        ]
    },
    {
        "id": "24d94982.ff9bb6",
        "type": "ui_dropdown",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Product:",
        "tooltip": "",
        "place": "select product ...",
        "group": "a0d570c.092769",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 700,
        "y": 740,
        "wires": [
            [
                "7bca2b2f.252354"
            ]
        ]
    },
    {
        "id": "d1137e38.4cb59",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.products",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet products = msg.payload.productCatalog.products;\n\nlet options = [\n        {\n        \"select product ...\": \"\"\n        }\n    ];\n\nfor(var i=0; i < products.length; i++) {\n    \n    let option = su.misc.setObjectPath({}, products[i].title, products[i].sku);\n    \n    options.push(option);\n\n}\n\nmsg.options = options;\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.sku;\n\n} else msg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 720,
        "wires": [
            [
                "24d94982.ff9bb6",
                "f3a5d309.055a6"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "57ba93eb.f7c22c",
        "type": "ui_numeric",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Quantity:",
        "tooltip": "",
        "group": "a0d570c.092769",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "1",
        "max": "5",
        "step": 1,
        "x": 700,
        "y": 820,
        "wires": [
            [
                "31b49bfc.2c3af4"
            ]
        ]
    },
    {
        "id": "757ced6.ef37614",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.quantity",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.quantity;\n\n} else msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 800,
        "wires": [
            [
                "57ba93eb.f7c22c",
                "38bd3ec5.1f4132"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "829cf24.191d51",
        "type": "ui_dropdown",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Ship to:",
        "tooltip": "",
        "place": "",
        "group": "a0d570c.092769",
        "order": 3,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 700,
        "y": 900,
        "wires": [
            [
                "6af735d9.2d967c"
            ]
        ]
    },
    {
        "id": "15db755d.019e9b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.shipTo",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet partners = msg.payload.partners;\n\nlet options = [\n        {\n        \"select address ...\": \"\"\n        }\n    ];\n\nfor(var i=0; i < partners.length; i++) {\n    \n    let option = su.misc.setObjectPath({}, partners[i].displayName, partners[i].shipToId);\n    \n    options.push(option);\n\n}\n\nmsg.options = options;\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.shipTo;\n\n} else msg.payload = '';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 880,
        "wires": [
            [
                "829cf24.191d51",
                "ff1f5698.116cd8"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "8f2beeb3.7f3ec",
        "type": "ui_template",
        "z": "4d60d452.18914c",
        "group": "fe63781d.693448",
        "name": "displayOrderUpdates",
        "order": 5,
        "width": "14",
        "height": "7",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        {{x.timestamp}}\n        <div>\n            <pre>{{x | json}}</pre>\n        </div>\n    </li>\n    <hr/>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 580,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "c53c4d80.64d18",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_updateDisplay",
        "scope": [
            "19824587.ecd0ba",
            "d8272e7b.79ec2",
            "141896d.489c069",
            "676a534.75ce5ac"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "af3625fc.67c038"
            ]
        ]
    },
    {
        "id": "b302ffb5.3538b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_sendOrder",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 970,
        "y": 1140,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "f122bd3c.6fd9e",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_sendOrder",
        "scope": [
            "b302ffb5.3538b"
        ],
        "uncaught": false,
        "x": 90,
        "y": 1460,
        "wires": [
            [
                "1fc51bab.9869d4"
            ]
        ]
    },
    {
        "id": "253c15c2.42a12a",
        "type": "mqtt in",
        "z": "4d60d452.18914c",
        "name": "SAPEvent.SalesOrderCreated",
        "topic": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/ERD100/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "f1b10946.39ef68"
            ]
        ]
    },
    {
        "id": "f1b10946.39ef68",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "filter",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\n\n// order not generated by this instance\nif(su.misc.isStringEmpty(orderReference)) return;\n\n// update for this order\nif(msg.topic.includes(orderReference)) return msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1680,
        "wires": [
            [
                "8de1f889.868108"
            ]
        ],
        "outputLabels": [
            "update"
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "c22d7fc5.dddd5",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 720,
        "wires": [
            [
                "757ced6.ef37614",
                "d1137e38.4cb59",
                "15db755d.019e9b",
                "d7d3a5ed.618ca8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "f3a5d309.055a6",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.sku",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "7bca2b2f.252354",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.sku');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 740,
        "wires": [
            [
                "f3a5d309.055a6"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "ea48b11a.9c8c7",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "any changes?",
        "func": "if(msg.isChanged) return msg;    \n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 840,
        "wires": [
            [
                "dd128cf3.5358f"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "59d7ce49.43d73",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_enable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1650,
        "y": 840,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "708b44ac.d7412c",
        "type": "mqtt out",
        "z": "4d60d452.18914c",
        "name": "SAPEvent.CreateSalesOrder",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 920,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7b3e0702.201668",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "setOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = JSON.parse(JSON.stringify(flow.get('app.order.entries')));\n\nglobal.set(sau.order.getOrderEntriesPath(), entries);\n\nmsg.payload = {\n    orderEntries: entries\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "a1f17392.1791a",
                "b302ffb5.3538b"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "4c6d751b.c83c0c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.composeEvent(createSalesOrder)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = msg.payload.order;\nif(su.misc.isObjectEmpty(order)) return throwError(msg, \"cannot find order in msg.payload\", {payload: msg.payload});\n\n// get all eventSchemas\nlet eventSchemasPath = sau.app.getEventSchemasConfigPath();\nlet eventSchemas = global.get(eventSchemasPath) || {};\nif(su.misc.isObjectEmpty(eventSchemas)) return throwError(msg, \"cannot find eventSchemas in global context\", {path: eventSchemasPath});\n\nlet channelPath = sau.app.getAppChannelConfigPath();\nlet channel = global.get(channelPath);\nif(su.misc.isObjectEmpty(channel)) return throwError(msg, \"cannot find channel in global context\", {path: channelPath});\n\nlet sapEventMeta = {\n    eventName: 'createSalesOrder',\n    properties: { \n        qos: 1\n    },\n    schemas: eventSchemas,\n    channel: channel,\n    entries: order.orderEntries,\n    timestamp: order.orderCreatedTimestamp,\n    eventId: order.orderReference,\n    correlationId: order.orderReference,\n    externalReference: order.orderReference\n};\n\nlet event = sau.events.composeSAPCreateSalesOrderEvent(sapEventMeta);\n\nmsg.topic = event.topic;\nmsg.payload = event.payload;\nmsg.qos = event.properties.qos;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 1460,
        "wires": [
            [
                "708b44ac.d7412c",
                "499ae631.a2a4e8"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "dd128cf3.5358f",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "validateOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = flow.get('app.order.entries');\n\n    //node.warn(node.name + ': validate: entries = \\n' + JSON.stringify(entries, null, 1));\n\nlet isValidEntries = true;\n\nif(entries.quantity < 1) isValidEntries = false;\nelse if(su.misc.isStringEmpty(entries.shipTo)) isValidEntries = false;\nelse if(su.misc.isStringEmpty(entries.sku)) isValidEntries = false;\n\n// todo: could check if it is in the past, let's see what SAP does here\n//convert shipDate to ISO String\nlet shipDateISO = new Date();\nshipDateISO.setTime(entries.shipDate);\nentries.shipDateISO = shipDateISO.toISOString();\n\nif(isValidEntries) {\n    \n    flow.set('app.order.entries', entries);\n\n    node.status({fill:\"green\", shape:\"dot\", text:\"valid\"});\n \n    return msg;\n\n    \n} else {\n    \n    node.status({fill:\"yellow\", shape:\"dot\", text:\"invalid\"});\n    \n}\n\n// ---\n// The End.\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 840,
        "wires": [
            [
                "59d7ce49.43d73"
            ]
        ],
        "outputLabels": [
            "valid entries"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "38bd3ec5.1f4132",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.quantity",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "31b49bfc.2c3af4",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.quantity');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 820,
        "wires": [
            [
                "38bd3ec5.1f4132"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "6af735d9.2d967c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.shipTo');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 900,
        "wires": [
            [
                "ff1f5698.116cd8"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "ff1f5698.116cd8",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.shipTo",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "e895572.1db39a8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "getPartners",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet path = sau.app.getAppPartnersConfigPath();\nlet partners = global.get(path);\nif(su.misc.isObjectEmpty(partners)) return throwError(msg, \"cannot find partners in global context\", {path: path});\n\nmsg.payload.partners = partners;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "733d9d60.911814"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "9cf00085.0de8f",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 720,
        "y": 1180,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "6fed53e1.6596dc",
        "type": "ui_ui_control",
        "z": "4d60d452.18914c",
        "name": "connect event only",
        "events": "connect",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "d3b6fdfd.1ff32"
            ]
        ]
    },
    {
        "id": "9578252b.0883b8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 520,
        "y": 340,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "d3b6fdfd.1ff32",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.isInitialized?",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet isInitialized = global.get(sau.app.getIsInitializedPath(_meta));\n\nif(isInitialized) {\n    node.status({fill:\"green\", shape:\"dot\", text:\"true\"});\n    return msg;\n} else {\n    node.status({fill:\"yellow\", shape:\"dot\", text:\"false\"});\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 340,
        "wires": [
            [
                "9578252b.0883b8"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "1fc51bab.9869d4",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.composeOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet orderEntries = global.get(sau.order.getOrderEntriesPath());\n\n    //node.warn(node.name + ': orderEntries = \\n' + JSON.stringify(orderEntries, null, 1));\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: orderEntries\n}\n\nglobal.set(sau.order.getNewOrderPath(), order);\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1460,
        "wires": [
            [
                "b9964c3e.6d543",
                "4c6d751b.c83c0c"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "d9458aee.a93de8",
        "type": "ui_date_picker",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Ship date:",
        "group": "a0d570c.092769",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "",
        "x": 710,
        "y": 980,
        "wires": [
            [
                "bcf58403.f0e108"
            ]
        ]
    },
    {
        "id": "d7d3a5ed.618ca8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.shipDate",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet shipDate = new Date();\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    shipDate.setTime(msg.payload.orderEntries.shipDate);\n    \n} else shipDate.setDate(shipDate.getDate() + 10); \n\nmsg.payload = shipDate.getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 960,
        "wires": [
            [
                "d9458aee.a93de8",
                "58868a5f.b30264"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "bcf58403.f0e108",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.shipDate');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 980,
        "wires": [
            [
                "58868a5f.b30264"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "58868a5f.b30264",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.shipDate",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "d8272e7b.79ec2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1160,
        "y": 1400,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "b9964c3e.6d543",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 1400,
        "wires": [
            [
                "d128cc75.1e4eb"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "141896d.489c069",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 580,
        "y": 260,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "a1f17392.1791a",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 990,
        "y": 1080,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "733d9d60.911814",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "getOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nmsg.payload.orderEntries = global.get(sau.order.getOrderEntriesPath()) || {};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 660,
        "wires": [
            [
                "c22d7fc5.dddd5"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "8de1f889.868108",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "update",
        "func": "\nmsg.payload = {\n    message: 'order update received',\n    //topic: msg.topic,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 1680,
        "wires": [
            [
                "39954b5f.9718f4",
                "707c3dd1.dc6a84"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "c13eb75e.29c2f8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "fault",
        "func": "\nmsg.payload = {\n    message: 'order fault received',\n    //topic: msg.topic,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "39954b5f.9718f4",
                "2e2ff494.80640c"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "676a534.75ce5ac",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1140,
        "y": 1720,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "91041dde.6391b",
        "type": "mqtt in",
        "z": "4d60d452.18914c",
        "name": "SAPEvent.SalesOrderCreateFault",
        "topic": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/ERD100/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 150,
        "y": 1780,
        "wires": [
            [
                "8f1e4643.cf0728"
            ]
        ]
    },
    {
        "id": "8f1e4643.cf0728",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "filter",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\n\n// order not generated by this instance\nif(su.misc.isStringEmpty(orderReference)) return;\n\n// general update, not related to order\nif(msg.topic.includes(orderReference)) return msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1780,
        "wires": [
            [
                "c13eb75e.29c2f8"
            ]
        ],
        "outputLabels": [
            "update"
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "c85446ab.88cc88",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "log warning",
        "func": "\nnode.warn(msg.topic + ' - ' + msg.payload);\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1530,
        "y": 580,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "1b7ff3f6.4a7edc",
        "type": "comment",
        "z": "4b36e62d.340ed8",
        "name": "test -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "6a938a97.e243f4",
        "type": "catch",
        "z": "4b36e62d.340ed8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "fd15bd93.b2b76"
            ]
        ]
    },
    {
        "id": "5e51cbe3.1597c4",
        "type": "subflow:317873af.a031fc",
        "z": "4b36e62d.340ed8",
        "name": "",
        "env": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "fd15bd93.b2b76",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4b36e62d.340ed8",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "5e51cbe3.1597c4"
            ]
        ]
    },
    {
        "id": "1cefa0ad.a6001f",
        "type": "inject",
        "z": "4b36e62d.340ed8",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "47b0553a.d7edbc"
            ]
        ]
    },
    {
        "id": "47b0553a.d7edbc",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4b36e62d.340ed8",
        "name": "flowProperties:set(main.test)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set(main.test)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "test",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d128cc75.1e4eb",
        "type": "Logger",
        "z": "4d60d452.18914c",
        "log": "9c9ae5b4.ea3b48",
        "name": "logger.init(orderDisplayLog)@sendOrder",
        "method": "init",
        "msgPath": "msg.payload.order",
        "x": 880,
        "y": 1400,
        "wires": [
            [
                "d8272e7b.79ec2"
            ]
        ]
    },
    {
        "id": "af3625fc.67c038",
        "type": "Logger",
        "z": "4d60d452.18914c",
        "log": "9c9ae5b4.ea3b48",
        "name": "logger.get(orderDisplayLog)",
        "method": "get",
        "msgPath": "msg.payload",
        "x": 340,
        "y": 1300,
        "wires": [
            [
                "8f2beeb3.7f3ec"
            ]
        ]
    },
    {
        "id": "39954b5f.9718f4",
        "type": "Logger",
        "z": "4d60d452.18914c",
        "log": "9c9ae5b4.ea3b48",
        "name": "logger.append(orderDisplayLog)@SAPEvent",
        "method": "append",
        "msgPath": "msg.payload",
        "x": 850,
        "y": 1720,
        "wires": [
            [
                "676a534.75ce5ac"
            ]
        ]
    },
    {
        "id": "499ae631.a2a4e8",
        "type": "Logger",
        "z": "4d60d452.18914c",
        "log": "4d494f6d.5997c",
        "name": "logger.clear(SAPEventLog)@sendOrder",
        "method": "clear",
        "msgPath": "msg.payload",
        "x": 950,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "8e5febba.7d6118",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "var _meta = {   packageId: 'app',   componentId: 'controller',   version: '0.1.3',   shortName: 'app',   id: 'solace-asapio-demo' }",
        "info": "",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "7e214718.e9e798",
        "type": "comment",
        "z": "4b36e62d.340ed8",
        "name": "var _meta = {   packageId: 'app',   componentId: 'test',   version: '0.1.0' }",
        "info": "",
        "x": 260,
        "y": 20,
        "wires": []
    },
    {
        "id": "f57ca277.7980b",
        "type": "link in",
        "z": "4b36e62d.340ed8",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "efbcc82a.1ed738"
            ]
        ],
        "l": true
    },
    {
        "id": "33a06c8f.527d04",
        "type": "link out",
        "z": "4b36e62d.340ed8",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 930,
        "y": 280,
        "wires": [],
        "l": true
    },
    {
        "id": "7aac64f6.91a58c",
        "type": "comment",
        "z": "4b36e62d.340ed8",
        "name": "initialize -----------------------------------------------------------------------------------------------",
        "info": "",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "efbcc82a.1ed738",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "ad95000a.48b0f"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "ad95000a.48b0f",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 280,
        "wires": [
            [
                "33a06c8f.527d04"
            ]
        ]
    },
    {
        "id": "a2127ed5.e0643",
        "type": "MutexMethods",
        "z": "3eb672f6.dc73fe",
        "mutex": "8c779f84.c086",
        "name": "mutex.acquire/blocking(app.initialize)",
        "method": "acquireBlock",
        "mutexTimeout": "100",
        "x": 270,
        "y": 1460,
        "wires": [
            [
                "c75372a4.e92b5"
            ],
            []
        ]
    },
    {
        "id": "82c734da.6ecea8",
        "type": "MutexMethods",
        "z": "3eb672f6.dc73fe",
        "mutex": "8c779f84.c086",
        "name": "mutex.release(app.initialize)",
        "method": "release",
        "mutexTimeout": "100",
        "x": 1680,
        "y": 1460,
        "wires": [
            [
                "fbee5225.8b618"
            ],
            []
        ]
    },
    {
        "id": "5d3c4581.5d3d7c",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "4a61cafd.01b3d4",
                "8708783b.8323a8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "2debfd8e.0a3792",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1380,
        "wires": [
            [
                "a2127ed5.e0643"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "24d718e.46061e8",
        "type": "MutexMethods",
        "z": "3eb672f6.dc73fe",
        "mutex": "8c779f84.c086",
        "name": "mutex.release(app.initialize)",
        "method": "release",
        "mutexTimeout": "100",
        "x": 1140,
        "y": 1400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fbee5225.8b618",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1690,
        "y": 1540,
        "wires": [
            [
                "5d3c4581.5d3d7c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "8026db22.7f8958",
        "type": "mqtt out",
        "z": "9207c7bc.35e4b8",
        "name": "send test SAP ResponseEvent",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "584ef358.dac58c",
        "type": "inject",
        "z": "9207c7bc.35e4b8",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "e71f30d5.f277f"
            ]
        ]
    },
    {
        "id": "e71f30d5.f277f",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "fault",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreateFault'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 300,
        "wires": [
            [
                "8026db22.7f8958"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "29cbed00.c0e494",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "update",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreated'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "8026db22.7f8958"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "d864787.9873488",
        "type": "inject",
        "z": "9207c7bc.35e4b8",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 210,
        "y": 340,
        "wires": [
            [
                "29cbed00.c0e494"
            ]
        ]
    },
    {
        "id": "2bdc421f.f81a3e",
        "type": "comment",
        "z": "9207c7bc.35e4b8",
        "name": "with my orderReference",
        "info": "",
        "x": 220,
        "y": 240,
        "wires": []
    },
    {
        "id": "506936ed.15d768",
        "type": "comment",
        "z": "9207c7bc.35e4b8",
        "name": "with other orderReference",
        "info": "",
        "x": 230,
        "y": 400,
        "wires": []
    },
    {
        "id": "bc04fb8f.a76068",
        "type": "inject",
        "z": "9207c7bc.35e4b8",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "c281a85e.15a498"
            ]
        ]
    },
    {
        "id": "c281a85e.15a498",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "fault",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReference = su.misc.shortUUID();\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreateFault'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 460,
        "wires": [
            [
                "8026db22.7f8958"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "746d9016.5d8bd",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "update",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReference = su.misc.shortUUID();\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreated'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 500,
        "wires": [
            [
                "8026db22.7f8958"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "8b7b367b.a32f78",
        "type": "inject",
        "z": "9207c7bc.35e4b8",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 500,
        "wires": [
            [
                "746d9016.5d8bd"
            ]
        ]
    },
    {
        "id": "6415a736.a2e838",
        "type": "inject",
        "z": "9207c7bc.35e4b8",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 660,
        "wires": [
            [
                "e44a5fbe.5893f"
            ]
        ]
    },
    {
        "id": "52cb417b.f883f",
        "type": "comment",
        "z": "9207c7bc.35e4b8",
        "name": "send 200 with my orderReference",
        "info": "",
        "x": 260,
        "y": 620,
        "wires": []
    },
    {
        "id": "debac1d0.e9bf",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "update",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreated'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 660,
        "wires": [
            [
                "8026db22.7f8958",
                "5cf49cbb.4369d4"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "e5eeecd3.5865f",
        "type": "delay",
        "z": "9207c7bc.35e4b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 690,
        "y": 740,
        "wires": [
            [
                "debac1d0.e9bf"
            ]
        ]
    },
    {
        "id": "e44a5fbe.5893f",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "initCounter",
        "func": "\nflow.set('counter', 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 660,
        "wires": [
            [
                "debac1d0.e9bf"
            ]
        ]
    },
    {
        "id": "5cf49cbb.4369d4",
        "type": "function",
        "z": "9207c7bc.35e4b8",
        "name": "counter++ < 200",
        "func": "\nlet counter = flow.get('counter');\ncounter++;\n\nif(counter < 200) {\n    flow.set('counter', counter);\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "e5eeecd3.5865f"
            ]
        ]
    },
    {
        "id": "4183dff3.38fd9",
        "type": "comment",
        "z": "9207c7bc.35e4b8",
        "name": "manual tests -----------------------------------------------------------------------------------------------",
        "info": "",
        "x": 430,
        "y": 200,
        "wires": []
    },
    {
        "id": "858ee092.ae63c",
        "type": "comment",
        "z": "4b36e62d.340ed8",
        "name": "manual tests -----------------------------------------------------------------------------------------------",
        "info": "",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "f24af303.b4055",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "main.sap-event-log -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 840,
        "y": 80,
        "wires": []
    },
    {
        "id": "6c05e486.bd4d5c",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "6d824be8.2ca464",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "3f2c727e.188f0e",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "12e201f9.88b2be",
        "name": "flowProperties:set(main.sap-event-log)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set(main.sap-event-log)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "sap-event-log",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "935c4457.436998"
            ]
        ]
    },
    {
        "id": "18d5e095.df0abf",
        "type": "inject",
        "z": "12e201f9.88b2be",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "3f2c727e.188f0e"
            ]
        ]
    },
    {
        "id": "4fc1447.062e8bc",
        "type": "link in",
        "z": "12e201f9.88b2be",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "f42fd185.39b59"
            ]
        ],
        "l": true
    },
    {
        "id": "5dd06c84.955c14",
        "type": "link out",
        "z": "12e201f9.88b2be",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 970,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "c292d460.5701f8",
        "type": "catch",
        "z": "12e201f9.88b2be",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "dd09187a.801418"
            ]
        ]
    },
    {
        "id": "22b5329f.b1025e",
        "type": "subflow:317873af.a031fc",
        "z": "12e201f9.88b2be",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "dd09187a.801418",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "12e201f9.88b2be",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "22b5329f.b1025e"
            ]
        ]
    },
    {
        "id": "ebb02028.2d3a2",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "var _meta = {   packageId: 'app',   componentId: 'sap-event-log',   version: '0.1.0' }",
        "info": "",
        "x": 300,
        "y": 40,
        "wires": []
    },
    {
        "id": "f42fd185.39b59",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "sapEventLog.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.sapEventLog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 500,
        "wires": [
            [
                "1a62d40c.dff1cc"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "1a62d40c.dff1cc",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 500,
        "wires": [
            [
                "5dd06c84.955c14"
            ]
        ]
    },
    {
        "id": "935c4457.436998",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "trigger_updateLog",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 610,
        "y": 260,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "ba125a4c.42f908",
        "type": "complete",
        "z": "12e201f9.88b2be",
        "name": "on_updateLog",
        "scope": [
            "935c4457.436998",
            "26e08d35.95fa12"
        ],
        "uncaught": false,
        "x": 140,
        "y": 720,
        "wires": [
            [
                "80368f9e.28ac"
            ]
        ]
    },
    {
        "id": "1a914bb4.9df4d4",
        "type": "ui_template",
        "z": "12e201f9.88b2be",
        "group": "b1ee4438.4885c8",
        "name": "displaySAPEventLog",
        "order": 2,
        "width": "21",
        "height": "15",
        "format": "\n<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        {{x.timestamp}}\n        <div>\n            <pre>{{x | json}}</pre>\n        </div>\n    </li>\n    <hr/>\n</div>\n</ol>\n\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1260,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7e8701bc.89f9",
        "type": "ui_button",
        "z": "12e201f9.88b2be",
        "name": "clear",
        "group": "b1ee4438.4885c8",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "clear log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "d04a4460.fb05e8"
            ]
        ]
    },
    {
        "id": "d04a4460.fb05e8",
        "type": "Logger",
        "z": "12e201f9.88b2be",
        "log": "4d494f6d.5997c",
        "name": "logger.clear(SAPEventLog)@clearButton",
        "method": "clear",
        "msgPath": "msg.payload",
        "x": 680,
        "y": 760,
        "wires": [
            [
                "80368f9e.28ac"
            ]
        ]
    },
    {
        "id": "80368f9e.28ac",
        "type": "Logger",
        "z": "12e201f9.88b2be",
        "log": "4d494f6d.5997c",
        "name": "logger.get(SAPEventLog)",
        "method": "get",
        "msgPath": "msg.payload",
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "1a914bb4.9df4d4"
            ]
        ]
    },
    {
        "id": "2752bb5e.02e4f4",
        "type": "mqtt in",
        "z": "12e201f9.88b2be",
        "name": "SAPEvent.SalesOrderCreated",
        "topic": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/ERD100/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "37fb983f.a780c8"
            ]
        ]
    },
    {
        "id": "e337f52c.f47d58",
        "type": "mqtt in",
        "z": "12e201f9.88b2be",
        "name": "SAPEvent.SalesOrderCreateFault",
        "topic": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/ERD100/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "e4be18e0.79b5c8"
            ]
        ]
    },
    {
        "id": "5fa90e3d.c1477",
        "type": "mqtt in",
        "z": "12e201f9.88b2be",
        "name": "SAPEvent.CreateSalesOrder",
        "topic": "sap_demo/BUS2032/sap-bo-data/create/json/v1/asadev/1000/ERD100/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "80f9913d.57272"
            ]
        ]
    },
    {
        "id": "80f9913d.57272",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "transform",
        "func": "\nmsg.payload = {\n    event: 'CreateSalesOrder',\n    topic: msg.topic,\n    qos: msg.qos,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "5adef55d.c9b9ec"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "5adef55d.c9b9ec",
        "type": "Logger",
        "z": "12e201f9.88b2be",
        "log": "4d494f6d.5997c",
        "name": "logger.append(SAPEventLog)",
        "method": "append",
        "msgPath": "msg.payload",
        "x": 860,
        "y": 1020,
        "wires": [
            [
                "26e08d35.95fa12"
            ]
        ]
    },
    {
        "id": "26e08d35.95fa12",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "trigger_updateLog",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1090,
        "y": 1020,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "37fb983f.a780c8",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "transform",
        "func": "\nmsg.payload = {\n    event: 'SalesOrderCreated',\n    topic: msg.topic,\n    qos: msg.qos,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "5adef55d.c9b9ec"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "e4be18e0.79b5c8",
        "type": "function",
        "z": "12e201f9.88b2be",
        "name": "transform",
        "func": "\nmsg.payload = {\n    event: 'SalesOrderCreateFault',\n    topic: msg.topic,\n    qos: msg.qos,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "5adef55d.c9b9ec"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "a845cfdd.e6984",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "sap_demo/BUS2032/sap-bo-data/create/json/v1/asadev/1000/ERD100/#",
        "info": "",
        "x": 320,
        "y": 880,
        "wires": []
    },
    {
        "id": "ce8b9f2d.d6f7e",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/ERD100/#",
        "info": "",
        "x": 320,
        "y": 980,
        "wires": []
    },
    {
        "id": "cd92f574.27a488",
        "type": "comment",
        "z": "12e201f9.88b2be",
        "name": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/ERD100/#",
        "info": "",
        "x": 310,
        "y": 1080,
        "wires": []
    },
    {
        "id": "cf4703ba.273b5",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/ERD100/#",
        "info": "",
        "x": 280,
        "y": 1640,
        "wires": []
    },
    {
        "id": "371e4373.7c434c",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/ERD100/#",
        "info": "",
        "x": 270,
        "y": 1740,
        "wires": []
    },
    {
        "id": "707c3dd1.dc6a84",
        "type": "debug",
        "z": "4d60d452.18914c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 760,
        "y": 1660,
        "wires": []
    },
    {
        "id": "2e2ff494.80640c",
        "type": "debug",
        "z": "4d60d452.18914c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 750,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ba4bdbb2.0cc8e8",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "d7e8a590.ae7fe8",
        "order": 0,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create 5 Orders",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "98e59f81.4a11"
            ]
        ]
    },
    {
        "id": "98e59f81.4a11",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "initCounter",
        "func": "\nflow.set('counter', 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "678d997b.36c088"
            ]
        ]
    },
    {
        "id": "678d997b.36c088",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 420,
        "wires": [
            [
                "71959988.871a18"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "71959988.871a18",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeEvent(createSalesOrder)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = msg.payload.order;\nif(su.misc.isObjectEmpty(order)) return throwError(msg, \"cannot find order in msg.payload\", {payload: msg.payload});\n\n// get all eventSchemas\nlet eventSchemasPath = sau.app.getEventSchemasConfigPath();\nlet eventSchemas = global.get(eventSchemasPath) || {};\nif(su.misc.isObjectEmpty(eventSchemas)) return throwError(msg, \"cannot find eventSchemas in global context\", {path: eventSchemasPath});\n\nlet channelPath = sau.app.getAppChannelConfigPath();\nlet channel = global.get(channelPath);\nif(su.misc.isObjectEmpty(channel)) return throwError(msg, \"cannot find channel in global context\", {path: channelPath});\n\nlet sapEventMeta = {\n    eventName: 'createSalesOrder',\n    properties: { \n        qos: 1\n    },\n    schemas: eventSchemas,\n    channel: channel,\n    entries: order.orderEntries,\n    timestamp: order.orderCreatedTimestamp,\n    eventId: order.orderReference,\n    correlationId: order.orderReference,\n    externalReference: order.orderReference\n};\n\nlet event = sau.events.composeSAPCreateSalesOrderEvent(sapEventMeta);\n\nmsg.topic = event.topic;\nmsg.payload = event.payload;\nmsg.qos = event.properties.qos;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 420,
        "wires": [
            [
                "7f585a9d.102c54",
                "af666ff9.4d586"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "b295e69c.911dc8",
        "type": "mqtt out",
        "z": "4b36e62d.340ed8",
        "name": "SAPEvent.CreateSalesOrder",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1460,
        "y": 560,
        "wires": []
    },
    {
        "id": "7a4f02c6.ca0fbc",
        "type": "delay",
        "z": "4b36e62d.340ed8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 830,
        "y": 480,
        "wires": [
            [
                "678d997b.36c088"
            ]
        ]
    },
    {
        "id": "7f585a9d.102c54",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "counter++ < 5",
        "func": "\nlet counter = flow.get('counter');\ncounter++;\n\nif(counter < 5) {\n    flow.set('counter', counter);\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "7a4f02c6.ca0fbc"
            ]
        ]
    },
    {
        "id": "d7208ead.d8de",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "d7e8a590.ae7fe8",
        "order": 0,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create 100 Orders",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "d3d83f9c.583af"
            ]
        ]
    },
    {
        "id": "d3d83f9c.583af",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "initCounter",
        "func": "\nflow.set('counter', 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 560,
        "wires": [
            [
                "dcc4c47d.29e9d8"
            ]
        ]
    },
    {
        "id": "dcc4c47d.29e9d8",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 560,
        "wires": [
            [
                "2386ad81.398882"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "2386ad81.398882",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeEvent(createSalesOrder)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = msg.payload.order;\nif(su.misc.isObjectEmpty(order)) return throwError(msg, \"cannot find order in msg.payload\", {payload: msg.payload});\n\n// get all eventSchemas\nlet eventSchemasPath = sau.app.getEventSchemasConfigPath();\nlet eventSchemas = global.get(eventSchemasPath) || {};\nif(su.misc.isObjectEmpty(eventSchemas)) return throwError(msg, \"cannot find eventSchemas in global context\", {path: eventSchemasPath});\n\nlet channelPath = sau.app.getAppChannelConfigPath();\nlet channel = global.get(channelPath);\nif(su.misc.isObjectEmpty(channel)) return throwError(msg, \"cannot find channel in global context\", {path: channelPath});\n\nlet sapEventMeta = {\n    eventName: 'createSalesOrder',\n    properties: { \n        qos: 1\n    },\n    schemas: eventSchemas,\n    channel: channel,\n    entries: order.orderEntries,\n    timestamp: order.orderCreatedTimestamp,\n    eventId: order.orderReference,\n    correlationId: order.orderReference,\n    externalReference: order.orderReference\n};\n\nlet event = sau.events.composeSAPCreateSalesOrderEvent(sapEventMeta);\n\nmsg.topic = event.topic;\nmsg.payload = event.payload;\nmsg.qos = event.properties.qos;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 560,
        "wires": [
            [
                "e0ec82fa.df7a3",
                "349bfdd3.f917a2"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "6169b97c.b31128",
        "type": "delay",
        "z": "4b36e62d.340ed8",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 850,
        "y": 620,
        "wires": [
            [
                "dcc4c47d.29e9d8"
            ]
        ]
    },
    {
        "id": "e0ec82fa.df7a3",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "counter++ < 100",
        "func": "\nlet counter = flow.get('counter');\ncounter++;\n\nif(counter < 100) {\n    flow.set('counter', counter);\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 620,
        "wires": [
            [
                "6169b97c.b31128"
            ]
        ]
    },
    {
        "id": "6f3d99c4.3c47b8",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / ship date in the past",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 180,
        "y": 760,
        "wires": [
            [
                "79653d45.dfe1c4"
            ]
        ]
    },
    {
        "id": "79653d45.dfe1c4",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.shipDateISO = '2020-04-12T04:36:10.207Z';\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 760,
        "wires": [
            [
                "3a61c2e7.11b53e"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "ed80abcc.82ecf8",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeEvent(createSalesOrder)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = msg.payload.order;\nif(su.misc.isObjectEmpty(order)) return throwError(msg, \"cannot find order in msg.payload\", {payload: msg.payload});\n\n// get all eventSchemas\nlet eventSchemasPath = sau.app.getEventSchemasConfigPath();\nlet eventSchemas = global.get(eventSchemasPath) || {};\nif(su.misc.isObjectEmpty(eventSchemas)) return throwError(msg, \"cannot find eventSchemas in global context\", {path: eventSchemasPath});\n\nlet channelPath = sau.app.getAppChannelConfigPath();\nlet channel = global.get(channelPath);\nif(su.misc.isObjectEmpty(channel)) return throwError(msg, \"cannot find channel in global context\", {path: channelPath});\n\nlet sapEventMeta = {\n    eventName: 'createSalesOrder',\n    properties: { \n        qos: 1\n    },\n    schemas: eventSchemas,\n    channel: channel,\n    entries: order.orderEntries,\n    timestamp: order.orderCreatedTimestamp,\n    eventId: order.orderReference,\n    correlationId: order.orderReference,\n    externalReference: order.orderReference\n};\n\nlet event = sau.events.composeSAPCreateSalesOrderEvent(sapEventMeta);\n\nmsg.topic = event.topic;\nmsg.payload = event.payload;\nmsg.qos = event.properties.qos;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 820,
        "wires": [
            [
                "45e3bcc4.285d54"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "af666ff9.4d586",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "b295e69c.911dc8",
                "4259238f.fae68c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "349bfdd3.f917a2",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 560,
        "wires": [
            [
                "b295e69c.911dc8",
                "4259238f.fae68c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "45e3bcc4.285d54",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 820,
        "wires": [
            [
                "b295e69c.911dc8",
                "4259238f.fae68c"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "4b3da41a.6427dc",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 7,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / unknown sku",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "3c83137c.14716c"
            ]
        ]
    },
    {
        "id": "3c83137c.14716c",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.sku = 'unknown sku';\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "6f4ca15f.e727c"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "3a61c2e7.11b53e",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 760,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "6f4ca15f.e727c",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "9d007f26.422bc",
        "type": "link in",
        "z": "12e201f9.88b2be",
        "name": "main.sap-event-log.clearLog",
        "links": [
            "4259238f.fae68c"
        ],
        "x": 180,
        "y": 820,
        "wires": [
            [
                "d04a4460.fb05e8"
            ]
        ],
        "l": true
    },
    {
        "id": "4259238f.fae68c",
        "type": "link out",
        "z": "4b36e62d.340ed8",
        "name": "main.sap-event-log.clearLog",
        "links": [
            "9d007f26.422bc"
        ],
        "x": 1460,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "c699c064.fa0cd",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 2,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / wrong date format",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "b4a1335.a0dc9d"
            ]
        ]
    },
    {
        "id": "b4a1335.a0dc9d",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.shipDateISO = 'APRIL-12T04:36:10.207Z';\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "d025ae86.83da"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "d025ae86.83da",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 800,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "cf29a78.931d658",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 3,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / empty date",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "9e4a6a59.7c8da8"
            ]
        ]
    },
    {
        "id": "9e4a6a59.7c8da8",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.shipDateISO = '';\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 840,
        "wires": [
            [
                "3068fde8.2b9012"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "3068fde8.2b9012",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 840,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "b5e33d6a.fc2ec",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 4,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / qty=0",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "3027a755.85a4d8"
            ]
        ]
    },
    {
        "id": "3027a755.85a4d8",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.quantity = 0;\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 900,
        "wires": [
            [
                "894b0e3b.9663d"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "894b0e3b.9663d",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 900,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "106c234e.3d4a6d",
        "type": "ui_button",
        "z": "4b36e62d.340ed8",
        "name": "",
        "group": "740619e9.082388",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Create order / qty=-1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "f55cfa90.fd6e38"
            ]
        ]
    },
    {
        "id": "f55cfa90.fd6e38",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "test.composeNewOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.test.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.shortUUID(),\n    orderEntries: sau.test.composeOrderEntries()\n}\n\norder.orderEntries.quantity = -1;\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 940,
        "wires": [
            [
                "8ddb54d2.4a23f8"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "font-awesome/fa-random"
    },
    {
        "id": "8ddb54d2.4a23f8",
        "type": "function",
        "z": "4b36e62d.340ed8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 940,
        "wires": [
            [
                "ed80abcc.82ecf8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    }
]