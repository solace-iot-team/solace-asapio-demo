[
    {
        "id": "3eb672f6.dc73fe",
        "type": "tab",
        "label": "main.app",
        "disabled": false,
        "info": "The app controller.\n\nTODO: github links\n\n[see app.md on github](xxxx/doc/app.md)\n\n[see app-state-interfaces.md](xxx/doc/app-state-interfaces.md)\n\n[see app-micro-services.md](xxx/doc/app-micro-services.md)\n\n[see subflows.md](xxx/doc/subflows.md)\n\n\n\n\n\n---\nThe End.\n"
    },
    {
        "id": "4d60d452.18914c",
        "type": "tab",
        "label": "main.order",
        "disabled": false,
        "info": ""
    },
    {
        "id": "475cded7.6c736",
        "type": "tab",
        "label": "main.devicesettings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "46127397.12a33c",
        "type": "tab",
        "label": "main.mqttCm",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c50bcf9b.51248",
        "type": "tab",
        "label": "main.mqttDsCtrl",
        "disabled": false,
        "info": ""
    },
    {
        "id": "81b16b1.5822198",
        "type": "tab",
        "label": "DeviceCommands",
        "disabled": false,
        "info": ""
    },
    {
        "id": "732e6ace.9ebb04",
        "type": "tab",
        "label": "DeviceConfig",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b661b75c.e7b738",
        "type": "tab",
        "label": "main.about",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b24430d.823f7d",
        "type": "subflow",
        "name": "InProgressNotification",
        "info": "When triggered, displays an 'command'/'configuration' in-progress modal dialog.\nRetrieves details from the global context.",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 320,
                "y": 120,
                "wires": [
                    {
                        "id": "fb9a5262.f864d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#21cc9e"
    },
    {
        "id": "317873af.a031fc",
        "type": "subflow",
        "name": "app error handler",
        "info": "# Log and display an error\n\n## Input\n\nA ``solaceError`` object within the input msg.\n\nExample:\n\n```json\n{\n  \"solaceError\": {\n    \"origin\": {\n      \"componentName\": \"TestSolaceError\",\n      \"instanceName\": \"create-SolaceError\",\n      \"source\": {\n        \"id\": \"fa0f610d.8f829\",\n        \"type\": \"function\",\n        \"name\": \"create-SolaceError\",\n        \"count\": 1\n      }\n    },\n    \"message\": \"error_1: user message describing the error\",\n    \"severity\": \"ERROR\",\n    \"details\": {\n      \"detail_1\": \"add more details about the error here if useful\",\n      \"detail_2\": \"detail_2\"\n    },\n    \"msg\": {\n      \"_msgid\": \"44914cde.2f4b74\",\n      \"topic\": \"\",\n      \"payload\": {\n        \"error_1\": true\n      }\n    },\n    \"caughtBy\": {\n      \"flow\": \"TestSolaceError\",\n      \"function\": \"handleAnyErrorType\"\n    }\n  }\n}\n```\n\n## Example Usage: Generating the Solace Error\n\n```js \nlet su = global.get('solaceUtils');\n\nif(errorCondition) {\n    let message = 'user message describing the error';\n    let details = {\n        detail_1: 'add more details about the error here if useful',\n        detail_2: 'detail_2'\n    }\n    let errObj = new su.SolaceError('thisComponent', 'thisInstance', message, 'ERROR', details, msg);\n\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n    return;\n}\n```",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 60,
                "y": 380,
                "wires": [
                    {
                        "id": "40923531.4b5a4c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "meta.packageId",
                "type": "str",
                "value": "app",
                "ui": {
                    "type": "hide",
                    "opts": {}
                }
            },
            {
                "name": "meta.componentId",
                "type": "str",
                "value": "SolaceErrorHandler",
                "ui": {
                    "type": "hide",
                    "opts": {}
                }
            },
            {
                "name": "meta.version",
                "type": "str",
                "value": "0.2.0",
                "ui": {
                    "type": "hide",
                    "opts": {}
                }
            }
        ],
        "color": "#db7163",
        "inputLabels": [
            "error"
        ],
        "icon": "node-red/alert.svg",
        "status": {
            "x": 200,
            "y": 320,
            "wires": [
                {
                    "id": "aea90ded.7c436",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2dc7a432.56c74c",
        "type": "subflow",
        "name": "app codemaps",
        "info": "",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "cb441c21.ea425"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 620,
                "wires": [
                    {
                        "id": "10875f5d.f22b81",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#21cc9e",
        "status": {
            "x": 1520,
            "y": 180,
            "wires": [
                {
                    "id": "7e6d60f2.3a877",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4b6c2fb2.f3121",
        "type": "subflow",
        "name": "sempv2 mqttSession",
        "info": "SempV2 mqttSession REST calls.\n\nSee [Solace SempV2 Help](https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/) - mqttSession\n\n# Input\n\n* msg and properties\n    * properties override msg if they are defined\n \n## Elements\n\n* ``instanceName``: name used in error / debug messages - best to copy/paste the subflow name here\n* ``solaceBrokerId``: unique id / name of the configuration \n    * format: solaceBrokerId.match(/^[A-Za-z0-9_-]+$/)   \n* ``apiCall``: \n    * ``getListOfMqttSessionObjects``\n    * ``getMqttSessionObject``\n    * ``getMqttSessionSubscriptions``\n    * ``updateMqttSessionObject``\n    * ``deleteMqttSessionSubscriptionObject``\n    * ``createMqttSessionSubscriptionObject``\n    * ``deleteMqttSessionObject``\n\n## Return\n* ``msg.success`` = ``true`` if no error\n* result of apiCall  \n* no return in case of error\n\n## Exceptions\n\n* Throws exceptions using node.error()\n\n## Example Inputs:\n\n### Get all Mqtt Session Objects\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'getListOfMqttSessionObjects'\n}\n```\n### Get Mqtt Session Object\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'getMqttSessionObject',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>'\n    }\n}\n```\n### Get Mqtt Session Subscriptions\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'getMqttSessionSubscriptions',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>'\n    }\n}\n```\n### Update Mqtt Session\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'updateMqttSessionObject',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>',\n        body: {\n            enabled: true/false,\n            ... (as per documentation)\n        }\n    }\n}\n```\n### Delete Mqtt Session Subscription Object\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'deleteMqttSessionSubscriptionObject',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>',\n        topic:'<the topic subscription to delete>'\n    }\n}\n```\n### Create Mqtt Session Subscription Object\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'createMqttSessionSubscriptionObject',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>',\n        body: {\n            subscriptionQoS: 0 or 1,\n            subscriptionTopic: '<the topic subscription>',\n            ... (as per documentation)\n        }\n    }\n}\n```\n\n### Delete Mqtt Session Object\n```json\nmsg.sempV2mqttSession = {\n    solaceBrokerId: '<the config id>',\n    apiCall: 'deleteMqttSessionObject',\n    apiCallParams: {\n        mqttSessionClientId: '<the client id>'\n    }\n}\n```\n\n\n\n",
        "category": "solace sempv2",
        "in": [
            {
                "x": 60,
                "y": 340,
                "wires": [
                    {
                        "id": "fe9bd0c4.3fd72"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 320,
                "wires": [
                    {
                        "id": "dc4131c2.64637",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1700,
                "y": 360,
                "wires": [
                    {
                        "id": "d21a6755.5a2188",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1700,
                "y": 400,
                "wires": [
                    {
                        "id": "d21a6755.5a2188",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "sempv2.mqttSession.method@where",
                "ui": {
                    "label": {
                        "en-US": "instance name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "sempv2.config.id",
                "type": "str",
                "value": "solaceDeviceBroker",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "sempv2 config id"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "solaceDeviceBroker"
                                },
                                "v": "solaceDeviceBroker"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#DEBD5C",
        "inputLabels": [
            "msg.sempV2mqttSession"
        ],
        "outputLabels": [
            "success",
            "http-error",
            "api-error"
        ],
        "icon": "font-awesome/fa-exchange",
        "status": {
            "x": 1700,
            "y": 280,
            "wires": [
                {
                    "id": "76b4eff4.1f968",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "72433083.19e34",
        "type": "subflow",
        "name": "sempv2 config",
        "info": "Configuration node for a Solace broker instance for the ``solace.sempv2`` nodes.\n\n[see solace.sempv2.config](http://github.com/.../node-red-contrib-solace-sempv2/doc/sempv2.config.md)\n\n---\nThe End.\n",
        "category": "solace sempv2",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "efd76714.54afd8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1780,
                "y": 220,
                "wires": [
                    {
                        "id": "9602ae1.378fd5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1780,
                "y": 340,
                "wires": [
                    {
                        "id": "ed2cae31.155fb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "unset"
                                },
                                "v": "unset"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "solaceBrokerId",
                "type": "str",
                "value": "solaceDeviceBroker",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "sempv2 config id"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "solaceDeviceBroker"
                                },
                                "v": "solaceDeviceBroker"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "input"
        ],
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1780,
            "y": 160,
            "wires": [
                {
                    "id": "502e8b1d.28cda4",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "451eb845.ed3f88",
        "type": "subflow",
        "name": "testMgmtMqttConnection",
        "info": "",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 180,
                "y": 120,
                "wires": [
                    {
                        "id": "fabbe6b4.bb8448"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 540,
                "wires": [
                    {
                        "id": "2f8fbb2b.28dd44",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 360,
                "wires": [
                    {
                        "id": "94c40d6e.d9e25",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "componentName",
                "type": "str",
                "value": "testMgmtMqttConnection",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "instanceName",
                "type": "str",
                "value": ""
            }
        ],
        "color": "#21cc9e",
        "outputLabels": [
            "success",
            "error"
        ]
    },
    {
        "id": "7f298068.d86b1",
        "type": "subflow",
        "name": "TestSolaceErrorSubFlow",
        "info": "Test/example using SolaceError within a sub flow.\n\n\n# Input\n\n## Mandatory Input Fields\n\n* ``componentName`` [string] [hidden constant] - the name of the component\n* ``instanceName`` [string] [user entered] - the name of the instance of the sub flow. copy/paste the name of the subflow, this allows for easy searching in case of an error. \n\n## Custom Input Properties\n\n__Note: custom properties can either be set manually or via incoming msg.payload. Manually set properties override incoming msg.payload properties.__\n\n* ``property1`` [string] [mandatory] - a custom, mandatory, string input property. Flow tests for: is not empty, is a string and throws a SolaceError in case tests not successful. \n\n# Output\n\n* msg [object] - the incoming msg with properties added\n\n\n# Exception\n\n* ``SolaceError``\n\n\n\n-----\nThe End.",
        "category": "solace utils",
        "in": [
            {
                "x": 320,
                "y": 140,
                "wires": [
                    {
                        "id": "341352c9.16d02e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 220,
                "wires": [
                    {
                        "id": "497614ac.1f71dc",
                        "port": 0
                    },
                    {
                        "id": "becf16d3.134058",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "componentName",
                "type": "str",
                "value": "TestSolaceErrorSubFlow",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "instanceName",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "property1",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "forceJSError",
                "type": "bool",
                "value": "false",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            }
        ],
        "color": "#87A980",
        "inputLabels": [
            "msg with/without properties"
        ],
        "outputLabels": [
            "original msg with properties"
        ],
        "icon": "node-red-contrib-alexa-notifyme/test.png"
    },
    {
        "id": "7335a6bf.4e03a8",
        "type": "subflow",
        "name": "app controller",
        "info": "Manages the app state.\n\n[see appStateInterfaces.md](https:/github.link)\n\n---\nThe End.\n",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 600,
                "wires": [
                    {
                        "id": "455042b0.6e533c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 580,
                "wires": [
                    {
                        "id": "6967887e.553fb8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "clear-state"
                                },
                                "v": "clear-state"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#21cc9e",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1580,
            "y": 500,
            "wires": [
                {
                    "id": "4b1decb9.9c4564",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6b984824.a17568",
        "type": "subflow",
        "name": "sempv2 about",
        "info": "\nCall [Solace SempV2 About API](https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/about).\n\n\n[see solace.sempv2.about](http://github.com/.../node-red-contrib-solace-sempv2/doc/sempv2.about.md)\n\n",
        "category": "solace sempv2",
        "in": [
            {
                "x": 80,
                "y": 280,
                "wires": [
                    {
                        "id": "616e0712.29bdf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1780,
                "y": 300,
                "wires": [
                    {
                        "id": "4b5c1ce7.4c9eb4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1780,
                "y": 240,
                "wires": [
                    {
                        "id": "ddd8e537.7b8b08",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "solaceBrokerId",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "resource",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "all"
                                },
                                "v": "all"
                            },
                            {
                                "l": {
                                    "en-US": "about"
                                },
                                "v": "about"
                            },
                            {
                                "l": {
                                    "en-US": "about/api"
                                },
                                "v": "about/api"
                            },
                            {
                                "l": {
                                    "en-US": "about/user"
                                },
                                "v": "about/user"
                            },
                            {
                                "l": {
                                    "en-US": "about/user/msgVpns"
                                },
                                "v": "about/user/msgVpns"
                            },
                            {
                                "l": {
                                    "en-US": "about/user/msgVpns/{vpn}"
                                },
                                "v": "about/user/msgVpns/{vpn}"
                            }
                        ]
                    }
                }
            },
            {
                "name": "vpn",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "msg.payload"
        ],
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "font-awesome/fa-exchange",
        "status": {
            "x": 1780,
            "y": 380,
            "wires": [
                {
                    "id": "2ff6e77b.3ac0c8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "44813701.a560c8",
        "type": "subflow",
        "name": "forEach",
        "info": "\nIterate over an input array of items and send item by item to output after receiving the next input.\nThis is a stateful node, it saves state per instance in parent flow and in the output msg. Use the output msg as the input to trigger the next item (or end) send.\n\n\n[see solace.utils.forEach](http://github.com/.../node-red-contrib-solace-utils/doc/utils.forEach.md)\n",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 280,
                "wires": [
                    {
                        "id": "c3b8d0b6.9f5fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 240,
                "wires": [
                    {
                        "id": "cb9e650e.ac4bc8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 280,
                "wires": [
                    {
                        "id": "ed1738d5.4622f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 320,
                "wires": [
                    {
                        "id": "404b41c4.06b95",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#34e39a",
        "inputLabels": [
            "new or existing instance"
        ],
        "outputLabels": [
            "start",
            "items",
            "end"
        ],
        "icon": "node-red/split.svg",
        "status": {
            "x": 880,
            "y": 360,
            "wires": [
                {
                    "id": "220d2334.7e8a6c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8e181349.856bd",
        "type": "subflow",
        "name": "SolaceError",
        "info": "Access to SolaceError\n\n[see SolaceError.md](http://git/doc/SolaceError.md)",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 260,
                "wires": [
                    {
                        "id": "67b8792c.811068"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 280,
                "wires": [
                    {
                        "id": "7cd15b6d.5a5a04",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1240,
                "y": 140,
                "wires": [
                    {
                        "id": "39daa6eb.d9b0ba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "unset"
                                },
                                "v": "unset"
                            },
                            {
                                "l": {
                                    "en-US": "getTotalErrorCount"
                                },
                                "v": "getTotalErrorCount"
                            },
                            {
                                "l": {
                                    "en-US": "setTotalErrorCount"
                                },
                                "v": "setTotalErrorCount"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#34e39a",
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1260,
            "y": 340,
            "wires": [
                {
                    "id": "66204707.f77548",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2423898a.899736",
        "type": "subflow",
        "name": "template",
        "info": "",
        "category": "solace utils",
        "in": [],
        "out": [],
        "env": [],
        "color": "#34e39a"
    },
    {
        "id": "4f07498e.ebb5f8",
        "type": "subflow",
        "name": "flow properties",
        "info": "",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "ca728d7e.faee2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "a4aea2a3.c1433",
                        "port": 0
                    },
                    {
                        "id": "5ce3bcc2.d2fd74",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "packageId",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "set: packageId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "componentId",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "set: componentId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "color": "#34e39a",
        "icon": "node-red/db.svg",
        "status": {
            "x": 1140,
            "y": 300,
            "wires": [
                {
                    "id": "9a4e0854.e6b948",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "bd2c8430.9c7668",
        "type": "subflow",
        "name": "device settings",
        "info": "Manages the device settings.\n\n",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 60,
                "y": 460,
                "wires": [
                    {
                        "id": "39be31cf.42580e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 460,
                "wires": [
                    {
                        "id": "e27a3447.462c88",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1340,
                "y": 600,
                "wires": [
                    {
                        "id": "3b87da56.9e8466",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "ds.{method}@where",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            },
                            {
                                "l": {
                                    "en-US": "set"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "unset"
                                },
                                "v": "unset"
                            },
                            {
                                "l": {
                                    "en-US": "getDeviceId"
                                },
                                "v": "getDeviceId"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#21cc9e",
        "outputLabels": [
            "success",
            "invalidEntries (for set.ds.entries)"
        ],
        "icon": "node-red-dashboard/ui_form.png",
        "status": {
            "x": 1340,
            "y": 320,
            "wires": [
                {
                    "id": "a0cd2ca8.265ee",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "776ea548.cb42dc",
        "type": "subflow",
        "name": "subflow error handler",
        "info": "Solace Utils: Error handler for subflows.\n\n**_do not use as is, build an app specific subflow that wraps this one_**\n\n## Inputs\n\n``msg._solaceUtilsSubflowErrorHandler`` with:\n\n- ``solaceUtilsGlobalContext`` - global context path of the Solace utils functions\n- ``solaceAppUtilsGlobalContext`` - global context path of the Solace app utils functions\n- ``solaceAppUtilsComponentGlobalContext`` - global context path of the component functions in ``solaceAppUtilsGlobalContext``\n\nExample:\n\n```js\nmsg._solaceUtilsSubflowErrorHandler = {\n    solaceUtilsGlobalContext: '_solaceUtils',\n    solaceAppUtilsGlobalContext: '_solaceAppUtils',\n    solaceAppUtilsComponentGlobalContext: 'app'\n};\n```",
        "category": "solace utils",
        "in": [
            {
                "x": 180,
                "y": 180,
                "wires": [
                    {
                        "id": "afcb3a99.477868"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#db0902",
        "icon": "node-red/alert.svg",
        "status": {
            "x": 320,
            "y": 80,
            "wires": [
                {
                    "id": "6596e39f.b8f7ec",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f315565e.b7a9b8",
        "type": "subflow",
        "name": "app subflow error handler",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 180,
                "y": 140,
                "wires": [
                    {
                        "id": "ab2bbf0.6e03b4"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "solace-app-component",
                "type": "str",
                "value": "not-configured",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": "not-configured"
                            },
                            {
                                "l": {
                                    "en-US": "app"
                                },
                                "v": "app"
                            },
                            {
                                "l": {
                                    "en-US": "productCatalog"
                                },
                                "v": "productCatalog"
                            },
                            {
                                "l": {
                                    "en-US": "mqttConnectionMonitor"
                                },
                                "v": "mqttConnectionMonitor"
                            },
                            {
                                "l": {
                                    "en-US": "mqttDeviceSessionControl"
                                },
                                "v": "mqttDeviceSessionControl"
                            },
                            {
                                "l": {
                                    "en-US": "about"
                                },
                                "v": "about"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#db7163",
        "icon": "node-red/alert.svg",
        "status": {
            "x": 340,
            "y": 60,
            "wires": [
                {
                    "id": "cacc3e4f.9c57d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6be2bb10.2f7fa4",
        "type": "subflow",
        "name": "mqtt connection monitor",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 300,
                "wires": [
                    {
                        "id": "17bf0d5e.27ce63"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 300,
                "wires": [
                    {
                        "id": "c0092c06.69623",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get-status"
                                },
                                "v": "get-status"
                            },
                            {
                                "l": {
                                    "en-US": "set-status"
                                },
                                "v": "set-status"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#21cc9e",
        "status": {
            "x": 1280,
            "y": 180,
            "wires": [
                {
                    "id": "c688684.fb4c298",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f38ebeda.df285",
        "type": "subflow",
        "name": "mqtt device session control",
        "info": "",
        "category": "solace xdk110 mgmt",
        "in": [
            {
                "x": 60,
                "y": 280,
                "wires": [
                    {
                        "id": "ebf58e34.e84b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1800,
                "y": 660,
                "wires": [
                    {
                        "id": "ac712fa.f34e4d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1800,
                "y": 820,
                "wires": [
                    {
                        "id": "b1be9e61.8f63d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "mqttDsCtrl.{method}@{where}",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "getDeviceSessionInfo"
                                },
                                "v": "getDeviceSessionInfo"
                            },
                            {
                                "l": {
                                    "en-US": "getState"
                                },
                                "v": "getState"
                            },
                            {
                                "l": {
                                    "en-US": "enableDeviceSession"
                                },
                                "v": "enableDeviceSession"
                            },
                            {
                                "l": {
                                    "en-US": "disableDeviceSession"
                                },
                                "v": "disableDeviceSession"
                            },
                            {
                                "l": {
                                    "en-US": "addAllSubscriptions"
                                },
                                "v": "addAllSubscriptions"
                            },
                            {
                                "l": {
                                    "en-US": "deleteAllSubscriptions"
                                },
                                "v": "deleteAllSubscriptions"
                            },
                            {
                                "l": {
                                    "en-US": "createSession"
                                },
                                "v": "createSession"
                            },
                            {
                                "l": {
                                    "en-US": "deleteSession"
                                },
                                "v": "deleteSession"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#ff007f",
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1800,
            "y": 600,
            "wires": [
                {
                    "id": "dcfeab.25a8a158",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c1968b71.0f6d08",
        "type": "subflow",
        "name": "app subflow error handler (2)",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 180,
                "y": 140,
                "wires": [
                    {
                        "id": "d8b3f883.4b3108"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "solace-app-component",
                "type": "str",
                "value": "not-configured",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": "not-configured"
                            },
                            {
                                "l": {
                                    "en-US": "app"
                                },
                                "v": "app"
                            },
                            {
                                "l": {
                                    "en-US": "devicesettings"
                                },
                                "v": "devicesettings"
                            },
                            {
                                "l": {
                                    "en-US": "codemaps"
                                },
                                "v": "codemaps"
                            },
                            {
                                "l": {
                                    "en-US": "mqttConnectionMonitor"
                                },
                                "v": "mqttConnectionMonitor"
                            },
                            {
                                "l": {
                                    "en-US": "mqttDeviceSessionControl"
                                },
                                "v": "mqttDeviceSessionControl"
                            },
                            {
                                "l": {
                                    "en-US": "about"
                                },
                                "v": "about"
                            }
                        ]
                    }
                }
            }
        ],
        "color": "#db7163",
        "icon": "node-red/alert.svg",
        "status": {
            "x": 340,
            "y": 60,
            "wires": [
                {
                    "id": "31242873.8e99c8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ba93632a.b212b",
        "type": "subflow",
        "name": "log",
        "info": "",
        "category": "solace utils",
        "in": [
            {
                "x": 60,
                "y": 420,
                "wires": [
                    {
                        "id": "65f0e574.7b208c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 420,
                "wires": [
                    {
                        "id": "94c8332b.57079",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "log.{method}@{where}",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "log-name",
                "type": "str",
                "value": "log",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select ..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "log.init(log.entry)"
                                },
                                "v": "log.init"
                            },
                            {
                                "l": {
                                    "en-US": "log.append(log.entry)"
                                },
                                "v": "log.append"
                            },
                            {
                                "l": {
                                    "en-US": "log.append.httpResponse"
                                },
                                "v": "log.append.httpResponse"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            }
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "log.entry",
                "type": "str",
                "value": "msg.payload",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#34e39a",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 1480,
            "y": 240,
            "wires": [
                {
                    "id": "d2b698bc.dacf78",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d4ac8a00.7ba108",
        "type": "subflow",
        "name": "prod cat",
        "info": "",
        "category": "solace asapio demo",
        "in": [
            {
                "x": 60,
                "y": 340,
                "wires": [
                    {
                        "id": "3e2146.890fbeba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 320,
                "wires": [
                    {
                        "id": "30f7c7ae.b1f508",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1580,
                "y": 360,
                "wires": [
                    {
                        "id": "bba22b64.48e368",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "instance-name",
                "type": "str",
                "value": "prodCat.{method}@where",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "method",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "select..."
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "init"
                                },
                                "v": "init"
                            },
                            {
                                "l": {
                                    "en-US": "get"
                                },
                                "v": "get"
                            }
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#DDAA99",
        "outputLabels": [
            "success",
            "error"
        ],
        "icon": "node-red/db.svg",
        "status": {
            "x": 1580,
            "y": 400,
            "wires": [
                {
                    "id": "58202c41.46c074",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a4f1afb7.f81b3",
        "type": "ui_tab",
        "z": "",
        "name": "Device Commands",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad119746.2f1168",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "SolaceTheme",
                "default": "#4B7930",
                "baseColor": "#72b94b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#72b94b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#9dce82",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "SAP Demo: Order System",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "37eb2781.28f6c8",
        "type": "ui_tab",
        "z": "",
        "name": "Device Config",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "64aeb854.85ddf8",
        "type": "ui_group",
        "z": "",
        "name": "Status Config",
        "tab": "37eb2781.28f6c8",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "593d368e.5a32a8",
        "type": "ui_tab",
        "z": "",
        "name": "Settings",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d6498160.c8849",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "fdcd7900.20fe98",
        "type": "ui_tab",
        "z": "",
        "name": "Device Monitor",
        "icon": "dashboard",
        "order": 6,
        "disabled": true,
        "hidden": false
    },
    {
        "id": "829376d8.fa27e8",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log",
        "tab": "fdcd7900.20fe98",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "62bac859.25e008",
        "type": "mqtt-broker",
        "z": "",
        "name": "SAP_DEMO_MQTT_BROKER",
        "broker": "$(SOLACE_SAP_DEMO_MQTT_BROKER_HOST)",
        "port": "$(SOLACE_SAP_DEMO_MQTT_BROKER_PORT)",
        "clientid": "$(SOLACE_SAP_DEMO_MQTT_CLIENT_ID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "600",
        "cleansession": false,
        "birthTopic": "iot-mgmt/connection/birth",
        "birthQos": "1",
        "birthPayload": "{\"birth\":\"birth\"}",
        "closeTopic": "iot-mgmt/connection/close",
        "closeQos": "1",
        "closePayload": "{\"close\":\"close\"}",
        "willTopic": "iot-mgmt/connection/will",
        "willQos": "1",
        "willPayload": "{\"will\":\"will\"}"
    },
    {
        "id": "8ee14afa.96dc08",
        "type": "ui_group",
        "z": "81b16b1.5822198",
        "name": "Commands",
        "tab": "a4f1afb7.f81b3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ab9ffc37.e23ab",
        "type": "ui_group",
        "z": "",
        "name": "Device Settings",
        "tab": "593d368e.5a32a8",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "c3b5e796.9436e8",
        "type": "ui_tab",
        "z": "",
        "name": "About",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a449e70c.3c11a8",
        "type": "ui_group",
        "z": "",
        "name": "SAP Demo: Order System Simulator",
        "tab": "c3b5e796.9436e8",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "f8633bdf.aeb048",
        "type": "ui_group",
        "z": "",
        "name": "Response Log",
        "tab": "a4f1afb7.f81b3",
        "order": 4,
        "disp": true,
        "width": "15",
        "collapse": true
    },
    {
        "id": "41630de2.7aac44",
        "type": "ui_tab",
        "z": "",
        "name": "Device Session",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f01c636a.94e78",
        "type": "ui_group",
        "z": "",
        "name": "Device Session Control",
        "tab": "41630de2.7aac44",
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "69ec3d8.d239dc4",
        "type": "ui_group",
        "z": "",
        "name": "Response Status",
        "tab": "37eb2781.28f6c8",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "1f069aa7.efcc35",
        "type": "ui_group",
        "z": "",
        "name": "Command Sent",
        "tab": "a4f1afb7.f81b3",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "855228ad.eacff8",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log (and scheduled ones?)",
        "tab": "a4f1afb7.f81b3",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "cf742316.07462",
        "type": "ui_group",
        "z": "",
        "name": "Buttons",
        "tab": "fdcd7900.20fe98",
        "order": 4,
        "disp": false,
        "width": "21",
        "collapse": false
    },
    {
        "id": "9e7c4b18.47fdf8",
        "type": "ui_group",
        "z": "",
        "name": "Response Msg Log",
        "tab": "fdcd7900.20fe98",
        "order": 6,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "24a3db02.501974",
        "type": "ui_group",
        "z": "",
        "name": "Stats",
        "tab": "fdcd7900.20fe98",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "19bb0d97.077502",
        "type": "ui_group",
        "z": "",
        "name": "State",
        "tab": "fdcd7900.20fe98",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "fbe688ce.9f8fb8",
        "type": "ui_group",
        "z": "",
        "name": "Telemetry Config",
        "tab": "37eb2781.28f6c8",
        "order": 6,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "ede2c094.95dbd",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "a21a4aca.ac5b38",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "979cbe9.a92274",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "663366ac.400278",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "d64a9e3e.85716",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "8557d3f1.efcac",
        "type": "ui_group",
        "z": "",
        "name": "Configuration Sent",
        "tab": "37eb2781.28f6c8",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "897e460.b057bb8",
        "type": "ui_group",
        "z": "",
        "name": "Response Status",
        "tab": "a4f1afb7.f81b3",
        "order": 3,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "5c4c88c5.f14fb8",
        "type": "ui_group",
        "z": "",
        "name": "Response Log",
        "tab": "37eb2781.28f6c8",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "c43aa043.ae983",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log (what happens with scheduled ones?)",
        "tab": "37eb2781.28f6c8",
        "order": 4,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "20ae59d9.885f86",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "1d704910.48c9e7",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "64f0f988.765608",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "bd2af989.97c0b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "6f6ee107.dfc2a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "770f1c0e.0fb904",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 12,
        "width": "14",
        "height": 1
    },
    {
        "id": "47727c58.1de504",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 15,
        "width": "14",
        "height": 1
    },
    {
        "id": "48c789a5.51c988",
        "type": "ui_group",
        "z": "",
        "name": "topic and broker configs",
        "tab": "37eb2781.28f6c8",
        "order": 7,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "fc8a0439.ab4d28",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 17,
        "width": "14",
        "height": 1
    },
    {
        "id": "cc6753eb.d0f5c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 19,
        "width": "14",
        "height": 1
    },
    {
        "id": "8fbc39ce.f454c8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 21,
        "width": "14",
        "height": 1
    },
    {
        "id": "43f5f0a4.72d2d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 23,
        "width": "14",
        "height": 1
    },
    {
        "id": "429359bf.c5c138",
        "type": "ui_group",
        "z": "",
        "name": "Last Status",
        "tab": "fdcd7900.20fe98",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "72439b11.60eaa4",
        "type": "ui_group",
        "z": "",
        "name": "Device Session State",
        "tab": "41630de2.7aac44",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "987b2ff2.bac02",
        "type": "ui_group",
        "z": "",
        "name": "Topics",
        "tab": "593d368e.5a32a8",
        "order": 2,
        "disp": true,
        "width": 14,
        "collapse": false
    },
    {
        "id": "450bb1b5.12d1b",
        "type": "ui_group",
        "z": "",
        "name": "Log",
        "tab": "41630de2.7aac44",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "b4961e39.27a81",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ab9ffc37.e23ab",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "8137b4f7.a515a8",
        "type": "ui_group",
        "z": "",
        "name": "SCRATCH",
        "tab": "",
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "298a7e90.c76a82",
        "type": "ui_group",
        "z": "",
        "name": "App Details",
        "tab": "c3b5e796.9436e8",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "b957fef7.e902d",
        "type": "ui_group",
        "z": "",
        "name": "About Solace Broker",
        "tab": "c3b5e796.9436e8",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "68e5a2a5.0d004c",
        "type": "ui_tab",
        "z": "",
        "name": "Order",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a0d570c.092769",
        "type": "ui_group",
        "z": "",
        "name": "Compose Order",
        "tab": "68e5a2a5.0d004c",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "3d41adcb.3fe412",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe63781d.693448",
        "type": "ui_group",
        "z": "",
        "name": "Order Updates",
        "tab": "68e5a2a5.0d004c",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "b1ee4438.4885c8",
        "type": "ui_group",
        "z": "",
        "name": "SAP Event Log",
        "tab": "68e5a2a5.0d004c",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "5e99e8e3.026488",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 6,
        "width": "7",
        "height": 1
    },
    {
        "id": "b2dbb49b.39f8e8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a0d570c.092769",
        "order": 4,
        "width": "7",
        "height": 1
    },
    {
        "id": "147c8e0c.6593e2",
        "type": "mqtt out",
        "z": "81b16b1.5822198",
        "name": "sendCommand",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "62bac859.25e008",
        "x": 1208,
        "y": 115,
        "wires": []
    },
    {
        "id": "dbf9bda4.2e0a2",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createCommandMessage",
        "func": "var su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = su.uuid();\n\nvar cmdMsg = {\n    timeout: msg.payload.timeout || 10,\n    numResponsesExpected: msg.payload.numResponsesExpected,\n    numStatusMsgsExpected: msg.payload.numStatusMsgsExpected || 0,\n    topic: global.get(\"config.settings.topics.deviceSubs.commandTopics[0]\"),\n    payload: {\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        command: msg.payload.command\n    }\n}\n\n\nreturn cmdMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 898,
        "y": 195,
        "wires": [
            [
                "19a72724.be4699",
                "6c5dd8a4.c31328",
                "155d3d7.84b0fc3",
                "2db18deb.c30432",
                "147c8e0c.6593e2",
                "bbddae7e.19bdf",
                "9d91d0d1.9a81e",
                "15c4170c.707c69"
            ]
        ]
    },
    {
        "id": "1c75bcee.1f80b3",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_SHORT_STATUS",
        "group": "8ee14afa.96dc08",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_SHORT_STATUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "{\"command\":\"SEND_SHORT_STATUS\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":8}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 135,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "d03b5071.8c8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_FULL_STATUS",
        "group": "8ee14afa.96dc08",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_FULL_STATUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_FULL_STATUS\",\"numResponsesExpected\":7,\"numStatusMsgsExpected\":0,\"timeout\":8}",
        "payloadType": "json",
        "topic": "",
        "x": 328,
        "y": 175,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "4f57d689.4d5c28",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SUSPEND_TELEMETRY",
        "group": "8ee14afa.96dc08",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SUSPEND_TELEMETRY",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SUSPEND_TELEMETRY\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 215,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "46b3b2b2.659eec",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "Device Commands",
        "info": "",
        "x": 298,
        "y": 55,
        "wires": []
    },
    {
        "id": "1b0efc43.99add4",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "RESUME_TELEMETRY",
        "group": "8ee14afa.96dc08",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "RESUME_TELEMETRY",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"RESUME_TELEMETRY\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 255,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "ed94eadf.67d2d8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": " SEND_ACTIVE_TELEMETRY_PARAMS",
        "group": "8ee14afa.96dc08",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": " SEND_ACTIVE_TELEMETRY_PARAMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_ACTIVE_TELEMETRY_PARAMS\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 268,
        "y": 295,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "abbd1d3a.82b25",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_ACTIVE_RUNTIME_CONFIG",
        "group": "8ee14afa.96dc08",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_ACTIVE_RUNTIME_CONFIG",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_ACTIVE_RUNTIME_CONFIG\",\"numResponsesExpected\":6,\"numStatusMsgsExpected\":0,\"timeout\":10}",
        "payloadType": "json",
        "topic": "",
        "x": 288,
        "y": 335,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "3f73c07e.e6449",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_RUNTIME_CONFIG_FILE",
        "group": "8ee14afa.96dc08",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_RUNTIME_CONFIG_FILE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_RUNTIME_CONFIG_FILE\",\"numResponsesExpected\":-1,\"numStatusMsgsExpected\":0,\"timeout\":10}",
        "payloadType": "json",
        "topic": "",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "f020e364.c7368"
            ]
        ]
    },
    {
        "id": "a444c1b4.74ebe",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "DELETE_RUNTIME_CONFIG_FILE",
        "group": "8ee14afa.96dc08",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "DELETE_RUNTIME_CONFIG_FILE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"DELETE_RUNTIME_CONFIG_FILE\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "ad794ad.be3e9b8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "PERSIST_ACTIVE_CONFIG",
        "group": "8ee14afa.96dc08",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "PERSIST_ACTIVE_CONFIG",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"PERSIST_ACTIVE_CONFIG\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "f74c92a8.77045",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "REBOOT",
        "group": "8ee14afa.96dc08",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "REBOOT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"REBOOT\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":6,\"timeout\":30}",
        "payloadType": "json",
        "topic": "",
        "x": 368,
        "y": 636,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "1e3d4002.580e9",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Version:",
        "format": "{{msg.payload.app.about.version}}",
        "layout": "row-left",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2f3d83f.dacbc8",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Date:",
        "format": "{{msg.payload.app.about.date}}",
        "layout": "row-left",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "19640171.0e9bcf",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Author:",
        "format": "{{msg.payload.app.about.author}}",
        "layout": "row-left",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "5140abbc.147dc4",
        "type": "mqtt in",
        "z": "81b16b1.5822198",
        "name": "listen2AllStatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 238,
        "y": 796,
        "wires": [
            [
                "7cca64f5.d2392c"
            ]
        ]
    },
    {
        "id": "476f0134.05379",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "add2ResponseLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar responseLog = flow.get('responseLog')|| [];\n\nresponseLog.unshift(msg);\n\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nglobal.set('state.interaction.numResponsesReceived', numResponsesReceived + 1);\n\n// store the value back\nflow.set('responseLog',responseLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = responseLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 896,
        "wires": [
            [
                "89391d0a.4e2f2"
            ]
        ]
    },
    {
        "id": "19a72724.be4699",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearResponseLog",
        "func": "\nvar responseLog = [];\n\nflow.set('responseLog', responseLog);\n\nvar newMsg={};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1218,
        "y": 255,
        "wires": [
            [
                "89391d0a.4e2f2"
            ]
        ]
    },
    {
        "id": "89391d0a.4e2f2",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "f8633bdf.aeb048",
        "name": "displayResponseLog",
        "order": 1,
        "width": "15",
        "height": "6",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1528,
        "y": 896,
        "wires": [
            []
        ]
    },
    {
        "id": "6d843544.30278c",
        "type": "inject",
        "z": "81b16b1.5822198",
        "name": "startUp",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 868,
        "y": 275,
        "wires": [
            [
                "19a72724.be4699",
                "9fb74e53.a509d",
                "6c5dd8a4.c31328",
                "57a30708.353a18",
                "9d91d0d1.9a81e"
            ]
        ]
    },
    {
        "id": "9fb74e53.a509d",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "897e460.b057bb8",
        "name": "displayResponseStatus",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n<div>success: {{msg.payload.success}}</div>\ninfo: <div>{{msg.payload.info}}</div>\n\n<ul>\n    <li>\n        status: {{msg.payload.statusCode}}\n    </li>\n    <li>\n        statusDescr: {{msg.payload.statusDescr}}\n    </li>\n    <li>\n        numberResponses: {{msg.payload.numResponses}}\n    </li>\n    <li>\n        numStatusMsgs: {{msg.payload.numStatusMsgs}}\n    </li>\n</ul>\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1538,
        "y": 776,
        "wires": [
            []
        ]
    },
    {
        "id": "5916da65.fd4ea4",
        "type": "catch",
        "z": "81b16b1.5822198",
        "name": "catchAll",
        "scope": null,
        "uncaught": false,
        "x": 638,
        "y": 496,
        "wires": [
            [
                "884ecdaa.66c99",
                "40f69973.131b58",
                "d27f361e.184888",
                "57a30708.353a18"
            ]
        ]
    },
    {
        "id": "884ecdaa.66c99",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "logError",
        "func": "\nnode.error(\"COMMAND RESPONSE PARSE ERROR:\" +\n\"\\nmessage:\" + msg.error.message + \n\"\\nsource:\" + JSON.stringify(msg.error.source) +\n\"\\ndata:\\n\" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 788,
        "y": 496,
        "wires": [
            [
                "cf12c25a.f7ccb"
            ]
        ]
    },
    {
        "id": "cf12c25a.f7ccb",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 948,
        "y": 496,
        "wires": []
    },
    {
        "id": "6c5dd8a4.c31328",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "1f069aa7.efcc35",
        "name": "displayCommandSent",
        "order": 1,
        "width": "15",
        "height": "2",
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n\n<ul>\n    <li>\n        topic: {{msg.topic}}\n    </li>\n    {{msg.payload}}\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1228,
        "y": 215,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5a4a28.2ea814",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createNoResponseMessage",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: false,\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"TIMEOUT (no response received)\",\n        numResponses: 0\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 1248,
        "y": 776,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "45eb1365.dd5c1c",
        "type": "mytimeout",
        "z": "81b16b1.5822198",
        "name": "response timer",
        "outtopic": "",
        "outsafe": "",
        "outwarning": "",
        "outunsafe": "off",
        "warning": "0",
        "timer": "",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 748,
        "y": 776,
        "wires": [
            [
                "cf7ae5d3.d7c818",
                "1e275552.7cf4fb"
            ],
            [
                "b91bacbe.d7c2f"
            ]
        ]
    },
    {
        "id": "155d3d7.84b0fc3",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "set timer",
        "func": "\nlet timeout = msg.timeout || 10;\n\nvar newMsg = {\n    payload: \"on\",\n    timeout: timeout\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 508,
        "y": 776,
        "wires": [
            [
                "45eb1365.dd5c1c",
                "eeead8.094db528"
            ]
        ]
    },
    {
        "id": "7e67b5e5.f640cc",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "cancel Timer",
        "func": "var newMsg = {\n    payload: \"cancel\"\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 518,
        "y": 816,
        "wires": [
            [
                "45eb1365.dd5c1c"
            ]
        ]
    },
    {
        "id": "b91bacbe.d7c2f",
        "type": "ui_text",
        "z": "81b16b1.5822198",
        "group": "897e460.b057bb8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "display countdown",
        "label": "countdown:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 978,
        "y": 796,
        "wires": []
    },
    {
        "id": "bbddae7e.19bdf",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "setState",
        "func": "let interaction = {\n    type: \"COMMAND\",\n    state: \"IN_PROGRESS\",\n    numResponsesReceived: 0,\n    numResponsesExpected: msg.numResponsesExpected,\n    numStatusMsgsExpected: msg.numStatusMsgsExpected,\n    numStatusMsgsReceived: 0,\n    details : {\n        commandMessage: msg\n    }\n}\n\nglobal.set('state.interaction', interaction);\n\n// set the flow state\nflow.set('exchangeId', msg.payload.exchangeId);\nflow.set('command', msg.payload.command);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1188,
        "y": 175,
        "wires": [
            []
        ]
    },
    {
        "id": "122ed8ad.b0e437",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearState",
        "func": "\n\n\nglobal.set('state.interaction.state', 'FINISHED');\n\nflow.set('exchangeId', 'undefined');\nflow.set('command', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1488,
        "y": 1076,
        "wires": [
            []
        ]
    },
    {
        "id": "2db18deb.c30432",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearResponse",
        "func": "\n\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1208,
        "y": 335,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "587b7f43.9cc33",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "TRIGGER_SAMPLE_ERROR",
        "group": "8ee14afa.96dc08",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "TRIGGER_SAMPLE_ERROR",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"TRIGGER_SAMPLE_ERROR\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":1,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 308,
        "y": 556,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "9f07cf50.b7dad",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "TRIGGER_SAMPLE_FATAL_ERROR",
        "group": "8ee14afa.96dc08",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "TRIGGER_SAMPLE_FATAL_ERROR",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"TRIGGER_SAMPLE_FATAL_ERROR\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":7,\"timeout\":60}",
        "payloadType": "json",
        "topic": "",
        "x": 278,
        "y": 596,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "888a132d.1e6fb",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 658,
        "y": 195,
        "wires": [
            [
                "44957704.d095e8"
            ],
            [
                "dbf9bda4.2e0a2"
            ]
        ]
    },
    {
        "id": "605a1480.d20a5c",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Response Timeout - No Response",
        "name": "NoResponseNotification",
        "x": 1538,
        "y": 736,
        "wires": []
    },
    {
        "id": "fb3747b4.101d28",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createNoResponseNotification",
        "func": "\nlet state = global.get('state');\n\nlet displayMessage = \"command\";\ntry {\n    displayMessage = \"command: \" + state.interaction.details.commandMessage.payload.command;\n} catch (e) {}\n\nvar newMsg = {\n    payload: displayMessage\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1258,
        "y": 736,
        "wires": [
            [
                "605a1480.d20a5c"
            ]
        ]
    },
    {
        "id": "3a05b520.2e799a",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "filterByExchangeId",
        "property": "payload.exchangeId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "exchangeId",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 478,
        "y": 916,
        "wires": [
            [
                "476f0134.05379"
            ],
            [
                "94f4746c.6a2878"
            ]
        ]
    },
    {
        "id": "cf7ae5d3.d7c818",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "noResponses?",
        "property": "state.interaction.numResponsesReceived",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 968,
        "y": 756,
        "wires": [
            [
                "fb3747b4.101d28",
                "4e5a4a28.2ea814",
                "122ed8ad.b0e437"
            ]
        ]
    },
    {
        "id": "fbc3daaa.dd95e8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "UNKNOWN_COMMAND",
        "group": "8ee14afa.96dc08",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "UNKNOWN_COMMAND",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"UNKNOWN_COMMAND\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 676,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "94f4746c.6a2878",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "add2StatusMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar statusMsgLog = flow.get('statusMsgLog')|| [];\n\nstatusMsgLog.push(msg);\nif(statusMsgLog.length > 20) {\n    statusMsgLog.shift();\n    statusMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('statusMsgLog',statusMsgLog);\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nglobal.set('state.interaction.numStatusMsgsReceived', numStatusMsgsReceived + 1);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = statusMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 936,
        "wires": [
            [
                "98430f1e.c7ce4"
            ]
        ]
    },
    {
        "id": "98430f1e.c7ce4",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "855228ad.eacff8",
        "name": "displayStatusMsgLog",
        "order": 1,
        "width": "15",
        "height": "15",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1528,
        "y": 936,
        "wires": [
            []
        ]
    },
    {
        "id": "57a30708.353a18",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearState",
        "func": "\nglobal.set('state.interaction.state', 'FINISHED');\n// set the flow state\nflow.set('exchangeId', 'undefined');\nflow.set('command', undefined);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 968,
        "y": 395,
        "wires": [
            []
        ]
    },
    {
        "id": "9d91d0d1.9a81e",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearStatusMsgLog",
        "func": "\nvar statusMsgLog = [];\n\nflow.set('statusMsgLog',statusMsgLog);\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1218,
        "y": 295,
        "wires": [
            [
                "98430f1e.c7ce4"
            ]
        ]
    },
    {
        "id": "39898fe.e15667",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check UNKNOWN_COMMAND",
        "func": "\n// read the code maps\n/*\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n*/\n\nmsg.payload.success = (!msg.payload.success) && (msg.payload.firstResponse.statusCode === 4);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1096,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "873e5fcf.f5454",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check TRIGGER_SAMPLE_ERROR",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the sample error\nlet statusMsgLog = flow.get('statusMsgLog');\nif(statusMsgLog === undefined || statusMsgLog.length === 0) {\n    msg.payload.success = false;\n    msg.payload.info = \"no sample error message received\";\n    return msg;\n}\n\nlet lastStatusMsg = statusMsgLog[0].payload;\n    \nlet success = (lastStatusMsg.statusCode === 2);\nsuccess = success && (lastStatusMsg.descrCode === 21);\nsuccess = success && (lastStatusMsg.items[0].appError.code === 245);\nsuccess = success && (lastStatusMsg.items[0].appError.moduleId === 64);\nsuccess = success && (lastStatusMsg.items[0].appError.severityId === 2);\nsuccess = success && (lastStatusMsg.items[0].appError.packageId === 55);\n\nlet userMessage = 'ok';\nif(!success) {\n    msg.payload.success = false;\n    userMessage = \"sample error message codes not as expected\";\n}\n\n// now decode the appError\n        \nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(lastStatusMsg.statusCode),\n    statusDescr: statusMsgDescrCodeMap.get(lastStatusMsg.descrCode),\n    error: {\n        module: appModuleIdMap.get(lastStatusMsg.items[0].appError.moduleId),\n        code: retcodeMap.get(lastStatusMsg.items[0].appError.code)\n    }\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 648,
        "y": 1136,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "40f69973.131b58",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createInternalExceptionMsg",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: '?',\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"INTERNAL EXCEPTION\",\n        numResponses: 0,\n        info: msg\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 848,
        "y": 536,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "c1416883.a8a308",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 238,
        "y": 916,
        "wires": [
            [
                "3a05b520.2e799a"
            ]
        ]
    },
    {
        "id": "7cca64f5.d2392c",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 228,
        "y": 856,
        "wires": [
            [
                "31305bb5.fad4d4"
            ]
        ]
    },
    {
        "id": "eeead8.094db528",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "timeout",
        "targetType": "msg",
        "x": 778,
        "y": 656,
        "wires": []
    },
    {
        "id": "89e94499.c65988",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "analyze the responses & status messages",
        "info": "",
        "x": 308,
        "y": 1056,
        "wires": []
    },
    {
        "id": "1e275552.7cf4fb",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "genericCheck",
        "func": "\nlet responseLog = flow.get('responseLog');\nif(responseLog === undefined || responseLog.length === 0) return;\n\n// read the code maps\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the first response\nlet firstResponse = responseLog[0].payload;\nlet statusCodeStr = statusMsgStatusCodeMap.get(firstResponse.statusCode);\n\nlet statusDescrStr = \"-\";\nif(firstResponse.descrCode !== 0) {\n    statusDescrStr = statusMsgDescrCodeMap.get(firstResponse.descrCode);\n}\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nlet numResponsesExpected = global.get('state.interaction.numResponsesExpected') || 0;\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nlet numStatusMsgsExpected = global.get('state.interaction.numStatusMsgsExpected') || 0;\n\nlet success = (firstResponse.statusCode === 3);\nif(numResponsesExpected > -1) success = success && (numResponsesReceived === numResponsesExpected);\nsuccess = success && (numStatusMsgsReceived === numStatusMsgsExpected);\n\nlet newMsg = {\n    payload : {\n        success: success,\n        statusCode: statusCodeStr,\n        statusDescr: statusDescrStr,\n        numResponses: numResponsesReceived + \" of \" + numResponsesExpected,\n        numStatusMsgs: numStatusMsgsReceived + \" of \" + numStatusMsgsExpected,\n        firstResponse: firstResponse,\n        responseLog: responseLog\n    }\n}\n\nreturn newMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 228,
        "y": 1096,
        "wires": [
            [
                "67f75709.021e58",
                "c7dc826d.9d9b1"
            ]
        ]
    },
    {
        "id": "12b851a0.c5dede",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "passThrough",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1118,
        "y": 1276,
        "wires": [
            [
                "122ed8ad.b0e437",
                "9fb74e53.a509d",
                "6e79050e.80f68c"
            ]
        ]
    },
    {
        "id": "67f75709.021e58",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "switchCommandAnalysis",
        "property": "command",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "UNKNOWN_COMMAND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TRIGGER_SAMPLE_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_ACTIVE_TELEMETRY_PARAMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_VERSION_INFO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_SHORT_STATUS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_FULL_STATUS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_ACTIVE_RUNTIME_CONFIG",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_RUNTIME_CONFIG_FILE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE_RUNTIME_CONFIG_FILE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PERSIST_ACTIVE_CONFIG",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REBOOT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TRIGGER_SAMPLE_FATAL_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RESUME_TELEMETRY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUSPEND_TELEMETRY",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 15,
        "x": 250,
        "y": 1240,
        "wires": [
            [
                "39898fe.e15667"
            ],
            [
                "873e5fcf.f5454"
            ],
            [
                "90feb992.0483e8"
            ],
            [
                "ae7ca844.480128"
            ],
            [
                "f66a27db.d531c8"
            ],
            [
                "35adbc4d.f972b4"
            ],
            [
                "ab980558.382ba8"
            ],
            [
                "81fa40bd.237a5"
            ],
            [
                "4beb5fdb.f7f37"
            ],
            [
                "a2b9b305.5c967"
            ],
            [
                "db4190ce.87041"
            ],
            [
                "f49bfd6c.1e0f9"
            ],
            [
                "ec3074b.960b388"
            ],
            [
                "4f50e35b.43c93c"
            ],
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "90feb992.0483e8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_ACTIVE_TELEMETRY_PARAMS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the telemetry params\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 22);\n\n//activeTelemetryParams\nlet activeTelemetryRTParams = secondResponse.items[0].activeTelemetryRTParams;\nsuccess = success && (activeTelemetryRTParams !== undefined);\n// todo: test the schema of activeTelemetryRTParams\n\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"no telemetry params received\";\n}\n\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusMsgDescrCodeMap.get(secondResponse.descrCode),\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 688,
        "y": 1176,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "c7dc826d.9d9b1",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 588,
        "y": 1056,
        "wires": []
    },
    {
        "id": "dd36c2f0.19aec",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_VERSION_INFO",
        "group": "8ee14afa.96dc08",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_VERSION_INFO",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "{\"command\":\"SEND_VERSION_INFO\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 95,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "62063d0c.efa134",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "top right",
        "displayTime": "15",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Internal Exception",
        "name": "InternalErrorNotification",
        "x": 918,
        "y": 576,
        "wires": []
    },
    {
        "id": "d27f361e.184888",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createMsg",
        "func": "\nmsg.payload = \"\\nmessage:\" + msg.error.message + \n\"\\nsource:\" + JSON.stringify(msg.error.source) +\n\"\\ndata:\\n\" + JSON.stringify(msg.payload);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 576,
        "wires": [
            [
                "62063d0c.efa134"
            ]
        ]
    },
    {
        "id": "ae7ca844.480128",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_VERSION_INFO",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the versions\nlet compatibleVersion = global.get('config.about.solaceXDKAppVersion');\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 52);\nlet statusDescr = statusMsgDescrCodeMap.get(secondResponse.descrCode);\nsuccess = success && (statusDescr !== undefined);\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"statusDescription not mapped\";\n} else {\n    //versions\n    let versions = secondResponse.items[0].versions;\n    success = success && (versions !== undefined);\n    if(!success) {\n        userMessage = \"no versions received\";\n    }\n    // todo: test the schema of versions\n\n    // todo: test the actual versions\n    success = success &&\n                (versions.XDK_Version_Major === 3) && \n                (versions.XDK_Version_Minor === 6) && \n                (versions.XDK_Version_Patch === 0) && \n                (versions.XDK_App_Version === 1) && \n                (versions.Solace_App_Version_Major === compatibleVersion.major) && \n                (versions.Solace_App_Version_Minor === compatibleVersion.minor) && \n                (versions.Solace_App_Version_Patch === compatibleVersion.patch);\n    if(!success) {\n        let versionStr = compatibleVersion.major + '.' + compatibleVersion.minor + '.' + compatibleVersion.patch;\n        userMessage = \"wrong versions, expecting XDK:3.6.0 + 1; Solace XDK App: \" + versionStr;\n    }            \n}\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1216,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f66a27db.d531c8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_SHORT_STATUS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the short status\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 23);\nlet statusDescr = statusMsgDescrCodeMap.get(secondResponse.descrCode);\nsuccess = success && (statusDescr !== undefined);\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"statusDescription not mapped\";\n} else {\n    // check the schema of items array\n    let stats = secondResponse.items[0].stats;\n    success = success && (stats !== undefined);\n    if(!success) {\n        userMessage = \"no stats received\";\n    }\n    let activeTelemetryRTParams = secondResponse.items[1].activeTelemetryRTParams;\n    success = success && (activeTelemetryRTParams !== undefined);\n    if(!success) {\n        userMessage = \"no activeTelemetryRTParams received\";\n    }\n}\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1256,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "35adbc4d.f972b4",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_FULL_STATUS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check schemas of the 6 responses...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 628,
        "y": 1296,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "ab980558.382ba8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_ACTIVE_RUNTIME_CONFIG",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n\n// expecting array of 5 responses\nlet userMessage = 'ok';\nlet success = true;\nlet statusDescr = '';\nmsg.payload.info = {};\n\n// targetTelemetryConfig\nlet targetTelemetryConfigResponse = msg.payload.responseLog[1].payload;\nsuccess = success && (targetTelemetryConfigResponse.statusCode === 0) && (targetTelemetryConfigResponse.descrCode === 57);\nif(!success) userMessage = \"targetTelemetryConfig: wrong statusCode or statusDescrCode\";\nelse {\n    statusDescr = statusMsgDescrCodeMap.get(targetTelemetryConfigResponse.descrCode);\n    success = success && (statusDescr !== undefined);\n    if(!success) {\n        userMessage = \"targetTelemetryConfig: statusDescription not mapped\";\n    } else {\n        msg.payload.info.targetTelemetryConfig = {\n            status: statusMsgStatusCodeMap.get(targetTelemetryConfigResponse.statusCode),\n            statusDescr: statusDescr\n        }\n        let targetTelemetryConfig = targetTelemetryConfigResponse.items[0];\n        // todo: check the schema\n    \n    }\n}\n// statusConfig\nif(success) {\n    let statusConfigResponse = msg.payload.responseLog[2].payload;\n    success = success && (statusConfigResponse.statusCode === 0) && (statusConfigResponse.descrCode === 56);\n    if(!success) userMessage = \"statusConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(statusConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"statusConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.statusConfig = {\n                status: statusMsgStatusCodeMap.get(statusConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let statusConfig = statusConfigResponse.items[0];\n            // todo: check the schema\n        }\n    }    \n}\n\n// mqttBrokerConnectionConfig\nif(success) {\n    let mqttBrokerConnectionConfigResponse = msg.payload.responseLog[3].payload;\n    success = success && (mqttBrokerConnectionConfigResponse.statusCode === 0) && (mqttBrokerConnectionConfigResponse.descrCode === 55);\n    if(!success) userMessage = \"mqttBrokerConnectionConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(mqttBrokerConnectionConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"mqttBrokerConnectionConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.mqttBrokerConnectionConfig = {\n                status: statusMsgStatusCodeMap.get(mqttBrokerConnectionConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let mqttBrokerConnectionConfig = mqttBrokerConnectionConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }    \n}\n// topicConfig\nif(success) {\n    let topicConfigResponse = msg.payload.responseLog[4].payload;\n    success = success && (topicConfigResponse.statusCode === 0) && (topicConfigResponse.descrCode === 54);\n    if(!success) userMessage = \"topicConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(topicConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"topicConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.topicConfig = {\n                status: statusMsgStatusCodeMap.get(topicConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n    \n            let topicConfig = topicConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }\n}\n\n// header\nif(success) {\n    let headerResponse = msg.payload.responseLog[5].payload;\n    success = success && (headerResponse.statusCode === 0) && (headerResponse.descrCode === 53);\n    if(!success) userMessage = \"header: wrong statusCode or statusDescrCode\";\n    else {\n        let statusDescr = statusMsgDescrCodeMap.get(headerResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"header: statusDescription not mapped\";\n        } else {\n            msg.payload.info.header = {\n                status: statusMsgStatusCodeMap.get(headerResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            // no items\n            //let general = generalResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }    \n}\n\nmsg.payload.success = success;\nmsg.payload.info.message = userMessage;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 668,
        "y": 1336,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "81fa40bd.237a5",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_RUNTIME_CONFIG_FILE",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// depending on device state, expecting 5 responses or 1\nlet deviceState = global.get('state.device');\nlet isRuntimeConfigFileExists = false;\nlet isRuntimeConfigFileExists_isKnown = false;\nif(Object.keys(deviceState).length > 0) {\n    if(deviceState.runtimeConfig !== undefined) {\n        if(deviceState.runtimeConfig.fileExists !== undefined) {\n            isRuntimeConfigFileExists = deviceState.runtimeConfig.fileExists; \n            isRuntimeConfigFileExists_isKnown = true;\n        }\n        \n    }\n}\n\nlet userMessage = 'ok';\nlet success = true;\nlet statusDescr = '';\nmsg.payload.info = {};\n\nif(!isRuntimeConfigFileExists_isKnown) {\n    // check from response\n    let numResponses = msg.payload.responseLog.length;\n    if(numResponses === 2) isRuntimeConfigFileExists = false;\n    else if(numResponses === 6) isRuntimeConfigFileExists = true;\n} \n\nif(!isRuntimeConfigFileExists) {\n    \n    let response = msg.payload.responseLog[1].payload;\n    success = success && (response.statusCode === 0) && (response.descrCode === 13);\n    if(!success) userMessage = \"response: wrong statusCode or statusDescrCode, expected 0 and 13\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(response.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"response: statusDescription not mapped\";\n        } else {\n            userMessage = \"ok - no runtime config file exists\";\n        }\n    }\n    \n} else {\n    // expecting array of 5 responses\n    \n    // targetTelemetryConfig\n    let targetTelemetryConfigResponse = msg.payload.responseLog[1].payload;\n    success = success && (targetTelemetryConfigResponse.statusCode === 0) && (targetTelemetryConfigResponse.descrCode === 20);\n    if(!success) userMessage = \"targetTelemetryConfig: wrong statusCode or statusDescrCode, expected 0 and 20\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(targetTelemetryConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"targetTelemetryConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.targetTelemetryConfig = {\n                status: statusMsgStatusCodeMap.get(targetTelemetryConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let targetTelemetryConfig = targetTelemetryConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }\n    // statusConfig\n    if(success) {\n        let statusConfigResponse = msg.payload.responseLog[2].payload;\n        success = success && (statusConfigResponse.statusCode === 0) && (statusConfigResponse.descrCode === 19);\n        if(!success) userMessage = \"statusConfig: wrong statusCode or statusDescrCode, expected 0 and 19\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(statusConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"statusConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.statusConfig = {\n                    status: statusMsgStatusCodeMap.get(statusConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                let statusConfig = statusConfigResponse.items[0];\n                // todo: check the schema\n            }\n        }    \n    }\n    \n    // mqttBrokerConnectionConfig\n    if(success) {\n        let mqttBrokerConnectionConfigResponse = msg.payload.responseLog[3].payload;\n        success = success && (mqttBrokerConnectionConfigResponse.statusCode === 0) && (mqttBrokerConnectionConfigResponse.descrCode === 18);\n        if(!success) userMessage = \"mqttBrokerConnectionConfig: wrong statusCode or statusDescrCode, expected 0 and 18\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(mqttBrokerConnectionConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"mqttBrokerConnectionConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.mqttBrokerConnectionConfig = {\n                    status: statusMsgStatusCodeMap.get(mqttBrokerConnectionConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                let mqttBrokerConnectionConfig = mqttBrokerConnectionConfigResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }    \n    }\n    // topicConfig\n    if(success) {\n        let topicConfigResponse = msg.payload.responseLog[4].payload;\n        success = success && (topicConfigResponse.statusCode === 0) && (topicConfigResponse.descrCode === 17);\n        if(!success) userMessage = \"topicConfig: wrong statusCode or statusDescrCode, expected 0 and 17\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(topicConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"topicConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.topicConfig = {\n                    status: statusMsgStatusCodeMap.get(topicConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n        \n                let topicConfig = topicConfigResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }\n    }\n    \n    // header\n    if(success) {\n        let headerResponse = msg.payload.responseLog[5].payload;\n        success = success && (headerResponse.statusCode === 0) && (headerResponse.descrCode === 14);\n        if(!success) userMessage = \"header: wrong statusCode or statusDescrCode, expected 0 and 14\";\n        else {\n            let statusDescr = statusMsgDescrCodeMap.get(headerResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"header: statusDescription not mapped\";\n            } else {\n                msg.payload.info.header = {\n                    status: statusMsgStatusCodeMap.get(headerResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                // no items\n                //let general = generalResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }    \n    }\n}\n\nmsg.payload.success = success;\nmsg.payload.info.message = userMessage;\n\n// include updated device state\nif(success) {\n    msg.updatedDeviceState = {\n        runtimeConfig: {\n            fileExists: isRuntimeConfigFileExists\n        }\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 658,
        "y": 1376,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f020e364.c7368",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "adjust4DeviceState-SEND_RUNTIME_CONFIG_FILE",
        "func": "\nlet deviceState = global.get('state.device') || {};\nlet isRuntimeConfigStateKnown = false;\nlet fileExists = false;\n\nif(Object.keys(deviceState).length > 0) {\n    let runtimeConfig = deviceState.runtimeConfig;\n    if(runtimeConfig !== undefined) {\n        fileExists = runtimeConfig.fileExists;\n        if(fileExists !== undefined) {\n            isRuntimeConfigStateKnown = true;\n        }\n    }\n}\n\nif(isRuntimeConfigStateKnown) {\n    if(fileExists) msg.payload.numResponsesExpected = 6;\n    else msg.payload.numResponsesExpected = 2;\n} else {\n    msg.payload.numResponsesExpected = -1;   \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 420,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "6e79050e.80f68c",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "updateDeviceState",
        "func": "\nif(msg.updatedDeviceState !== undefined) {\n    let deviceId = global.get('config.settings.deviceId');\n    let version = global.get('config.about.version');\n    let newMsg = {\n        topic: 'iot-mgmt/device-state/update/' + version + '/' + deviceId,\n        payload: {\n            updatedDeviceState: msg.updatedDeviceState\n        }\n    }   \n    return newMsg;\n}\n\n\n\n// get device state and add whatever keys are in the object\n\n/*\n    if(deviceState.runtimeConfig === undefined) deviceState.runtimeConfig = {};\n    deviceState.runtimeConfig.fileExists = isRuntimeConfigFileExists;\n    global.set('state.device', deviceState);\n*/",
        "outputs": 1,
        "noerr": 0,
        "x": 1390,
        "y": 1280,
        "wires": [
            [
                "883b609e.0c02e"
            ]
        ]
    },
    {
        "id": "883b609e.0c02e",
        "type": "mqtt out",
        "z": "81b16b1.5822198",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1570,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4beb5fdb.f7f37",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check DELETE_RUNTIME_CONFIG_FILE",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    runtimeConfig: {\n        fileExists: false\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 665,
        "y": 1420,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "a2b9b305.5c967",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check PERSIST_ACTIVE_CONFIG",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    runtimeConfig: {\n        fileExists: true\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "db4190ce.87041",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check REBOOT",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check the boot status schemas of the 6 status messages ...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 1500,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f49bfd6c.1e0f9",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check TRIGGER_SAMPLE_FATAL_ERROR",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check the fatal error + boot status schemas of the 6 status messages ...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 1540,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "4f50e35b.43c93c",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SUSPEND_TELEMETRY",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    telemetry: {\n        on: false\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 1580,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "ec3074b.960b388",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check RESUME_TELEMETRY",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    telemetry: {\n        on: true\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 1620,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "6a62b965.9c71a8",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "status config",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "8b222d94.89fb6",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "telemetry config",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "65a8b8ce.d413d8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "sendPeriodicStatus",
        "label": "send periodic status?",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "true",
                "value": true,
                "type": "bool"
            },
            {
                "label": "false",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 502,
        "y": 160,
        "wires": [
            [
                "c083f7a6.b7c1a8"
            ]
        ]
    },
    {
        "id": "98768ede.eb98a",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save",
        "group": "64aeb854.85ddf8",
        "order": 11,
        "width": "10",
        "height": "1",
        "passthru": false,
        "label": "save changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "SAVE",
        "payloadType": "str",
        "topic": "",
        "x": 910,
        "y": 220,
        "wires": [
            [
                "4790381c.a8b958"
            ]
        ]
    },
    {
        "id": "5f47e5e8.27a57c",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save & send",
        "group": "64aeb854.85ddf8",
        "order": 12,
        "width": "11",
        "height": "1",
        "passthru": false,
        "label": "save & send configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "SEND",
        "payloadType": "str",
        "topic": "",
        "x": 930,
        "y": 260,
        "wires": [
            [
                "4790381c.a8b958"
            ]
        ]
    },
    {
        "id": "9516220a.46ccc",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "compose-save",
        "func": "\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig');\n/*            \n            \"statusConfig\": {\n                \"sendPeriodicStatus\": true,\n                \"periodicStatusType\": \"FULL_STATUS\",\n                \"periodicStatusIntervalSecs\": 300,\n                \"qos\": 0,\n                \"apply\": \"TRANSIENT\"\n            }\n*/\n\nvar solaceUtils = global.get(\"solaceUtils\");\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = solaceUtils.uuid();\n\nvar statusConfigMsg = {\n    topic: global.get(\"config.settings.topics.deviceSubs.updateConfigTopics[0]\"),\n    payload: {\n        type: \"status\",\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        tags: {\n            removeMe: 'soon'\n        }\n        /*            \n        {\n          \"tags\": {\n            \"mode\": \"status\"\n          },\n        \n        }\n        */\n    }\n}\n\nvar _merge = global.get(\"_merge\");\n_merge(statusConfigMsg.payload, statusConfig);\n\n//save for sending\nflow.set('configMsg', statusConfigMsg);\n\n\nreturn statusConfigMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "81725acc.bda2a8"
            ]
        ]
    },
    {
        "id": "86b2b873.a9acc8",
        "type": "mqtt out",
        "z": "732e6ace.9ebb04",
        "name": "send",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "62bac859.25e008",
        "x": 2143,
        "y": 600,
        "wires": []
    },
    {
        "id": "4790381c.a8b958",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "func": "\nlet button = msg.payload;\n\nlet update = flow.get('userEntries.deviceConfig.statusConfig');\n\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig') || {};\n\n\nvar _merge = global.get(\"_merge\");\n_merge(statusConfig, update);\n\nglobal.set('userEntries.deviceConfig.statusConfig', statusConfig );\n\nif(button === 'SEND') {\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "9516220a.46ccc"
            ]
        ]
    },
    {
        "id": "1d85d36b.3a852d",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "start",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "e37dd300.e7e5d"
            ]
        ]
    },
    {
        "id": "10bcaacc.6cef15",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.sendPeriodicStatus",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 160,
        "wires": [
            [
                "65a8b8ce.d413d8"
            ]
        ]
    },
    {
        "id": "c083f7a6.b7c1a8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.sendPeriodicStatus",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b53e1b0.017cbe8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "periodicStatusType",
        "label": "periodicStatusType",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "FULL_STATUS",
                "value": "FULL_STATUS",
                "type": "str"
            },
            {
                "label": "SHORT_STATUS",
                "value": "SHORT_STATUS",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 502,
        "y": 200,
        "wires": [
            [
                "15cd8f99.b81c9"
            ]
        ]
    },
    {
        "id": "dbb1a0cb.3247a",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.periodicStatusType",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 200,
        "wires": [
            [
                "b53e1b0.017cbe8"
            ]
        ]
    },
    {
        "id": "15cd8f99.b81c9",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.periodicStatusType",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1ea8be.bfd998",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.periodicStatusIntervalSecs",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 240,
        "wires": [
            [
                "24f68809.54fc48"
            ]
        ]
    },
    {
        "id": "79853fb9.b1baf",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.periodicStatusIntervalSecs",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "24f68809.54fc48",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "periodicStatusIntervalSecs",
        "label": "periodicStatusIntervalSecs",
        "tooltip": "",
        "group": "64aeb854.85ddf8",
        "order": 3,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} seconds",
        "min": "60",
        "max": "300",
        "step": "30",
        "x": 532,
        "y": 240,
        "wires": [
            [
                "79853fb9.b1baf"
            ]
        ]
    },
    {
        "id": "17849466.9d9d6c",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "qos",
        "label": "qos",
        "tooltip": "",
        "group": "64aeb854.85ddf8",
        "order": 7,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "0",
        "max": "1",
        "step": "1",
        "x": 462,
        "y": 280,
        "wires": [
            [
                "17b83ba2.50ca84"
            ]
        ]
    },
    {
        "id": "a41bdc8f.b3456",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.qos",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 280,
        "wires": [
            [
                "17849466.9d9d6c"
            ]
        ]
    },
    {
        "id": "17b83ba2.50ca84",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.qos",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "402d1028.37bef",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "apply",
        "label": "apply",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 9,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "TRANSIENT",
                "value": "TRANSIENT",
                "type": "str"
            },
            {
                "label": "PERSISTENT",
                "value": "PERSISTENT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 462,
        "y": 320,
        "wires": [
            [
                "5a3c5e2d.461eb"
            ]
        ]
    },
    {
        "id": "969ff15a.b242d",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.apply",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 320,
        "wires": [
            [
                "402d1028.37bef"
            ]
        ]
    },
    {
        "id": "5a3c5e2d.461eb",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.apply",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "81725acc.bda2a8",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1683,
        "y": 540,
        "wires": [
            [
                "f5944fb6.85d36"
            ],
            [
                "9beb31fe.8a0b8",
                "25e653d8.d0975c",
                "3ceff997.4a3136",
                "605a6222.486b3c"
            ]
        ]
    },
    {
        "id": "9beb31fe.8a0b8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "setState",
        "func": "\nlet configMsg = flow.get('configMsg');\n\nlet interaction = {\n    type: \"CONFIGURATION\",\n    state: \"IN_PROGRESS\",\n    numResponsesReceived: 0,\n    numResponsesExpected: 1,\n    numStatusMsgsExpected: 0,\n    numStatusMsgsReceived: 0,\n    details : {\n        configurationMessage: configMsg\n    }\n}\n\nglobal.set('state.interaction', interaction);\n\n// set the flow state\nflow.set('exchangeId', configMsg.payload.exchangeId);\nflow.set('configType', configMsg.payload.type);\n\nreturn configMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1893,
        "y": 560,
        "wires": [
            [
                "4d053857.e72208",
                "86b2b873.a9acc8",
                "730b475c.358258"
            ]
        ]
    },
    {
        "id": "4d053857.e72208",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "8557d3f1.efcac",
        "name": "displayConfigSent",
        "order": 5,
        "width": "21",
        "height": "2",
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n\n{{msg.topic}}\n<div>\n    <pre>{{msg.payload | json}}</pre>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2183,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "25e653d8.d0975c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearResponseStatus",
        "func": "\n\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1933,
        "y": 640,
        "wires": [
            [
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "88dfae80.12b9f",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "69ec3d8.d239dc4",
        "name": "displayResponseStatus",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n<div>success: {{msg.payload.success}}</div>\ninfo: <div>{{msg.payload.info}}</div>\n\n<ul>\n    <li>\n        status: {{msg.payload.statusCode}}\n    </li>\n    <li>\n        statusDescr: {{msg.payload.statusDescr}}\n    </li>\n    <li>\n        numResponses: {{msg.payload.numResponses}}\n    </li>\n    <li>\n        numStatusMsgs: {{msg.payload.numStatusMsgs}}\n    </li>\n</ul>\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2703,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3ceff997.4a3136",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "set timer",
        "func": "\nlet timeout = msg.timeout || 10;\n\nvar newMsg = {\n    payload: \"on\",\n    timeout: timeout\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1893,
        "y": 760,
        "wires": [
            [
                "3c1bb89c.1bdd08"
            ]
        ]
    },
    {
        "id": "3c1bb89c.1bdd08",
        "type": "mytimeout",
        "z": "732e6ace.9ebb04",
        "name": "response timer",
        "outtopic": "",
        "outsafe": "",
        "outwarning": "",
        "outunsafe": "off",
        "warning": "0",
        "timer": "",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 1893,
        "y": 820,
        "wires": [
            [
                "6478a0a1.bde17",
                "8419fdc.2199c"
            ],
            [
                "1276f19d.36d93e"
            ]
        ]
    },
    {
        "id": "1276f19d.36d93e",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "69ec3d8.d239dc4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "display countdown",
        "label": "countdown:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 2143,
        "y": 860,
        "wires": []
    },
    {
        "id": "6478a0a1.bde17",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "noResponses?",
        "property": "state.interaction.numResponsesReceived",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2133,
        "y": 780,
        "wires": [
            [
                "a373dbf1.761338",
                "9ad8cb10.f55ef8",
                "9fda73a8.38158"
            ]
        ]
    },
    {
        "id": "a373dbf1.761338",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "createNoResponseNotification",
        "func": "\nlet state = global.get('state');\n\nlet displayMessage = \"configuration\";\ntry {\n    displayMessage = \"config: \" + state.interaction.details.configurationMessage.payload.type;\n} catch (e) {}\n\nvar newMsg = {\n    payload: displayMessage\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2423,
        "y": 780,
        "wires": [
            [
                "b35c8a7f.efb418"
            ]
        ]
    },
    {
        "id": "b35c8a7f.efb418",
        "type": "ui_toast",
        "z": "732e6ace.9ebb04",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Response Timeout - No Response",
        "name": "NoResponseNotification",
        "x": 2703,
        "y": 780,
        "wires": []
    },
    {
        "id": "9ad8cb10.f55ef8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "createNoResponseMessage",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: false,\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"TIMEOUT (no response received)\",\n        numResponses: 0\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 2413,
        "y": 740,
        "wires": [
            [
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "9fda73a8.38158",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\n\n\nglobal.set('state.interaction.state', 'FINISHED');\n\nflow.set('exchangeId', 'undefined');\nflow.set('configType', undefined);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2353,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e0f7c087.46ed1",
        "type": "mqtt in",
        "z": "732e6ace.9ebb04",
        "name": "listen2AllStatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 1743,
        "y": 980,
        "wires": [
            [
                "4c6626ab.5bb388"
            ]
        ]
    },
    {
        "id": "4c6626ab.5bb388",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1733,
        "y": 1040,
        "wires": [
            [
                "7011700a.57035"
            ]
        ]
    },
    {
        "id": "47c3600d.d6245",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1743,
        "y": 1120,
        "wires": [
            [
                "ea43a287.d62d9"
            ]
        ]
    },
    {
        "id": "ea43a287.d62d9",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "filterByExchangeId",
        "property": "payload.exchangeId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "exchangeId",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1743,
        "y": 1160,
        "wires": [
            [
                "7c4548ce.81a898"
            ],
            [
                "92603ba9.14a3e8"
            ]
        ]
    },
    {
        "id": "7c4548ce.81a898",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "add2ResponseLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar responseLog = flow.get('responseLog')|| [];\n\nresponseLog.unshift(msg);\n\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nglobal.set('state.interaction.numResponsesReceived', numResponsesReceived + 1);\n\n// store the value back\nflow.set('responseLog',responseLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = responseLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2003,
        "y": 1160,
        "wires": [
            [
                "366779d1.ff2316"
            ]
        ]
    },
    {
        "id": "366779d1.ff2316",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "5c4c88c5.f14fb8",
        "name": "displayResponseLog",
        "order": 1,
        "width": "21",
        "height": "2",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2233,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "92603ba9.14a3e8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "add2StatusMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar statusMsgLog = flow.get('statusMsgLog')|| [];\n\nstatusMsgLog.push(msg);\nif(statusMsgLog.length > 20) {\n    statusMsgLog.shift();\n    statusMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('statusMsgLog',statusMsgLog);\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nglobal.set('state.interaction.numStatusMsgsReceived', numStatusMsgsReceived + 1);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = statusMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2003,
        "y": 1200,
        "wires": [
            [
                "a3f6bdde.cead3"
            ]
        ]
    },
    {
        "id": "8419fdc.2199c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "genericCheck",
        "func": "\nlet responseLog = flow.get('responseLog');\nif(responseLog === undefined || responseLog.length === 0) return;\n\n// read the code maps\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the first response\nlet firstResponse = responseLog[0].payload;\nlet statusCodeStr = statusMsgStatusCodeMap.get(firstResponse.statusCode);\n\nlet statusDescrStr = \"-\";\nlet info = '';\nif(firstResponse.descrCode !== 0) {\n    statusDescrStr = statusMsgDescrCodeMap.get(firstResponse.descrCode);\n    info = firstResponse.details;\n}\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nlet numResponsesExpected = global.get('state.interaction.numResponsesExpected') || 0;\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nlet numStatusMsgsExpected = global.get('state.interaction.numStatusMsgsExpected') || 0;\n\nlet success = (firstResponse.statusCode === 3);\nif(numResponsesExpected > -1) success = success && (numResponsesReceived === numResponsesExpected);\nsuccess = success && (numStatusMsgsReceived === numStatusMsgsExpected);\n\nlet newMsg = {\n    payload : {\n        success: success,\n        info: info,\n        statusCode: statusCodeStr,\n        statusDescr: statusDescrStr,\n        numResponses: numResponsesReceived + \" of \" + numResponsesExpected,\n        numStatusMsgs: numStatusMsgsReceived + \" of \" + numStatusMsgsExpected,\n        firstResponse: firstResponse,\n        responseLog: responseLog\n    }\n}\n\nreturn newMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2133,
        "y": 820,
        "wires": [
            [
                "9fda73a8.38158",
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "605a6222.486b3c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearResponseAndStatusLogs",
        "func": "\nvar emptyLog = [];\n\nflow.set('responseLog', emptyLog);\nflow.set('statusMsgLog', emptyLog);\n\nvar newMsg={};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1963,
        "y": 680,
        "wires": [
            [
                "366779d1.ff2316",
                "a3f6bdde.cead3"
            ]
        ]
    },
    {
        "id": "b875575c.9801a8",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "startUp",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 1673,
        "y": 660,
        "wires": [
            [
                "25e653d8.d0975c",
                "605a6222.486b3c",
                "4d053857.e72208"
            ]
        ]
    },
    {
        "id": "a3f6bdde.cead3",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "c43aa043.ae983",
        "name": "displayStatusMsgLog",
        "order": 1,
        "width": "15",
        "height": "15",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2233,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "31305bb5.fad4d4",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "CommandCheck",
        "property": "state.interaction.type",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "COMMAND",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 860,
        "wires": [
            [
                "c1416883.a8a308"
            ]
        ]
    },
    {
        "id": "7011700a.57035",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "ConfigurationCheck",
        "property": "state.interaction.type",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "CONFIGURATION",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1753,
        "y": 1080,
        "wires": [
            [
                "47c3600d.d6245"
            ]
        ]
    },
    {
        "id": "15c4170c.707c69",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1200,
        "y": 80,
        "wires": []
    },
    {
        "id": "730b475c.358258",
        "type": "debug",
        "z": "732e6ace.9ebb04",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2163,
        "y": 520,
        "wires": []
    },
    {
        "id": "21ce33f.943facc",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "todo: filter for expected status messages",
        "info": "",
        "x": 2073,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c8e2d568.fd1618",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "payloadFormat",
        "label": "payloadFormat",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "V1_JSON_VERBOSE",
                "value": "V1_JSON_VERBOSE",
                "type": "str"
            },
            {
                "label": "V1_JSON_COMPACT",
                "value": "V1_JSON_COMPACT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 500,
        "y": 660,
        "wires": [
            [
                "71ad8af3.b40334"
            ]
        ]
    },
    {
        "id": "c3f93bd7.ca5978",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "start",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "87b9a0.a5aa466"
            ]
        ]
    },
    {
        "id": "ec9d19cf.214878",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.eventFrequencyPerSec",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 580,
        "wires": [
            [
                "31630f8a.a291f"
            ]
        ]
    },
    {
        "id": "844fe956.d36998",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.eventFrequencyPerSec",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2d10b7cf.92c9f8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.accelerator",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 860,
        "wires": [
            [
                "2bcee9bc.7cbaa6"
            ]
        ]
    },
    {
        "id": "52807e52.de1cc",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.accelerator",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f06a8dd9.a804c",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "qos",
        "label": "qos",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 7,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "0",
        "max": "1",
        "step": "1",
        "x": 470,
        "y": 700,
        "wires": [
            [
                "421630b0.df9fc"
            ]
        ]
    },
    {
        "id": "ea6c6aa8.5677a8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.qos",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 700,
        "wires": [
            [
                "f06a8dd9.a804c"
            ]
        ]
    },
    {
        "id": "421630b0.df9fc",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.qos",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7dabadac.259b84",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "apply",
        "label": "apply",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 11,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "TRANSIENT",
                "value": "TRANSIENT",
                "type": "str"
            },
            {
                "label": "PERSISTENT",
                "value": "PERSISTENT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 470,
        "y": 780,
        "wires": [
            [
                "2fb13858.ea2828"
            ]
        ]
    },
    {
        "id": "7e167883.d9de38",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.apply",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 780,
        "wires": [
            [
                "7dabadac.259b84"
            ]
        ]
    },
    {
        "id": "2fb13858.ea2828",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.apply",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "31630f8a.a291f",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "eventFrequencyPerSec",
        "label": "eventFrequencyPerSec",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 1,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} messages / second",
        "min": "1",
        "max": "25",
        "step": "1",
        "x": 530,
        "y": 580,
        "wires": [
            [
                "844fe956.d36998"
            ]
        ]
    },
    {
        "id": "9bfa5bc4.e33f68",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.samplesPerEvent",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 620,
        "wires": [
            [
                "fd69629f.2276e"
            ]
        ]
    },
    {
        "id": "291c9003.5c05e",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.samplesPerEvent",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fd69629f.2276e",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "samplesPerEvent",
        "label": "samplesPerEvent",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 3,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} sample set / message",
        "min": "1",
        "max": "4",
        "step": "1",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "291c9003.5c05e"
            ]
        ]
    },
    {
        "id": "f648580.2a2d3a8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "activateAtBootTime",
        "label": "activateAtBootTime?",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 9,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "true",
                "value": true,
                "type": "bool"
            },
            {
                "label": "false",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "6ea53cbc.33fd34"
            ]
        ]
    },
    {
        "id": "12c2e08.051902",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.payloadFormat",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "c8e2d568.fd1618"
            ]
        ]
    },
    {
        "id": "71ad8af3.b40334",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.payloadFormat",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1e3576b5.4594c9",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.activateAtBootTime",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "f648580.2a2d3a8"
            ]
        ]
    },
    {
        "id": "6ea53cbc.33fd34",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.activateAtBootTime",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "2bcee9bc.7cbaa6",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "accelerator",
        "label": "accelerator",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 14,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "52807e52.de1cc"
            ]
        ]
    },
    {
        "id": "3b832d67.c04402",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "more config",
        "info": "",
        "x": 170,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d281279.672e5d8",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "48c789a5.51c988",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "todo",
        "label": "todo",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 190,
        "y": 1160,
        "wires": []
    },
    {
        "id": "466469ec.98d178",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "fbe688ce.9f8fb8",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "sensors",
        "label": "Select Sensors:",
        "format": "",
        "layout": "row-spread",
        "x": 340,
        "y": 820,
        "wires": []
    },
    {
        "id": "88ea80d2.d980b",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.gyroscope",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 900,
        "wires": [
            [
                "9c5335a3.0fcb18"
            ]
        ]
    },
    {
        "id": "9c5335a3.0fcb18",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "gyroscope",
        "label": "gyroscope",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 16,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 900,
        "wires": [
            [
                "53bc427c.25060c"
            ]
        ]
    },
    {
        "id": "53bc427c.25060c",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.gyroscope",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d6e7de4c.2ad18",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.magnetometer",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 940,
        "wires": [
            [
                "cfba884a.f59e28"
            ]
        ]
    },
    {
        "id": "62d979b8.c31c78",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.temperature",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 980,
        "wires": [
            [
                "2d23a90b.d5b4b6"
            ]
        ]
    },
    {
        "id": "67181910.9ba6c8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.light",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "8f349840.974fd8"
            ]
        ]
    },
    {
        "id": "cfba884a.f59e28",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "magnetometer",
        "label": "magnetometer",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 18,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 500,
        "y": 940,
        "wires": [
            [
                "bac99170.378d1"
            ]
        ]
    },
    {
        "id": "2d23a90b.d5b4b6",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "temperature",
        "label": "temperature",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 20,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 980,
        "wires": [
            [
                "971af746.38ae78"
            ]
        ]
    },
    {
        "id": "8f349840.974fd8",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "light",
        "label": "light",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 22,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "156b5872.5ae5c8"
            ]
        ]
    },
    {
        "id": "bac99170.378d1",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.magnetometer",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "971af746.38ae78",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.temperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "156b5872.5ae5c8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.light",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "863ad7de.1643d8",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save",
        "group": "fbe688ce.9f8fb8",
        "order": 24,
        "width": "10",
        "height": "1",
        "passthru": false,
        "label": "save changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "SAVE",
        "payloadType": "str",
        "topic": "",
        "x": 910,
        "y": 760,
        "wires": [
            [
                "4ae0d380.68edbc"
            ]
        ]
    },
    {
        "id": "46577bc9.9b4ee4",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save & send",
        "group": "fbe688ce.9f8fb8",
        "order": 25,
        "width": "11",
        "height": "1",
        "passthru": false,
        "label": "save & send configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "SEND",
        "payloadType": "str",
        "topic": "",
        "x": 930,
        "y": 800,
        "wires": [
            [
                "4ae0d380.68edbc"
            ]
        ]
    },
    {
        "id": "130983a7.b5959c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "compose-save",
        "func": "\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig');\n\nvar solaceUtils = global.get(\"solaceUtils\");\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = solaceUtils.uuid();\n\nvar telemetryConfigMsg = {\n    topic: global.get(\"config.settings.topics.deviceSubs.updateConfigTopics[0]\"),\n    payload: {\n        type: \"telemetry\",\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        tags: {\n            removeMe: 'soon'\n        }\n    }\n}\n\nvar _merge = global.get(\"_merge\");\n_merge(telemetryConfigMsg.payload, telemetryConfig);\n\nlet sensorArray = [];\n\nfor (const sensor in telemetryConfig.sensors) {\n    if(telemetryConfig.sensors[sensor]) {\n        sensorArray.push(sensor);\n    }\n}\n//node.warn('sensor array = ' + JSON.stringify(sensorArray));\n\ndelete telemetryConfigMsg.payload.sensors;\ntelemetryConfigMsg.payload.sensors = sensorArray;\n\n//save for sending\nflow.set('configMsg', telemetryConfigMsg);\n\n\nreturn telemetryConfigMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 720,
        "wires": [
            [
                "81725acc.bda2a8"
            ]
        ]
    },
    {
        "id": "ee6acf76.79d09",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "func": "\nlet button = msg.payload;\n\nlet update = flow.get('userEntries.deviceConfig.telemetryConfig');\n\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig') || {};\n\nvar _merge = global.get(\"_merge\");\n_merge(telemetryConfig, update);\n\nglobal.set('userEntries.deviceConfig.telemetryConfig', telemetryConfig );\n\nif(button === 'SEND') {\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 720,
        "wires": [
            [
                "130983a7.b5959c"
            ]
        ]
    },
    {
        "id": "b99af8cb.dbfc88",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\nflow.set('userEntries.deviceConfig.telemetryConfig', {});\nglobal.set('userEntries.deviceConfig.telemetryConfig', {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff3c83f.dd2328",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "test",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "b99af8cb.dbfc88"
            ]
        ]
    },
    {
        "id": "4ae0d380.68edbc",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "validate",
        "func": "let update = flow.get('userEntries.deviceConfig.telemetryConfig');\n\n// check if at least 1 sensor is selected\nlet count = 0;\nfor (const sensor in update.sensors) {\n    if(update.sensors[sensor]) {\n        count++;\n    }\n}\nif(count === 0) {\n    let newMsg = {\n        isValid: false,\n        payload: \"select at least 1 sensor\"\n    }\n    return newMsg;\n}\n\nmsg.isValid = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 780,
        "wires": [
            [
                "4d8ddf6a.4cc09"
            ]
        ]
    },
    {
        "id": "4d8ddf6a.4cc09",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "isValid",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 780,
        "wires": [
            [
                "ee6acf76.79d09"
            ],
            [
                "40ce3d0d.398814"
            ]
        ]
    },
    {
        "id": "40ce3d0d.398814",
        "type": "ui_toast",
        "z": "732e6ace.9ebb04",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Invalid Configuration",
        "name": "InvalidConfig",
        "x": 1270,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "87b9a0.a5aa466",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "defaults",
        "func": "\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig') || {};\n\nif(telemetryConfig.eventFrequencyPerSec === undefined) telemetryConfig.eventFrequencyPerSec = 1;\nif(telemetryConfig.samplesPerEvent === undefined) telemetryConfig.samplesPerEvent = 1;\nif(telemetryConfig.payloadFormat === undefined) telemetryConfig.payloadFormat = 'V1_JSON_VERBOSE';\nif(telemetryConfig.qos === undefined) telemetryConfig.qos = 0;\nif(telemetryConfig.activateAtBootTime === undefined) telemetryConfig.activateAtBootTime = false;\nif(telemetryConfig.apply === undefined) telemetryConfig.apply = 'TRANSIENT';\n\nif(telemetryConfig.sensors === undefined) {\n    telemetryConfig.sensors = {\n        accelerator: false,\n        gyroscope: true,\n        magnetometer: false,\n        temperature: false,\n        light: false\n    };\n}\n\nglobal.set('userEntries.deviceConfig.telemetryConfig', telemetryConfig);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 100,
        "y": 600,
        "wires": [
            [
                "ec9d19cf.214878",
                "9bfa5bc4.e33f68",
                "12c2e08.051902",
                "ea6c6aa8.5677a8",
                "1e3576b5.4594c9",
                "7e167883.d9de38",
                "2d10b7cf.92c9f8",
                "88ea80d2.d980b",
                "d6e7de4c.2ad18",
                "62d979b8.c31c78",
                "67181910.9ba6c8"
            ]
        ]
    },
    {
        "id": "e37dd300.e7e5d",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "defaults",
        "func": "\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig') || {};\n\nif(statusConfig.sendPeriodicStatus === undefined) statusConfig.sendPeriodicStatus = false;\nif(statusConfig.periodicStatusIntervalSecs === undefined) statusConfig.periodicStatusIntervalSecs = 300;\nif(statusConfig.periodicStatusType === undefined) statusConfig.periodicStatusType = 'SHORT_STATUS';\nif(statusConfig.qos === undefined) statusConfig.qos = 0;\nif(statusConfig.apply === undefined) statusConfig.apply = 'TRANSIENT';\n\nglobal.set('userEntries.deviceConfig.statusConfig', statusConfig);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "10bcaacc.6cef15",
                "dbb1a0cb.3247a",
                "9a1ea8be.bfd998",
                "a41bdc8f.b3456",
                "969ff15a.b242d"
            ]
        ]
    },
    {
        "id": "ee83801d.ecd11",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\nflow.set('userEntries.deviceConfig.statusConfig', {});\nglobal.set('userEntries.deviceConfig.statusConfig', {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8ad090a5.413",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "test",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "ee83801d.ecd11"
            ]
        ]
    },
    {
        "id": "235db0fa.2b603",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "For ASAPIO version:",
        "format": "{{msg.payload.app.about.asapioVersion}}",
        "layout": "row-left",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "7ba921c8.1053d",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Disable Device Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "button: DISABLE_DEVICE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 1440,
        "wires": [
            [
                "5f5e467.6e828b8"
            ]
        ]
    },
    {
        "id": "f850f45c.eb6998",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Enable Device Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "button: ENABLE_DEVICE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "fdfc8d41.30d68"
            ]
        ]
    },
    {
        "id": "f43ea96d.c80498",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Get Session Info",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "button: GET_SESSION_INFO",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 1340,
        "wires": [
            [
                "895c3a43.9e5468"
            ]
        ]
    },
    {
        "id": "8ac03a12.8f1dc8",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Delete All Subscriptions",
        "tooltip": "",
        "color": "yellow",
        "bgcolor": "",
        "icon": "",
        "payload": "button:DELETE_ALL_SUBSCRIPTION",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 1660,
        "wires": [
            [
                "eadc82cf.64d91"
            ]
        ]
    },
    {
        "id": "89a9b6a1.883448",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDeviceSubsUpdateConfigTopics",
        "order": 2,
        "width": 14,
        "height": 3,
        "format": "\n\nDevice Subscriptions: Update Config Topics:\n<ol>\n<div ng-repeat=\"t in msg.payload.topics.deviceSubs.updateConfigTopics\">\n    <li>{{t}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1500,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e1c0bc43.8f96f",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDeviceSubsCommandTopics",
        "order": 4,
        "width": 14,
        "height": 3,
        "format": "\n\nDevice Subscriptions: Command Topics:\n<ol>\n<div ng-repeat=\"t in msg.payload.topics.deviceSubs.commandTopics\">\n    <li>{{t}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1490,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "682f939d.30a69c",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDevicePubTopics",
        "order": 6,
        "width": 14,
        "height": 2,
        "format": "\nDevice Publish Topics:\n\n<ol>\n<div ng-repeat=\"t in msg.payload.topics.devicePubs\">\n    <li>{{t}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1450,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "be5f4bf3.e37e78",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Add All Subscriptions",
        "tooltip": "",
        "color": "yellow",
        "bgcolor": "",
        "icon": "",
        "payload": "butoon:ADD_ALL_SUBSCRIPTIONS",
        "payloadType": "str",
        "topic": "",
        "x": 140,
        "y": 1860,
        "wires": [
            [
                "1d2fa21a.8404fe"
            ]
        ]
    },
    {
        "id": "fb9a5262.f864d",
        "type": "function",
        "z": "b24430d.823f7d",
        "name": "usrMsg",
        "func": "\nlet type=global.get('state.interaction.type');\n\nif(type == 'COMMAND') {\n    msg.topic='Command in progress. Please wait until finished.';\n    msg.payload = 'Command: ' + global.get('state.interaction.details.commandMessage.payload.command');\n} else if(type == 'CONFIGURATION') {\n    msg.topic='Configuration in progress. Please wait until finished.';\n    msg.payload = 'Configuration: ' + global.get('state.interaction.details.configurationMessage.payload.type');\n} else {\n    msg.topic = 'Interaction in progress. Please wait until finished';\n    msg.payload = '?';\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 120,
        "wires": [
            [
                "79c12871.139098"
            ]
        ]
    },
    {
        "id": "79c12871.139098",
        "type": "ui_toast",
        "z": "b24430d.823f7d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "inProgress",
        "x": 770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "44957704.d095e8",
        "type": "subflow:b24430d.823f7d",
        "z": "81b16b1.5822198",
        "name": "",
        "env": [],
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "f5944fb6.85d36",
        "type": "subflow:b24430d.823f7d",
        "z": "732e6ace.9ebb04",
        "name": "",
        "x": 1920,
        "y": 500,
        "wires": []
    },
    {
        "id": "304a9d71.09e7a2",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "top right",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrNotification",
        "x": 1250,
        "y": 480,
        "wires": []
    },
    {
        "id": "8878549f.474918",
        "type": "switch",
        "z": "317873af.a031fc",
        "name": "popupModal?",
        "property": "isPopupModal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 520,
        "wires": [
            [
                "57e50758.396568"
            ]
        ]
    },
    {
        "id": "57e50758.396568",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "prompt",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrModal",
        "x": 1420,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "651007ad.653e88",
        "type": "ui_text_input",
        "z": "475cded7.6c736",
        "name": "deviceId",
        "label": "Device Id:",
        "tooltip": "",
        "group": "ab9ffc37.e23ab",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "",
        "x": 740,
        "y": 580,
        "wires": [
            [
                "552ecba0.31f8b4"
            ]
        ]
    },
    {
        "id": "169222bf.fbf00d",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.devicesettings.entries.deviceId",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "d554ebee.fcf048"
            ]
        ]
    },
    {
        "id": "1ee1d9d9.aae796",
        "type": "ui_text_input",
        "z": "475cded7.6c736",
        "name": "region",
        "label": "Region:",
        "tooltip": "",
        "group": "ab9ffc37.e23ab",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "453c0055.523c3"
            ]
        ]
    },
    {
        "id": "263f5d52.fdd432",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.devicesettings.entries.categorization.region",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 600,
        "wires": [
            [
                "d554ebee.fcf048"
            ]
        ]
    },
    {
        "id": "5f4b97a5.14aa28",
        "type": "ui_text_input",
        "z": "475cded7.6c736",
        "name": "site",
        "label": "Site:",
        "tooltip": "",
        "group": "ab9ffc37.e23ab",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "83421505.7122a8"
            ]
        ]
    },
    {
        "id": "4fb0df0c.5c114",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.devicesettings.entries.categorization.site",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 640,
        "wires": [
            [
                "d554ebee.fcf048"
            ]
        ]
    },
    {
        "id": "2fc18aec.0752f6",
        "type": "ui_text_input",
        "z": "475cded7.6c736",
        "name": "subSite",
        "label": "Sub-site:",
        "tooltip": "",
        "group": "ab9ffc37.e23ab",
        "order": 4,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "100",
        "topic": "",
        "x": 740,
        "y": 700,
        "wires": [
            [
                "86bb3409.a3db78"
            ]
        ]
    },
    {
        "id": "49c798ac.16d388",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.devicesettings.entries.categorization.subSite",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "d554ebee.fcf048"
            ]
        ]
    },
    {
        "id": "270efc3c.9c4344",
        "type": "ui_button",
        "z": "475cded7.6c736",
        "name": "apply",
        "group": "ab9ffc37.e23ab",
        "order": 7,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "apply changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "APPLY",
        "payloadType": "str",
        "topic": "",
        "x": 570,
        "y": 900,
        "wires": [
            [
                "a3a725f2.43d7b8"
            ]
        ]
    },
    {
        "id": "a3a725f2.43d7b8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "input",
        "func": "\nmsg.payload = {\n    set: {\n        state: 'ds.entries',\n        params: {\n            entries: JSON.parse(JSON.stringify(flow.get('app.devicesettings.entries')))\n        }\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 900,
        "wires": [
            [
                "65cbe165.1b3dd"
            ]
        ]
    },
    {
        "id": "552ecba0.31f8b4",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "changed?",
        "func": "let previous = flow.get('app.devicesettings.entries.deviceId');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 580,
        "wires": [
            [
                "169222bf.fbf00d"
            ]
        ]
    },
    {
        "id": "2d5224dc.2df6bc",
        "type": "link in",
        "z": "b661b75c.e7b738",
        "name": "main.app.startup.create",
        "links": [
            "784b6bf1.5317b4"
        ],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "27a69d9c.3a3da2"
            ]
        ],
        "l": true
    },
    {
        "id": "79abe8bc.13fb88",
        "type": "file in",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.file.statusStatusMap",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 550,
        "y": 340,
        "wires": [
            [
                "9d4e0945.ed5df8"
            ]
        ]
    },
    {
        "id": "9d4e0945.ed5df8",
        "type": "json",
        "z": "2dc7a432.56c74c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 340,
        "wires": [
            [
                "469b6340.baf81c"
            ]
        ]
    },
    {
        "id": "e6bddf7a.2dc9a",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.app.getConfigfileConfigPath(sau.app.getMetaInfo());\n\nvar codemapsConfig = global.get(path + '.codemaps');\n\nvar fn = codemapsConfig.directory + '/' + codemapsConfig.statusStatusFilename;\n\nif(su.misc.isStringEmpty(fn)) return throwError(msg, \"cannot compose filename\", {file: 'statusStatusFilename', path: path, codemaps: codemapsConfig});\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "79abe8bc.13fb88"
            ]
        ]
    },
    {
        "id": "453c0055.523c3",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "changed?",
        "func": "\nlet previous = flow.get('app.devicesettings.entries.categorization.region');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 620,
        "wires": [
            [
                "263f5d52.fdd432"
            ]
        ]
    },
    {
        "id": "83421505.7122a8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "changed?",
        "func": "\nlet previous = flow.get('app.devicesettings.entries.categorization.site');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 660,
        "wires": [
            [
                "4fb0df0c.5c114"
            ]
        ]
    },
    {
        "id": "86bb3409.a3db78",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "changed?",
        "func": "let previous = flow.get('app.devicesettings.entries.categorization.subSite');\nmsg.isChanged = (previous !== msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 700,
        "wires": [
            [
                "49c798ac.16d388"
            ]
        ]
    },
    {
        "id": "9a2a1d56.1394d",
        "type": "ui_button",
        "z": "475cded7.6c736",
        "name": "discard",
        "group": "ab9ffc37.e23ab",
        "order": 5,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "discard changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DISCARD",
        "payloadType": "str",
        "topic": "",
        "x": 580,
        "y": 1060,
        "wires": [
            [
                "aabbbe06.94f8b",
                "d9282cea.a9c32"
            ]
        ]
    },
    {
        "id": "83bccad2.8144a8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "createUsrMsg",
        "func": "\nfunction getIssueDisplay(issue) {\n    \n    return issue.property + ': ' + issue.issue + \": '\" + issue.received + \"'\";\n    //return JSON.stringify(issue);\n    \n}\n\nissues = msg.payload.issues;\n\nmsg.topic = 'Please correct the following:';\nmsg.payload =   '<ol>' +\n                '<font color=\"red\">';\n\nfor(var i = 0; i < issues.length; i++) {\n    msg.payload += '<li>' + getIssueDisplay(issues[i]) + '</li>';\n}\n\nmsg.payload += '</font></ol>';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1040,
        "y": 940,
        "wires": [
            [
                "bf22ed52.e70cf"
            ]
        ]
    },
    {
        "id": "bf22ed52.e70cf",
        "type": "ui_toast",
        "z": "475cded7.6c736",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "invalidEntries",
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "5c7b3a6e.d106a4"
            ]
        ]
    },
    {
        "id": "9bdc30cb.47c4c",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "todo: focus on group: configuration sent",
        "info": "",
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "f766c3ff.82bee",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "todo: re-work: discard, save, send - show JSON after save, i.e. send the JSON",
        "info": "",
        "x": 1020,
        "y": 100,
        "wires": []
    },
    {
        "id": "edce5291.4150f",
        "type": "switch",
        "z": "4b6c2fb2.f3121",
        "name": "200?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "dc4131c2.64637"
            ],
            [
                "d21a6755.5a2188"
            ]
        ]
    },
    {
        "id": "9862d632.9c1f98",
        "type": "http request",
        "z": "4b6c2fb2.f3121",
        "name": "httpRequest",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "edce5291.4150f"
            ]
        ]
    },
    {
        "id": "98e29b3a.ed3a28",
        "type": "switch",
        "z": "4b6c2fb2.f3121",
        "name": "apiCall?",
        "property": "sempV2mqttSession.apiCall",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getListOfMqttSessionObjects",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getMqttSessionSubscriptions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteMqttSessionSubscriptionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "createMqttSessionSubscriptionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "createMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 260,
        "y": 620,
        "wires": [
            [
                "1d6edb0c.753c55"
            ],
            [
                "f0a37a3c.240718"
            ],
            [
                "f0a37a3c.240718"
            ],
            [
                "f0a37a3c.240718"
            ],
            [
                "f0a37a3c.240718"
            ],
            [
                "f0a37a3c.240718"
            ],
            [
                "f0a37a3c.240718"
            ],
            [],
            []
        ]
    },
    {
        "id": "1d6edb0c.753c55",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "SempV2:mqttSession:getListOfMqttSessionObjects",
        "func": "/*\nGet a list of MQTT Session objects.\nGET /msgVpns/{msgVpnName}/mqttSessions\n*/  \n\nlet sempV2 = msg.solaceBrokerSempV2Config;\n\nvar url=sempV2.api.mqttSession.basePath;\n\nvar httpMsg = {\n    headers: sempV2.headers,\n    method: \"GET\",\n    url: url,\n    requestTimeout: sempV2.requestTimeout\n}\n\nreturn httpMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ea57e263.ad971",
        "type": "subflow:72433083.19e34",
        "z": "3eb672f6.dc73fe",
        "name": "sempv2 config unset",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 config unset",
                "type": "str"
            },
            {
                "name": "method",
                "value": "unset",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempv2 config unset",
                "type": "str"
            },
            {
                "name": "debugName",
                "value": "SempV2:Config:clearConfig",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "ccc8ddc6.25c34"
            ],
            []
        ]
    },
    {
        "id": "73c528a6.06fd68",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "checkMqttConnectionEnvVars",
        "func": "var su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\nfunction throwError(envVar) {\n    let message = 'Missing environment variable: \"' + envVar + '\".';\n    let errObj = new su.SolaceError(msg.properties.componentName, msg.properties.instanceName, message, 'ERROR', null, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nlet hostEnvVar          = 'SOLACE_SAP_DEMO_MQTT_BROKER_HOST';\nlet portEnvVar          = 'SOLACE_SAP_DEMO_MQTT_BROKER_PORT';\nlet userEnvVar          = 'SOLACE_SAP_DEMO_MQTT_BROKER_USER';\nlet pwdEnvVar           = 'SOLACE_SAP_DEMO_MQTT_BROKER_PASSWORD';\nlet clientIdEnvVar      = 'SOLACE_SAP_DEMO_MQTT_CLIENT_ID';\n\nif(su.misc.isStringEmpty(env.get(hostEnvVar))) return throwError(hostEnvVar);\n\nif(su.misc.isStringEmpty(env.get(portEnvVar))) return throwError(portEnvVar);\n\nif(su.misc.isStringEmpty(env.get(userEnvVar))) return throwError(userEnvVar);\n\nif(su.misc.isStringEmpty(env.get(pwdEnvVar))) return throwError(pwdEnvVar);\n\nif(su.misc.isStringEmpty(env.get(clientIdEnvVar))) return throwError(clientIdEnvVar);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "ffa81f62.10aed"
            ]
        ]
    },
    {
        "id": "8d89260.047ebd8",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "testMqttConnectionEvent",
        "func": "\nvar version = global.get('config.about.version');\nvar mgmtAppId = global.get('config.about.mgmtAppId');\n\n// iot-mgmt/{version}/{mgmt-app-id}/test-mqtt-conn/create/{mgmt-app-id}\nlet newMsg = {\n    topic: 'iot-mgmt/' + version + '/' + mgmtAppId + '/test-mqtt-conn/create/' + mgmtAppId,\n    payload:{}\n}   \nreturn newMsg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "1eb625b.0f35ada",
                "94c40d6e.d9e25"
            ]
        ]
    },
    {
        "id": "1eb625b.0f35ada",
        "type": "mqtt out",
        "z": "451eb845.ed3f88",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "726babe2.11c094",
        "type": "mqtt in",
        "z": "451eb845.ed3f88",
        "name": "testMqttConnection",
        "topic": "iot-mgmt/+/+/test-mqtt-conn/create/+",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 330,
        "y": 540,
        "wires": [
            [
                "2f8fbb2b.28dd44"
            ]
        ]
    },
    {
        "id": "2f8fbb2b.28dd44",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "filter",
        "func": "\n\nif( msg.topic.includes(global.get('config.about.mgmtAppId')) && \n    msg.topic.includes(global.get('config.about.version'))) \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "3ea7e8df.7617e8"
            ]
        ]
    },
    {
        "id": "94c40d6e.d9e25",
        "type": "delay",
        "z": "451eb845.ed3f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea7e8df.7617e8",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "clear",
        "func": "msg.reset = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "94c40d6e.d9e25"
            ]
        ]
    },
    {
        "id": "ffa81f62.10aed",
        "type": "delay",
        "z": "451eb845.ed3f88",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "8d89260.047ebd8"
            ]
        ]
    },
    {
        "id": "5780a0b0.d733d",
        "type": "comment",
        "z": "451eb845.ed3f88",
        "name": "give connection time to establish",
        "info": "",
        "x": 550,
        "y": 220,
        "wires": []
    },
    {
        "id": "24712c0c.a48534",
        "type": "switch",
        "z": "4b6c2fb2.f3121",
        "name": "apiCall?",
        "property": "sempV2mqttSession.apiCall",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getMqttSessionSubscriptions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateMqttSessionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteMqttSessionSubscriptionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "createMqttSessionSubscriptionObject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteMqttSessionObject",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 240,
        "y": 760,
        "wires": [
            [],
            [],
            [],
            [
                "12d1e438.4acacc"
            ],
            [],
            []
        ]
    },
    {
        "id": "f0a37a3c.240718",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "SempV2:mqttSession:validateApiCallParams:clientId",
        "func": "var su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\nfunction throwError(message, details) {\n    let errObj = new su.SolaceError(env.get('componentName'), env.get('instanceName'), message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nif(su.misc.isObjectEmpty(msg.sempV2mqttSession.apiCallParams))\n    return throwError('\"msg.sempV2mqttSession.apiCallParams\" not found.');\n    \nif(su.misc.isStringEmpty(msg.sempV2mqttSession.apiCallParams.mqttSessionClientId)) \n    return throwError('\"msg.sempV2mqttSession.apiCallParams.mqttSessionClientId\" not found.');\n\nif(!su.misc.isValidId(msg.sempV2mqttSession.apiCallParams.mqttSessionClientId))\n    return throwError('mqttSessionClientId=\"' +  msg.sempV2mqttSession.apiCallParams.mqttSessionClientId + '\" is not a valid id.');\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 620,
        "wires": [
            [
                "24712c0c.a48534"
            ]
        ]
    },
    {
        "id": "251ace93.d2c8b2",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Delete Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "button:DELETE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 2080,
        "wires": [
            [
                "9151349f.c36df8"
            ]
        ]
    },
    {
        "id": "cb0e7c66.e4916",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "SempV2:mqttSession:deleteMqttSessionSubscriptionObject",
        "func": "/*\nDelete a subscription object\nDELETE /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}\n*/  \n\nlet sempV2 = msg.solaceBrokerSempV2Config;\n\nlet encodedTopic = encodeURIComponent(msg.sempV2mqttSession.apiCallParams.topic);\n\nvar url=    sempV2.api.mqttSession.basePath + '/' + msg.sempV2mqttSession.apiCallParams.mqttSessionClientId +\n            ',' + sempV2.virtualRouter + '/subscriptions/' + encodedTopic;\n\nvar httpMsg = {\n    headers: sempV2.headers,\n    method: \"DELETE\",\n    url: url,\n    requestTimeout: sempV2.requestTimeout\n}\n\nreturn httpMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "12d1e438.4acacc",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "validateApiCallParams:topic",
        "func": "\nvar su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\nfunction throwError(message, details) {\n    let errObj = new su.SolaceError(env.get('componentName'), env.get('instanceName'), message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nif(su.misc.isObjectEmpty(msg.sempV2mqttSession.apiCallParams.topic))\n    return throwError('\"msg.sempV2mqttSession.apiCallParams.topic\" not found.', sempV2mqttSession);\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 800,
        "wires": [
            [
                "cb0e7c66.e4916"
            ]
        ]
    },
    {
        "id": "f791653b.11db78",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Create Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "button:CREATE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 2320,
        "wires": [
            [
                "1907828c.9d657d"
            ]
        ]
    },
    {
        "id": "5c3e3ecb.e909b",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "todo: rework the entire flow with error handling",
        "info": "",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "54b278c0.619d78",
        "type": "catch",
        "z": "732e6ace.9ebb04",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 340,
        "y": 40,
        "wires": [
            [
                "7bb59744.f14c98"
            ]
        ]
    },
    {
        "id": "78fd1235.515e2c",
        "type": "subflow:317873af.a031fc",
        "z": "732e6ace.9ebb04",
        "name": "",
        "env": [],
        "x": 670,
        "y": 40,
        "wires": []
    },
    {
        "id": "9185b714.c09188",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.prepare4UsrDisplay",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nlet errorHeading = 'Internal Server Exception';\n\nlet userDisplayMsg = {\n    topic: errorHeading\n}\n    \nlet sourceStr = '';\nif((errorObj.getPreviousSourceType()!==null) && (errorObj.getPreviousSourceName()!==null)) {\n    sourceStr += errorObj.getPreviousSourceType() + \":\" + errorObj.getPreviousSourceName();\n} else {\n    sourceStr += errorObj.getSourceType() + \":\" + errorObj.getSourceName();\n}\n    \nuserDisplayMsg.payload = \n    \"component: \" + errorObj.getComponentName() +\n    \", instance: \" + errorObj.getInstanceName() +\n    \", source:\" + sourceStr +\n    \", caughtBy: \" + JSON.stringify(errorObj.getCaughtBy()) +\n    \"<br/>\" + errorObj.getMessage() +\n    \"<br/>details:\" + JSON.stringify(errorObj.getDetails());\n\n// prepare the message for user modal popup\nlet userModalMsg = {};\nif(errorObj.getSeverity() === 'ERROR') {\n    userModalMsg.isPopupModal = true;\n    userModalMsg.topic = errorHeading;\n    userModalMsg.payload = \n        errorObj.getMessage() +\n        \"<br/>\" + \n        \"<br/>-component:\" + errorObj.getComponentName() + \n        \"<br/>-instance:\" + errorObj.getInstanceName() + \n        \"<br/>-source:\" + sourceStr +\n        \"<br/><br/>Check the log for more details.\"; \n}\n\nreturn [userDisplayMsg, userModalMsg];\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 980,
        "y": 500,
        "wires": [
            [
                "304a9d71.09e7a2"
            ],
            [
                "8878549f.474918"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg",
            "userModalMsg"
        ]
    },
    {
        "id": "7bb59744.f14c98",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "handleError",
        "func": "\nvar su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context'));\n\nlet errObj = new su.SolaceError();\nif(!errObj.populateFromMsgError(msg)) {\n    // is not a Solace Error\n    // could add more info here ...\n}\nerrObj.setCaughtBy({flow:'DeviceConfig', function: 'handleError'});\n\n// log it as an error without throwing an exception again\nnode.error(errObj.toString());\n\n// add it to output for further processing\nlet newMsg = errObj.mergeInto(msg);\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 40,
        "wires": [
            [
                "78fd1235.515e2c"
            ]
        ]
    },
    {
        "id": "fabbe6b4.bb8448",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "validateInput",
        "func": "var su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\n// read properties\nvar properties = {\n    instanceName: env.get('instanceName'),\n    componentName: env.get('componentName')\n}\n\nif(su.misc.isStringEmpty(properties.instanceName)) {\n    let errObj = new su.SolaceError(properties.componentName, properties.instanceName, '\"instanceName\" not found in properties.', 'ERROR', null, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return;\n}\n\nif(su.misc.isObjectEmpty(msg.properties)) msg.properties = {};\n\nsu.misc.merge(msg.properties, properties);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "73c528a6.06fd68"
            ]
        ]
    },
    {
        "id": "37931709.64fcc8",
        "type": "comment",
        "z": "451eb845.ed3f88",
        "name": "kill timer if event received",
        "info": "",
        "x": 510,
        "y": 460,
        "wires": []
    },
    {
        "id": "341352c9.16d02e",
        "type": "function",
        "z": "7f298068.d86b1",
        "name": "TestSolaceErrorSubFlow:validateInput",
        "func": "var su = global.get('solaceUtils') || (node.error('solaceUtils not found in global context', msg));\n\nfunction throwError(message, details) {\n    let errObj = new su.SolaceError(properties.componentName, properties.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\n// note: manually configured properties override msg properties\n\n// read properties\nvar properties = {\n    componentName: env.get('componentName'),\n    instanceName: env.get('instanceName'),\n    property1: env.get('property1'),\n    forceJSError: env.get('forceJSError') // boolean, it is never empty therefor cannot be overridden by msg\n}\n\n// logging in sub-flow\n// node.warn('properties = ' + JSON.stringify(properties));\n\n// if a property is empty, try find it in the msg.payload\nif(su.misc.isStringEmpty(properties.property1)) properties.property1 = msg.payload.property1;\n\n// test properties\nif(su.misc.isStringEmpty(properties.componentName))\n    return throwError('\"componentName\" not found in properties.');\n\nif(su.misc.isStringEmpty(properties.instanceName))\n    return throwError('\"instanceName\" not found in properties.');\n\nif(su.misc.isStringEmpty(properties.property1))\n    return throwError('\"property1\" not found in properties or msg.payload.');\n    \n// add properties to msg for next component\nif(su.misc.isObjectEmpty(msg.properties)) msg.properties = {};\nsu.misc.merge(msg.properties, properties);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 140,
        "wires": [
            [
                "becf16d3.134058"
            ]
        ]
    },
    {
        "id": "fb2c8f53.35e3d",
        "type": "switch",
        "z": "7f298068.d86b1",
        "name": "isForceJSError?",
        "property": "properties.forceJSError",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1180,
        "y": 140,
        "wires": [
            [
                "fd306f45.ddaa5"
            ],
            []
        ]
    },
    {
        "id": "fd306f45.ddaa5",
        "type": "function",
        "z": "7f298068.d86b1",
        "name": "forceJSError",
        "func": "\nmsg.forceJSError.notExistentProperty = false;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1390,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "406de019.64663",
        "type": "catch",
        "z": "7f298068.d86b1",
        "name": "call all x handleSubFlowErrors",
        "scope": [
            "341352c9.16d02e",
            "fb2c8f53.35e3d",
            "fd306f45.ddaa5"
        ],
        "uncaught": false,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "497614ac.1f71dc"
            ]
        ]
    },
    {
        "id": "497614ac.1f71dc",
        "type": "function",
        "z": "7f298068.d86b1",
        "name": "handleSubFlowErrors",
        "func": "try {\n    \n    var su = global.get('solaceUtils') || (node.error('\\'solaceUtils\\' not found in global context'));\n\n    let errObj = new su.SolaceError();\n    if(!errObj.populateFromMsgError(msg)) {\n        // not a SolaceError\n        errObj.setComponentName(env.get('componentName'));\n        errObj.setInstanceName(env.get('instanceName'));\n    }\n\n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    \n    // add it to output for debugging\n    let newMsg = errObj.mergeInto(msg);\n    return newMsg;\n    \n} catch(err) {\n    // throw error for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 240,
        "wires": [
            []
        ],
        "outputLabels": [
            "msg"
        ]
    },
    {
        "id": "becf16d3.134058",
        "type": "function",
        "z": "7f298068.d86b1",
        "name": "more processing ...",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a648ad3a.92d26",
        "type": "comment",
        "z": "7f298068.d86b1",
        "name": "do more processing here ...",
        "info": "",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "2c275eab.6cd832",
        "type": "catch",
        "z": "451eb845.ed3f88",
        "name": "call all x handleSubFlowErrors",
        "scope": [
            "73c528a6.06fd68",
            "8d89260.047ebd8",
            "1eb625b.0f35ada",
            "726babe2.11c094",
            "2f8fbb2b.28dd44",
            "94c40d6e.d9e25",
            "e43e3a95.c841d8",
            "3ea7e8df.7617e8",
            "ffa81f62.10aed",
            "5780a0b0.d733d",
            "fabbe6b4.bb8448",
            "37931709.64fcc8"
        ],
        "uncaught": false,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "fa5b580c.397648"
            ]
        ]
    },
    {
        "id": "fa5b580c.397648",
        "type": "function",
        "z": "451eb845.ed3f88",
        "name": "handleSubFlowErrors",
        "func": "try {\n    \n    var su = global.get('solaceUtils') || (node.error('\\'solaceUtils\\' not found in global context'));\n\n    let errObj = new su.SolaceError();\n    if(!errObj.populateFromMsgError(msg)) {\n        // not a SolaceError\n        errObj.setComponentName(env.get('componentName'));\n        errObj.setInstanceName(env.get('instanceName'));\n    }\n\n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    \n    // add it to output for debugging\n    let newMsg = errObj.mergeInto(msg);\n    return newMsg;\n    \n} catch(err) {\n    // throw error for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 40,
        "wires": [
            []
        ],
        "outputLabels": [
            "msg"
        ]
    },
    {
        "id": "a6e4d972.695bd8",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "callable blocks -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 760,
        "wires": []
    },
    {
        "id": "c79da51b.48b808",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "init -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 790,
        "y": 1100,
        "wires": []
    },
    {
        "id": "fa93df6f.7be1d",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "buttons -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d6c0db99.0cb048",
        "type": "complete",
        "z": "c50bcf9b.51248",
        "name": "on_getDeviceSessionInfo",
        "scope": [
            "34686fe.9cc3a9",
            "6083fedd.376",
            "e6a08ee1.e03eb",
            "73533271.6780ac",
            "a04433c4.0a8ee",
            "19047ea2.84cc01",
            "b580e9f0.793878"
        ],
        "uncaught": false,
        "x": 170,
        "y": 960,
        "wires": [
            [
                "f8bb1f20.12382"
            ]
        ]
    },
    {
        "id": "eb483516.59f618",
        "type": "comment",
        "z": "451eb845.ed3f88",
        "name": "error - not connected",
        "info": "",
        "x": 560,
        "y": 380,
        "wires": []
    },
    {
        "id": "fde55a3d.37c0f8",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "bb9da227.7310c",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "initialize app  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 500,
        "wires": []
    },
    {
        "id": "4dd1ba1b.914c84",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.about",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet about = {\n    version: '0.1.0',\n    date: 'May-2020 to June-2020',\n    author: 'Solace & ASAPIO',\n    asapioVersion: {\n        major: 9,\n        minor: 3,\n        build: 2004\n    },\n    details: {\n        app: su.flow.getMsgProperties(msg, _meta)\n    }\n}\n\nglobal.set(sau.app.getAboutPath(_meta), about);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 460,
        "wires": [
            [
                "19465cb4.994783"
            ]
        ]
    },
    {
        "id": "c47a31d.a5a67d",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "disableTabs",
        "func": "\nmsg.payload = {\n    tab: 'About',\n    tabs: {\n        disable: [\n            'Order', 'Settings', 'Device Commands', 'Device Config', 'Device Session'\n        ]\n    }\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "df6765ae.b94958"
            ]
        ]
    },
    {
        "id": "df6765ae.b94958",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "78311e04.935a3",
        "type": "inject",
        "z": "3eb672f6.dc73fe",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "c4bd5101.221ef",
                "8ce917e4.1a7b88"
            ]
        ]
    },
    {
        "id": "4e74e35b.6b8ddc",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.hide.group",
        "func": "\n//{\"group\": {\"hide\": [\"tab_name_group_name_with_underscores\"], \"show\": [\"reveal_another_group\"], \"focus\": true}}\n\nmsg.payload = {\n    group: {\n        hide: [\n            'About_About_Solace_Device_Broker'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "f651c8f1.3c4aa8"
            ]
        ]
    },
    {
        "id": "9b9e8ec9.d916e",
        "type": "inject",
        "z": "b661b75c.e7b738",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "4e74e35b.6b8ddc",
                "e6c7abb3.5c08f8"
            ]
        ]
    },
    {
        "id": "f651c8f1.3c4aa8",
        "type": "ui_ui_control",
        "z": "b661b75c.e7b738",
        "name": "applyGroup",
        "events": "all",
        "x": 530,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db82e187.a2ea5",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.showAboutSolaceDeviceBroker",
        "func": "\n//{\"group\": {\"hide\": [\"tab_name_group_name_with_underscores\"], \"show\": [\"reveal_another_group\"], \"focus\": true}}\n\nmsg.payload = {\n    group: {\n        show: [\n            'About_About_Solace_Device_Broker'\n        ]\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "9e02b983.635dc8"
            ]
        ]
    },
    {
        "id": "9e02b983.635dc8",
        "type": "ui_ui_control",
        "z": "b661b75c.e7b738",
        "name": "applyGroup",
        "events": "all",
        "x": 1390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e13cb973.0aab68",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "trigger_init",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1310,
        "y": 360,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "865a717d.2d77a",
        "type": "complete",
        "z": "3eb672f6.dc73fe",
        "name": "on_init",
        "scope": [
            "e13cb973.0aab68"
        ],
        "uncaught": false,
        "x": 90,
        "y": 620,
        "wires": [
            [
                "f02344e2.5b23b8"
            ]
        ]
    },
    {
        "id": "7122ecfb.104184",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "120",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Please wait for the application to start",
        "name": "plsWait",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "4de7c1a8.404b1",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.payload = \"it'll only take a few seconds ...\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 280,
        "wires": [
            [
                "7122ecfb.104184"
            ]
        ]
    },
    {
        "id": "346232b6.b3dd7e",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "collect initialized update responses from other components ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 930,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e0024adb.7c14e8",
        "type": "catch",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "c0a145aa.41d538"
            ]
        ]
    },
    {
        "id": "b5a3e8df.459f58",
        "type": "subflow:317873af.a031fc",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "env": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "b127ccda.4e18b",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "solace.sempv2.about ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "bf5fe39e.a6b9e",
        "type": "catch",
        "z": "6b984824.a17568",
        "name": "catch httpRequest",
        "scope": [
            "dfaf881c.36c188"
        ],
        "uncaught": false,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "9a74b452.a0a7a8"
            ]
        ]
    },
    {
        "id": "f4cc72ee.c9615",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "main app -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 40,
        "wires": []
    },
    {
        "id": "517e908a.3a45",
        "type": "ui_ui_control",
        "z": "317873af.a031fc",
        "name": "onBrowserConnect",
        "events": "connect",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "f9dac897.4c5b98"
            ]
        ]
    },
    {
        "id": "917f42fe.c5335",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "disableTabs",
        "func": "\nmsg.payload = {\n    tab: 'About',\n    tabs: {\n        disable: [\n            'Settings', 'Device Commands', 'Device Config', 'Broker Control', 'Device Monitor'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "507320fc.fc9f4"
            ]
        ]
    },
    {
        "id": "507320fc.fc9f4",
        "type": "ui_ui_control",
        "z": "317873af.a031fc",
        "name": "applyTabs",
        "events": "change",
        "x": 670,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c2676af7.59e7d8",
        "type": "ui_template",
        "z": "b661b75c.e7b738",
        "group": "b957fef7.e902d",
        "name": "displayAboutDeviceBroker",
        "order": 2,
        "width": "21",
        "height": "6",
        "format": "\n\n<div>\n    <pre>{{msg.payload.deviceBroker.about | json}}</pre>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 840,
        "y": 640,
        "wires": [
            [
                "db82e187.a2ea5",
                "e58bfb0.929d608"
            ]
        ]
    },
    {
        "id": "7f0709b4.bf3a18",
        "type": "catch",
        "z": "b661b75c.e7b738",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "c8e458a6.7dc698"
            ]
        ]
    },
    {
        "id": "8532221e.d70a4",
        "type": "subflow:317873af.a031fc",
        "z": "b661b75c.e7b738",
        "name": "",
        "env": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "545f4874.7569c8",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "the end  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 900,
        "y": 1720,
        "wires": []
    },
    {
        "id": "ccc02dd2.c6ca",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 940,
        "wires": []
    },
    {
        "id": "5e5c85ac.ee167c",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "main.about -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "87606983.0864e8",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 168,
        "wires": []
    },
    {
        "id": "e62ceaed.ba9d88",
        "type": "comment",
        "z": "72433083.19e34",
        "name": "solace.sempv2.config ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 40,
        "wires": []
    },
    {
        "id": "8d628a2d.6a2d98",
        "type": "comment",
        "z": "72433083.19e34",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "4d33dbd6.9af704",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "solace.utils.forEach -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "18b8e08f.3f88af",
        "type": "catch",
        "z": "44813701.a560c8",
        "name": "catch-all x errHandler",
        "scope": [
            "4d33dbd6.9af704",
            "220d2334.7e8a6c",
            "f72481f9.0d87a",
            "e907d4d0.096d08",
            "c3b8d0b6.9f5fa",
            "cb9e650e.ac4bc8",
            "ed1738d5.4622f8",
            "404b41c4.06b95",
            "d9c35b38.533828"
        ],
        "uncaught": false,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "4c8cf9e.3b8d708"
            ]
        ]
    },
    {
        "id": "220d2334.7e8a6c",
        "type": "status",
        "z": "44813701.a560c8",
        "name": "",
        "scope": null,
        "x": 780,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "502e8b1d.28cda4",
        "type": "status",
        "z": "72433083.19e34",
        "name": "",
        "scope": null,
        "x": 1680,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f72481f9.0d87a",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "end -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "122fe845.c2a7e8",
        "type": "catch",
        "z": "6b984824.a17568",
        "name": "catch-all x (error handler, httpRequest)",
        "scope": [
            "b127ccda.4e18b",
            "80537b6a.50ea28",
            "2ff6e77b.3ac0c8",
            "6020c05e.e4d69",
            "ebb26519.80ab48",
            "118812c3.9520cd",
            "74cdef40.01333",
            "65c36bb9.6d9814",
            "9a74b452.a0a7a8",
            "884cdb87.779788",
            "616e0712.29bdf8",
            "ee0d5851.17a708",
            "d0a63fcb.ec5a2",
            "fbc76c69.56629",
            "c4faeee4.3ed8d",
            "cb9207f3.f22508",
            "94e6c844.2878f8",
            "6f489538.8a154c",
            "4b5c1ce7.4c9eb4",
            "382d8818.fc2bd8",
            "ddd8e537.7b8b08"
        ],
        "uncaught": false,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "b4377583.93fd98"
            ]
        ]
    },
    {
        "id": "2ff6e77b.3ac0c8",
        "type": "status",
        "z": "6b984824.a17568",
        "name": "",
        "scope": null,
        "x": 1660,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6020c05e.e4d69",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ESOCKETTIMEDOUT\"",
        "info": "```json\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/xxxxxxabout\",\n \"requestTimeout\": 100,\n \"_msgid\": \"ec7a77e9.a9b788\",\n \"payload\": \"Error: ESOCKETTIMEDOUT : https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/xxxxxxabout\",\n \"statusCode\": \"ESOCKETTIMEDOUT\"\n}\n```",
        "x": 1370,
        "y": 560,
        "wires": []
    },
    {
        "id": "ebb26519.80ab48",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": 400",
        "info": "```json\n\n\"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 14,\n    \"description\": \"API confi not supported.\",\n    \"status\": \"NOT_SUPPORTED\"\n   },\n\n\n\n```\n\n\n\n```json\n\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:31:40 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"20b17e5b\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\",\n \"requestTimeout\": 30000,\n \"_msgid\": \"e464a037.d5043\",\n \"statusCode\": 400,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 535,\n    \"description\": \"No paths found for /aboutxxx\",\n    \"status\": \"INVALID_PATH\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/aboutxxx\"\n   },\n   \"responseCode\": 400\n  }\n },\n \"redirectList\": []\n}\n\n\n\n```\n\n\n```json\n\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:50:54 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"78e79f5a\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"8e2fd7cf.f99218\",\n \"statusCode\": 400,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 14,\n    \"description\": \"API confi not supported.\",\n    \"status\": \"NOT_SUPPORTED\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/confi/about\"\n   },\n   \"responseCode\": 400\n  }\n },\n \"redirectList\": []\n}\n\n```",
        "x": 1310,
        "y": 405,
        "wires": []
    },
    {
        "id": "118812c3.9520cd",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": 401",
        "info": "```json\n\n{\n \"headers\": {\n  \"date\": \"Wed, 15 Apr 2020 18:46:42 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"Solace_VMR/9.3.1.8\",\n  \"cache-control\": \"no-cache\",\n  \"www-authenticate\": \"Basic realm=\\\"Unauthorized\\\"\",\n  \"access-control-allow-credentials\": \"true\",\n  \"access-control-allow-headers\": \"Authorization, Content-Type, X-Requested-With\",\n  \"access-control-allow-methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n  \"strict-transport-security\": \"max-age=31536000\",\n  \"x-node-red-request-node\": \"023f4222\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\",\n \"requestTimeout\": 30000,\n \"_msgid\": \"57c9fe3c.cef7d\",\n \"statusCode\": 401,\n \"responseUrl\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\",\n \"payload\": {\n  \"meta\": {\n   \"error\": {\n    \"code\": 72,\n    \"description\": \"Authorization Failed\",\n    \"status\": \"UNAUTHORIZED\"\n   },\n   \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\"\n   },\n   \"responseCode\": 401\n  }\n },\n \"redirectList\": []\n}\n\n\n```",
        "x": 1310,
        "y": 445,
        "wires": []
    },
    {
        "id": "74cdef40.01333",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ENOTFOUND\"",
        "info": "```json\n\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mrm7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"9de696e5.4faef8\",\n \"payload\": \"Error: getaddrinfo ENOTFOUND mrm7sc2dxasz.messaging.solace.cloud mrm7sc2dxasz.messaging.solace.cloud:943 : https://mrm7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about\",\n \"statusCode\": \"ENOTFOUND\"\n}\n\n```",
        "x": 1340,
        "y": 520,
        "wires": []
    },
    {
        "id": "65c36bb9.6d9814",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "\"statusCode\": \"ETIMEDOUT\"",
        "info": "wrong port\n\n```json\n{\n \"headers\": {\n  \"Authorization\": \"Basic eGRrLWRldmljZXMtYWRtaW46NzZwanA0NDI2NWR2MWZlMzcwZnI4M2JhcHE=\"\n },\n \"method\": \"GET\",\n \"url\": \"https://mr6m7sc2dxasz.messaging.solace.cloud:942/SEMP/v2/config/about\",\n \"requestTimeout\": 300,\n \"_msgid\": \"c2f12edc.bee16\",\n \"payload\": \"Error: ETIMEDOUT : https://mr6m7sc2dxasz.messaging.solace.cloud:942/SEMP/v2/config/about\",\n \"statusCode\": \"ETIMEDOUT\"\n}\n```",
        "x": 1340,
        "y": 480,
        "wires": []
    },
    {
        "id": "9517c0dd.9e911",
        "type": "function",
        "z": "72433083.19e34",
        "name": "utils.debug(sempv2.config)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1520,
        "y": 80,
        "wires": []
    },
    {
        "id": "c1e143dc.91573",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "app controller ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "89ff5802.1a7e98",
        "type": "catch",
        "z": "7335a6bf.4e03a8",
        "name": "catch-all x (err handler)",
        "scope": [
            "4dd1ba1b.914c84",
            "c1e143dc.91573",
            "455042b0.6e533c",
            "4b1decb9.9c4564",
            "e64af90a.71bbf8",
            "5b5c96c8.4cbd18",
            "7bc56d49.97b274",
            "f75ff44f.2edeb8",
            "6967887e.553fb8",
            "e10a5cf1.0efdd",
            "781428bf.b860f8",
            "190b317f.4c610f",
            "c291703e.44635",
            "ede934bb.6c6d58",
            "82c135ff.9b73f8",
            "187dc50e.337d6b",
            "accb2e2b.aeb15",
            "eb11d271.83f0c",
            "ec2f888a.3917d8",
            "5f1a5110.7b057",
            "ed1064cf.934c58",
            "3e6162b4.7ea1ae",
            "19465cb4.994783",
            "9038781a.7c79d8",
            "1b1b527c.6b9e1e",
            "f8d8cfbe.743ab"
        ],
        "uncaught": false,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "c728f80b.a1d258"
            ]
        ]
    },
    {
        "id": "9a74b452.a0a7a8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.log(sempv2.about.httpErr)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\n\nmsg = su.misc.setObjectPath(msg, '_solace.utils.log.meta', _meta);\n\nnode.error(JSON.stringify(msg, null, 1));\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"http error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 510,
        "y": 180,
        "wires": []
    },
    {
        "id": "455042b0.6e533c",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n\n    //todo test\n    //return throwError(msg, 'testing solace error', {where: 'isValidFrameworkInstanceProperties'});\n\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    \n    return true;\n    \n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 600,
        "wires": [
            [
                "e64af90a.71bbf8"
            ]
        ]
    },
    {
        "id": "fb1bd8f9.91f568",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app:init (app)",
        "env": [
            {
                "name": "instance-name",
                "value": "app:init (app)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 340,
        "wires": [
            [
                "1e49af32.8e4871"
            ]
        ]
    },
    {
        "id": "4b1decb9.9c4564",
        "type": "status",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "scope": null,
        "x": 1480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e64af90a.71bbf8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return [msg];\n    case 'get':\n        return [null, msg];\n    case 'set':\n        return [null, null, msg];\n    case 'clear-state':\n        global.set(su.flow.getPackageBasePath(_meta), undefined);\n        return [null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 4,
        "noerr": 0,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "7bc56d49.97b274"
            ],
            [
                "e10a5cf1.0efdd"
            ],
            [
                "190b317f.4c610f"
            ],
            [
                "5f1a5110.7b057"
            ]
        ],
        "outputLabels": [
            "init",
            "get",
            "set",
            "clear-state"
        ]
    },
    {
        "id": "5b5c96c8.4cbd18",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc56d49.97b274",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\n/* main --- */\n\nlet state = sau.app.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(su.flow.getBasePath(_meta), state);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 520,
        "wires": [
            [
                "f75ff44f.2edeb8"
            ]
        ]
    },
    {
        "id": "67b8792c.811068",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "cb69f0a5.ffc2b"
            ]
        ]
    },
    {
        "id": "7f85f6b3.d94528",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "utils.debug (SolaceError)",
        "func": "\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e5268.9f0bdd8",
        "type": "catch",
        "z": "8e181349.856bd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "39daa6eb.d9b0ba"
            ]
        ]
    },
    {
        "id": "39daa6eb.d9b0ba",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "utils.logError(SolaceError)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "66204707.f77548",
        "type": "status",
        "z": "8e181349.856bd",
        "name": "",
        "scope": null,
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f75ff44f.2edeb8",
        "type": "subflow:8e181349.856bd",
        "z": "7335a6bf.4e03a8",
        "name": "SolaceError.unset (app.init)",
        "env": [
            {
                "name": "instance-name",
                "value": "SolaceError.unset (app.init)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "unset",
                "type": "str"
            }
        ],
        "x": 740,
        "y": 520,
        "wires": [
            [
                "4dd1ba1b.914c84"
            ],
            [
                "82c135ff.9b73f8"
            ]
        ]
    },
    {
        "id": "cb69f0a5.ffc2b",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'get':\n        return[msg];\n    case 'set': \n        return [null, msg];\n    case 'unset': \n        return [null, null, msg];\n    case 'getTotalErrorCount':\n        return [null, null, null, msg];\n    case 'setTotalErrorCount':\n        return [null, null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 5,
        "noerr": 0,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "35fd3a6c.90ac66"
            ],
            [
                "7f8d7044.dffd7"
            ],
            [
                "cec31427.df89c8"
            ],
            [
                "7c5e199f.3cec78"
            ],
            [
                "5a0dacb9.04ce04"
            ]
        ],
        "outputLabels": [
            "get",
            "set",
            "unset",
            "getTotalErrorCount",
            "setTotalErrorCount"
        ]
    },
    {
        "id": "cec31427.df89c8",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.unset",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nglobal.set(su.flow.getBasePath(_meta), undefined);\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 280,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "7cd15b6d.5a5a04",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "40923531.4b5a4c",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.createSolaceError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n\nlet flowProperties = su.flowProperties.getMsgFlowProperties(msg);\n\nlet errObj = new su.SolaceError();\nif(!errObj.populateFromMsgError(msg)) {\n    // not a Solace Error\n    errObj.setComponentName(flowProperties.packageId + '.' + flowProperties.componentId);\n    errObj.setInstanceName(flowProperties.instanceName);\n}\nerrObj.setCaughtBy({flow: flowProperties});\n\nlet newMsg = errObj.mergeInto(msg);\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "4bd780ca.5274"
            ]
        ]
    },
    {
        "id": "40bf8325.122cbc",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.set",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.set",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 500,
        "wires": [
            [
                "9185b714.c09188"
            ],
            [
                "a042ac9c.ba70f"
            ]
        ]
    },
    {
        "id": "7f8d7044.dffd7",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\n// validate we have a SolaceError in the message\nlet se = new su.SolaceError();\nif(!se.populateFromMsgError(msg)) return throwError(msg, 'SolaceError not found in msg', {msg: msg});\n\n// save it in global state\nlet currentProperties = global.get(su.flow.getPropertiesPath(_meta));\nlet count = su.SolaceError.getStatePropertiesTotalErrorCount(currentProperties);\n\nlet newProperties = su.SolaceError.createStateProperties(se, count+1);\n\nglobal.set(su.flow.getPropertiesPath(_meta), newProperties);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 240,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "5c97a965.2c1048",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.get",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "ded44cbd.6f7fb",
                "6c18ac59.e29e54"
            ],
            [
                "eaae46ee.ec4098"
            ]
        ]
    },
    {
        "id": "35fd3a6c.90ac66",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet properties = global.get(su.flow.getPropertiesPath(_meta));\n\nif(!su.misc.isObjectEmpty(properties)) {\n    let se = su.SolaceError.getStatePropertiesSolaceError(properties);\n    if(se === null) return throwError(msg, 'SolaceError not found in global context', {properties: properties});\n    se.setMsgError(msg);\n    msg.payload.isSolaceError = true;\n} else {\n    msg.payload.isSolaceError = false;\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "6967887e.553fb8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d3d9e124.a0f95",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.totalErrorCount",
        "func": "\nmsg.payload.solaceErrorCount++;\n\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"error count:\" + msg.payload.solaceErrorCount });\n\nif(msg.payload.solaceErrorCount === 1) {\n\n    return msg;\n\n} else {\n\n    return[null, msg]\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 230,
        "y": 500,
        "wires": [
            [
                "917f42fe.c5335",
                "40bf8325.122cbc"
            ],
            [
                "8696ab06.ffa0f8"
            ]
        ],
        "outputLabels": [
            "totalErrorCount = 1",
            "totalErrorCount > 1"
        ]
    },
    {
        "id": "ff2a45aa.69c188",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "app error handler (appErrHandler) -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "56725407.e8971c",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "SolaceError -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "7c5e199f.3cec78",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.getTotalErrorCount",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet properties = global.get(su.flow.getPropertiesPath(_meta));\n\nmsg.payload = {\n    solaceErrorCount: su.SolaceError.getStatePropertiesTotalErrorCount(properties)\n}\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 320,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "2cdd074c.b22cc8",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todo: test for loops ...",
        "info": "",
        "x": 1520,
        "y": 80,
        "wires": []
    },
    {
        "id": "70faa34.7dde75c",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "SolaceError.getTotalErrorCount(appErrHandler)",
        "env": [
            {
                "name": "instance-name",
                "value": "SolaceError.getTotalErrorCount(appErrHandler)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getTotalErrorCount",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "d3d9e124.a0f95"
            ],
            [
                "2db4be75.9ac632"
            ]
        ]
    },
    {
        "id": "f38af028.18c6c",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "throw.error.javascript - SolaceError - Internal",
        "func": "\nlet hello = SolaceErrorInternalError.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "21d06f8b.09f81",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "throw.error.javascript - appErrHandler - Internal",
        "func": "\nlet hello = SolaceErrorHandlerInternalError.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6c8901a9.e67ab",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "b661b75c.e7b738",
        "name": "app - get about",
        "env": [
            {
                "name": "instance-name",
                "value": "app - get about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "1e3d4002.580e9",
                "a2f3d83f.dacbc8",
                "19640171.0e9bcf",
                "235db0fa.2b603",
                "5615438f.c8e9fc"
            ]
        ]
    },
    {
        "id": "e10a5cf1.0efdd",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.state')) return throwError(msg, 'msg.payload.get.state is empty');\n    \n    return true;\n}\n\nfunction isValidMsgPayloadParams(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.params')) return throwError(msg, 'msg.payload.get.params is empty');\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return; \n\nswitch(msg.payload.get.state) {\n    case 'app.properties': {\n        msg.payload = {\n            app: {\n                properties: global.get(su.flow.getPropertiesPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'app.about': {\n        msg.payload = {\n            app: {\n                about: global.get(sau.app.getAboutPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'app.isStartupComplete': {\n        msg.payload = {\n            app: {\n                isStartupComplete: global.get(sau.app.getIsStartupCompletePath(_meta))\n            }\n        }\n        return msg;\n    }    \n    case 'app.isInitialized': {\n        msg.payload = {\n            app: {\n                isInitialized: global.get(sau.app.getIsInitializedPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'broker.isConnected': {\n        msg.payload = {\n            broker: {\n                isConnected: global.get(sau.app.getIsAppSolaceBrokerConnectedPath(_meta))\n            }\n        }\n        return msg;\n    }\n    case 'broker.about': {\n        \n        if(!isValidMsgPayloadParams(msg)) return; \n        \n        let solaceBrokerId = msg.payload.get.params.solaceBrokerId;\n        if(su.misc.isStringEmpty(solaceBrokerId)) return throwError(msg, 'payload.get.params.solaceBrokerId not found', {payload: msg.payload});\n\n        path = sau.app.getDeviceBrokersPath(_meta) + '.' + solaceBrokerId + '.about';\n        about = global.get(path);\n        if(su.misc.isObjectEmpty(about)) return throwError(msg, \"'broker.about' not found in global context\", {path: path});\n        msg.payload = {\n            deviceBroker: {\n                solaceBrokerId: solaceBrokerId,\n                about: about\n            }\n        }\n        return msg;\n    }\n    /*\n    case 'config.deviceDefaults': {\n        msg.payload = {\n            deviceDefaults: global.get(sau.app.getConfigPath(_meta) + '.deviceDefaults')\n        }\n        return msg;\n    }\n    */\n    case 'config.broker': {\n        msg.payload = {\n            config: {\n                broker: global.get(sau.app.getConfigPath(_meta) + '.broker')\n            }\n        }\n        return msg;\n    }\n    case 'config.broker.sempv2': {\n        msg.payload = {\n            config: {\n                broker: {\n                    sempv2: global.get(sau.app.getConfigPath(_meta) + '.broker.sempv2')\n                }\n            }\n        }\n        return msg;\n    }\n    case 'config.broker.mqtt': {\n        msg.payload = {\n            config: {\n                broker: {\n                    mqtt: global.get(sau.app.getConfigPath(_meta) + '.mgmtBroker')\n                }\n            }\n        }\n        return msg;\n    }\n    default: {\n        return throwError(msg, 'unknown msg.payload.get.state', {payload: msg.payload});\n    }\n}\n\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 560,
        "wires": [
            [
                "c291703e.44635"
            ]
        ]
    },
    {
        "id": "781428bf.b860f8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.broker.mqtt",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet envVars = [\n    'SOLACE_SAP_DEMO_MQTT_BROKER_HOST',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_PORT',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_USER',\n    'SOLACE_SAP_DEMO_MQTT_BROKER_PASSWORD',\n    'SOLACE_SAP_DEMO_MQTT_CLIENT_ID'\n    ];\n\nlet config = {};\nfor(i=0; i < envVars.length; i++) {\n    let v = env.get(envVars[i]);\n    if(su.misc.isStringEmpty(v)) return throwError(msg, \"environment variable not found\", {envVar: envVars[i]});\n    su.misc.setObjectPath(config, envVars[i], v);\n}\n\nglobal.set(sau.app.getConfigPath(_meta) + '.broker.mqtt', config);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 380,
        "wires": [
            [
                "9038781a.7c79d8"
            ]
        ]
    },
    {
        "id": "190b317f.4c610f",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.set.state')) return throwError(msg, 'msg.payload.set.state is empty');\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params')) return throwError(msg, 'msg.payload.set.params is empty');\n    \n    return true;\n}\n\nfunction isValueBoolean(msg) {\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params.value')) return throwError(msg, 'msg.payload.set.params.value is empty');\n    if(!su.misc.isBoolean(msg.payload.set.params.value)) return throwError(msg, 'msg.payload.set.params.value is not a boolean', {payload: msg.payload});\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nswitch(msg.payload.set.state) {\n    case 'app.isStartupComplete': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsStartupCompletePath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'app.isInitialized': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsInitializedPath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'broker.isConnected': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsAppSolaceBrokerConnectedPath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'broker.about': {\n        \n        let solaceBrokerId = msg.payload.set.params.solaceBrokerId;\n        if(su.misc.isStringEmpty(solaceBrokerId)) return throwError(msg, 'msg.payload.set.params.solaceBrokerId is empty', {payload: msg.payload});\n        \n        let about = msg.payload.set.params.about;\n        if(su.misc.isObjectEmpty(about)) return throwError(msg, 'msg.payload.set.params.about is empty', {payload: msg.payload});\n\n        let path = sau.app.getDeviceBrokersPath(_meta) + '.' + solaceBrokerId + '.about';\n        \n        global.set(path, about);\n        \n        return msg;\n    }\n    case 'app.configfile': {\n        /*\n        msg.payload = {\n            set: {\n                state: 'app.configfile',\n                params: {\n                    filename: 'solace-xdk110-mgmt-config.json'\n                } \n            }\n        }\n        */\n        \n        let filename = msg.payload.set.params.filename;\n        if(su.misc.isStringEmpty(filename)) return throwError(msg, 'msg.payload.set.params.filename is empty', {payload: msg.payload});\n        \n        let path = sau.app.getConfigfilePath(_meta) + '.filename';\n        \n        global.set(path, filename);\n        \n        msg.filename = filename;\n\n        return [null, msg];\n    }\n    default: {\n        return throwError(msg, 'unknown msg.payload.set.state', {payload: msg.payload});\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 520,
        "y": 600,
        "wires": [
            [
                "c291703e.44635"
            ],
            [
                "187dc50e.337d6b"
            ]
        ],
        "outputLabels": [
            "generic",
            "app.configfile"
        ]
    },
    {
        "id": "27a69d9c.3a3da2",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "setInput",
        "func": "msg.payload = {\n    get: {\n        state: 'app.about'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "6c8901a9.e67ab"
            ]
        ]
    },
    {
        "id": "c291703e.44635",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1e49af32.8e4871",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.isStartupComplete',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "8b4c82c0.ab974"
            ]
        ]
    },
    {
        "id": "8b4c82c0.ab974",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app set startupComplete",
        "env": [
            {
                "name": "instance-name",
                "value": "app set startupComplete",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "e13cb973.0aab68",
                "784b6bf1.5317b4"
            ]
        ]
    },
    {
        "id": "99df6675.e1bf88",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "utils.log (app) start initialization",
        "func": "\nmsg.payload = {\n    log:    '_START_:_INITIALIZATION_:' + JSON.stringify(msg.payload.app.properties) \n/*\n    log:    'START:INITIALIZATION:componentName=' + \n            msg.payload.app.properties.componentName + \n            ':displayName=' + msg.payload.app.properties.displayName + \n            ':instanceId=' + msg.payload.app.properties.instanceId\n*/\n}\n\nnode.log(msg.payload.log);           \n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 750,
        "y": 580,
        "wires": []
    },
    {
        "id": "f02344e2.5b23b8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "start",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"start\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 620,
        "wires": [
            [
                "70263948.fe9768",
                "b952b68d.087178"
            ]
        ]
    },
    {
        "id": "59c5efb3.5e814",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get:properties",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get:properties",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 580,
        "wires": [
            [
                "99df6675.e1bf88"
            ]
        ]
    },
    {
        "id": "70263948.fe9768",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.properties'\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "59c5efb3.5e814"
            ]
        ]
    },
    {
        "id": "51efcbf6.b4be64",
        "type": "catch",
        "z": "72433083.19e34",
        "name": "catch-all x (err handler)",
        "scope": [
            "e62ceaed.ba9d88",
            "8d628a2d.6a2d98",
            "502e8b1d.28cda4",
            "9517c0dd.9e911",
            "efd76714.54afd8",
            "479174e5.df47cc",
            "fb2e0fdb.2a72d",
            "9602ae1.378fd5",
            "c993e3b5.08e35",
            "fadb9ae6.eac3a8",
            "df8275be.a20e68",
            "7974ec04.8977c4",
            "ed2cae31.155fb",
            "644ca100.f8086",
            "71fb6edf.d408",
            "f8140932.bb3d38",
            "750c1d8d.8501c4"
        ],
        "uncaught": false,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "c73be3b9.05f3a"
            ]
        ]
    },
    {
        "id": "efd76714.54afd8",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, \"property 'instance-name' not found\");\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidComponentInstanceProperties(msg) {\n    \n    let cips = {\n        method: env.get('method'),\n        solaceBrokerId: env.get('solaceBrokerId')\n    };\n\n    if(su.misc.isStringEmpty(cips.method)) return throwError(msg, \"property 'method' not found\");\n\n    if(!su.misc.isStringEmpty(cips.solaceBrokerId)) {\n        \n        if(!su.misc.isValidId(cips.solaceBrokerId)) return throwError(\"property 'solaceBrokerId' is not a valid id\");\n            \n    } else return throwError(\"property 'solaceBrokerId' not found\");\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, cips);\n    \n    return true;\n\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return; \n\nif(!isValidComponentInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "479174e5.df47cc"
            ]
        ]
    },
    {
        "id": "479174e5.df47cc",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// main ----------------------------------------------------\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, \"msg instance property 'method' not found\");\n\nswitch(method) {\n    case 'get':\n        return [msg];\n    case 'set':\n        return [null, msg];\n    case 'unset':\n        return [null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 3,
        "noerr": 0,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "644ca100.f8086"
            ],
            [
                "c993e3b5.08e35"
            ],
            [
                "fb2e0fdb.2a72d"
            ]
        ],
        "outputLabels": [
            "get",
            "set",
            "unset"
        ]
    },
    {
        "id": "fb2e0fdb.2a72d",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.unset",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nglobal.set(path, undefined);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 260,
        "wires": [
            [
                "f8140932.bb3d38"
            ]
        ]
    },
    {
        "id": "9602ae1.378fd5",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1620,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "be6725c8.ea7ea8",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get:config.sempv2",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get:config.sempv2",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 800,
        "wires": [
            [
                "7867718f.f1e47"
            ]
        ]
    },
    {
        "id": "ccc8ddc6.25c34",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'config.broker.sempv2'\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 800,
        "wires": [
            [
                "be6725c8.ea7ea8"
            ]
        ]
    },
    {
        "id": "c993e3b5.08e35",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidBrokerConfig(msg, c) {\n    \n    let isError = false;\n    let message;\n    let details = {};\n    \n    if(su.misc.isObjectEmpty(c)) {\n        \n        isError = true;\n        message = \"'brokerConfig' not found in msg payload\";\n        \n    } else {\n\n        let issues = suSempv2.config.testValidBrokerConfig(c);\n        if(issues.length > 0) {\n            isError = true;\n            message = \"'brokerConfig' in msg payload is not valid\";\n            details.issues = issues;\n        }\n    }\n    \n    if(isError) { \n        details.payload = msg.payload, \n        details.expected = {\n                path: su.flow.getMsgPayloadPath(_meta, 'brokerConfig'),\n                sampleContents: suSempv2.config.getBrokerConfigReference(),\n        };\n        return throwError(msg, message, details);\n    }\n    return true;\n}\n\n// main ----------------------------------------------------\n\nlet c = su.flow.getMsgPayload(msg, _meta, 'brokerConfig');\n\nif(!isValidBrokerConfig(msg, c)) return;\n\n// create a sempv2.config function for this\nlet config = {\n    basePath: c.basePath,\n    vpn: c.vpn,\n    virtualRouter: c.virtualRouter,\n    headers: {\n      Authorization: 'Basic ' + new Buffer(c.user + ':' + c.pwd).toString('base64')\n    },\n    requestTimeout: 10000,\n    api: {\n        mqttSession: {\n            basePath: c.basePath + '/msgVpns/' + c.vpn + '/mqttSessions'\n        },\n        about: {\n            basePath: c.basePath\n        }\n    }\n};\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nglobal.set(path, config);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 220,
        "wires": [
            [
                "df8275be.a20e68"
            ]
        ]
    },
    {
        "id": "7867718f.f1e47",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "\nlet payload = {\n    sempv2: {\n        config: {\n            brokerConfig: msg.payload.config.broker.sempv2\n        }\n    }\n}\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 800,
        "wires": [
            [
                "d464c6aa.271cd8"
            ]
        ]
    },
    {
        "id": "d464c6aa.271cd8",
        "type": "subflow:72433083.19e34",
        "z": "3eb672f6.dc73fe",
        "name": "sempv2.config.set@app",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2.config.set@app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "c3d7a262.3e2",
                "fc6dd38b.c144e"
            ],
            [
                "a3c60d3d.c74f5",
                "336138b0.b0e838"
            ]
        ]
    },
    {
        "id": "fadb9ae6.eac3a8",
        "type": "subflow:6b984824.a17568",
        "z": "72433083.19e34",
        "name": "sempv2 config-sempv2 about",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 config-sempv2 about",
                "type": "str"
            },
            {
                "name": "resource",
                "value": "all",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempv2 config-sempv2 about",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "7974ec04.8977c4"
            ],
            [
                "ed2cae31.155fb"
            ]
        ]
    },
    {
        "id": "884cdb87.779788",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.debug(sempv2.about)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1160,
        "y": 140,
        "wires": []
    },
    {
        "id": "616e0712.29bdf8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, \"property 'instance-name' not found\");\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidComponentInstanceProperties(msg) {\n\n    let cips = {\n        solaceBrokerId: env.get('solaceBrokerId'),\n        resource: env.get('resource'),\n        vpn: env.get('vpn')\n    };\n\n    if(su.misc.isStringEmpty(cips.solaceBrokerId)) isPayloadRequiresSolaceBrokerId = true;\n    else {\n        if(!su.misc.isValidId(cips.solaceBrokerId)) return throwError(msg, \"property 'solaceBrokerId' is not a valid id\", {solaceBrokerId: cips.solaceBrokerId});\n        solaceBrokerId = cips.solaceBrokerId;\n    }\n\n    if(su.misc.isStringEmpty(cips.resource)) return throwError(msg, \"property 'resource' not found\");\n\n    switch(cips.resource) {\n        case 'all':\n        case 'about':\n        case 'about/api':\n        case 'about/user':\n        case 'about/user/msgVpns':\n            break;\n        case 'about/user/msgVpns/{vpn}': {\n            if(su.misc.isStringEmpty(cips.vpn)) \n                return throwError(msg, \"property 'vpn' required for resource='about/user/msgVpns/{vpn}'\");\n        }    \n            break;\n        default: {\n            return throwError(msg, 'unknown resource', {resource: cips.resource});\n        }\n    }\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, cips);\n    \n    return true;\n}\n\nfunction isValidMsgPayloadParams(msg, params) {\n\n    let details = {\n        payload: msg.payload,\n        expected: {\n            params: {\n                path: su.flow.getMsgPayloadPath(_meta, 'params'),\n                sampleContents: suSempv2.about.getMsgPayloadParamsReference()\n            }\n        }\n    }   \n    \n    if(su.misc.isObjectEmpty(params)) return throwError(msg, \"'params' not found in msg payload\", details);\n    \n    if(isPayloadRequiresSolaceBrokerId) {\n\n        if(su.misc.isStringEmpty(params.solaceBrokerId)) return throwError(msg, \"'params.solaceBrokerId' not found in msg payload\", details);\n\n        if(!su.misc.isValidId(params.solaceBrokerId)) return throwError(msg, \"'params.solaceBrokerId' is not a valid id\", {solaceBrokerId: params.solaceBrokerId});\n        \n        solaceBrokerId = params.solaceBrokerId;\n    }\n    \n    return true;\n}\n\n// main ----------------------------------------------------\n\nvar solaceBrokerId = null;\nvar isPayloadRequiresSolaceBrokerId = false;\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return; \n\nif(!isValidComponentInstanceProperties(msg)) return;\n\nlet params = su.flow.getMsgPayload(msg, _meta, 'params');\n  \nif(!isValidMsgPayloadParams(msg, params)) return;\n\nlet path = suSempv2.config.getConfigPath(solaceBrokerId);\nlet sempv2 = global.get(path);\nif(su.misc.isObjectEmpty(sempv2)) return throwError(msg, \"sempv2 config not found in global context\", {path: path})\nlet update = {\n    sempv2: sempv2\n};\n\nsu.misc.merge(params, update);\n\nsu.flow.updateMsgInstanceProperties(msg, _meta, params)\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 280,
        "wires": [
            [
                "ee0d5851.17a708"
            ]
        ]
    },
    {
        "id": "b4377583.93fd98",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "utils.subflowErrorHandler(sempv2.about)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\n    var _meta = suSempv2.about.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "df8275be.a20e68",
        "type": "function",
        "z": "72433083.19e34",
        "name": "input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n      sempv2: {\n          about: {\n              params: {\n                solaceBrokerId: mips.solaceBrokerId\n              }\n          }\n     }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 220,
        "wires": [
            [
                "fadb9ae6.eac3a8"
            ]
        ]
    },
    {
        "id": "ee0d5851.17a708",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.calls",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n// main ----------------------------------------------------\n\nlet ips = su.flow.getMsgInstanceProperties(msg, _meta); \nvar _payload = {\n    resource: ips.resource, \n    solaceBrokerId: ips.solaceBrokerId\n}\n\nvar calls = [];\n\nlet call;\n\nswitch(_payload.resource) {\n    case 'about':\n    case 'about/api':\n    case 'about/user':\n    case 'about/user/msgVpns': {\n        call = { \n            payload: { \n                resource: _payload.resource, \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break; \n    case 'about/user/msgVpns/{vpn}': {\n        call = { \n            payload: { \n                resource: 'about/user/msgVpns/' + _payload.resourceParams.vpn, \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break;\n    case 'all': {\n        call = { \n            payload: { \n                resource: 'about', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/api', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/user', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n\n        call = { \n            payload: { \n                resource: 'about/user/msgVpns', \n                solaceBrokerId: _payload.solaceBrokerId \n            }\n        };\n        calls.push(call);\n    }\n    break;\n    default:\n        return throwError('unknown resource', {resource: _payload.resource}, msg);\n}\n\nmsg.payload = {\n    start: true,\n    end: true,\n    items: calls\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "d0a63fcb.ec5a2"
            ]
        ]
    },
    {
        "id": "e907d4d0.096d08",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.debug(utils.forEach)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "c3b8d0b6.9f5fa",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'property \"instance-name\" not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidNewInstanceMsgPayload(msg) {\n\n    if(su.misc.isObjectEmpty(msg.payload)) return throwError(msg, 'msg.payload not found', {msg: msg});\n    if(!su.misc.hasObjectPath(msg.payload, 'start')) return throwError(msg, 'msg.payload.start not found', {payload: msg.payload});\n    if(!su.misc.hasObjectPath(msg.payload, 'end')) return throwError(msg, 'msg.payload.end not found', {payload: msg.payload});\n    if(!su.misc.hasObjectPath(msg.payload, 'items')) return throwError(msg, 'msg.payload.items not found', {payload: msg.payload});\n    if(!su.misc.isArray(msg.payload.items)) return throwError(msg, 'msg.payload.items is not an array', {payload: msg.payload});\n    if(msg.payload.items.length === 0) return throwError(msg, 'msg.payload.items has no elements', {payload: msg.payload});\n\n    return true;\n}\n\n\n// main ----------------------------------------------------\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\n// new instance or continue?\nlet isNewInstance = (su.flow.getMsgInstanceProperties(msg, _meta) === null);\n\nlet action;\n\nif(isNewInstance) {\n\n    msg = su.flow.initMsgProperties(msg, _meta);\n\n    if(!isValidNewInstanceMsgPayload(msg)) return;\n\n    action = 'start';\n    let instanceProperties = {\n        start: JSON.parse(JSON.stringify(msg.payload.start)),\n        end: JSON.parse(JSON.stringify(msg.payload.end)),\n        items: JSON.parse(JSON.stringify(msg.payload.items))\n    }\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, instanceProperties);\n\n} else {\n    \n    let instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n    if(instanceProperties === null) return throwError(msg, 'instance properties not found in msg', {msg: msg});\n    \n    // i is not there at the start\n    let i = su.misc.getObjectPath(instanceProperties, 'i', null);\n    if(i === null || instanceProperties.i+1 < instanceProperties.items.length) {\n        \n        action ='next';\n\n    } else {\n        \n        action = 'end';\n\n    }\n}\n\nswitch(action) {\n    case 'start': {\n        return [msg];\n    }\n    case 'next': {\n        return [null, msg];\n    }\n    case 'end': {\n        return [null, null, msg];\n    }\n    default: return throwError(msg, 'unknown action', {action: action});\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "cb9e650e.ac4bc8"
            ],
            [
                "ed1738d5.4622f8"
            ],
            [
                "404b41c4.06b95"
            ]
        ],
        "outputLabels": [
            "start",
            "next",
            "end"
        ]
    },
    {
        "id": "d0a63fcb.ec5a2",
        "type": "subflow:44813701.a560c8",
        "z": "6b984824.a17568",
        "name": "sempv2 about forEach",
        "env": [
            {
                "name": "instance-name",
                "value": "sempv2 about forEach",
                "type": "str"
            },
            {
                "name": "instanceName",
                "value": "sempV2.config",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "fbc76c69.56629"
            ],
            [
                "c4faeee4.3ed8d"
            ],
            [
                "382d8818.fc2bd8"
            ]
        ]
    },
    {
        "id": "cb9e650e.ac4bc8",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendStart",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n    start: instanceProperties.start\n}\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"start\"});\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fbc76c69.56629",
        "type": "delay",
        "z": "6b984824.a17568",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 650,
        "y": 380,
        "wires": [
            [
                "d0a63fcb.ec5a2"
            ]
        ]
    },
    {
        "id": "ed1738d5.4622f8",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendNextItem",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\n// i is not there at the start\nlet i = su.misc.getObjectPath(instanceProperties, 'i', null);\nif(i === null) i = 0; else i++;\n\n// save i\ninstanceProperties.i = i;\nmsg = su.flow.updateMsgInstanceProperties(msg, _meta, instanceProperties);\n//su.sf.setMsgPropertiesInstance(msg, packageId, componentId, instanceProperties);\n\n// send next one:\nmsg.payload = {\n    item: {\n        i: i,\n        v: instanceProperties.items[i],\n        l: instanceProperties.items.length\n    }\n}\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"item:\" + (i+1) + \"(\" + instanceProperties.items.length + \")\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c4faeee4.3ed8d",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.input4http",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet solaceBrokerId = msg.payload.item.v.payload.solaceBrokerId;\n\nlet sempv2 = su.flow.getMsgInstanceProperties(msg, _meta).sempv2;\n\nlet url=sempv2.api.about.basePath + '/' + msg.payload.item.v.payload.resource;\n\nvar httpMsg = {\n    headers: sempv2.headers,\n    method: 'GET',\n    url: url,\n    requestTimeout: sempv2.requestTimeout\n}\n\nsu.misc.merge(msg, httpMsg);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"http get \" + msg.payload.item.v.payload.resource});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 260,
        "wires": [
            [
                "dfaf881c.36c188"
            ]
        ]
    },
    {
        "id": "dfaf881c.36c188",
        "type": "http request",
        "z": "6b984824.a17568",
        "name": "sempv2.about.httpRequest",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "cb9207f3.f22508"
            ]
        ]
    },
    {
        "id": "cb9207f3.f22508",
        "type": "switch",
        "z": "6b984824.a17568",
        "name": "200?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 260,
        "wires": [
            [
                "6f489538.8a154c"
            ],
            [
                "94e6c844.2878f8"
            ]
        ]
    },
    {
        "id": "94e6c844.2878f8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setOutputError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// put the error together\n\nvar errorDetails = {\n    _meta: _meta,\n    statusCode: msg.statusCode,\n    payload: msg.payload\n};\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) errorDetails.type = 'api'; \nelse errorDetails.type = 'http';\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\nmsgUpdate = {\n    payload: {\n        sempv2: {\n            about: {\n                solaceBrokerId: mips.solaceBrokerId,\n                error: errorDetails    \n            }\n        }\n    }\n}\n\nsu.misc.merge(msg, msgUpdate);\n\nsuccess = su.flow.unsetMsg(msg);\nmsg.payload.meta = undefined;\n\nnode.status({fill:\"red\", shape:\"dot\", text:\"end:error\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1610,
        "y": 200,
        "wires": [
            [
                "ddd8e537.7b8b08"
            ]
        ]
    },
    {
        "id": "6f489538.8a154c",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setInstanceData",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// get the resource from the url\n// msg.url: \"https://mr6m7sc2dxasz.messaging.solace.cloud:943/SEMP/v2/config/about/user\"\n// extract: everything after /about, convert / to .\n\nvar pos = msg.url.lastIndexOf('/about');\nif(pos === -1) return throwError(msg, '/about not found in url', {url: msg.url});\nvar resourceUrl = msg.url.substr(pos);\nvar resourceDot = resourceUrl.replace(/\\//g, '.');\n//node.warn('resourceDot = ' + resourceDot);\n//contains '.about.user'\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\n//if(su.misc.isObjectEmpty(mips.data)) mips.data = { about: {} };\n\n//about = mips.data.about;\n\nlet path = 'data' + resourceDot;\n\nsu.misc.setObjectPath(mips, path, msg.payload.data);\nsu.misc.setObjectPath(mips, path + '.server', msg.headers.server);\n\n//su.misc.merge(mips, about);\n\nmsg = su.flow.updateMsgInstanceProperties(msg, _meta, mips);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 520,
        "wires": [
            [
                "fbc76c69.56629"
            ]
        ]
    },
    {
        "id": "404b41c4.06b95",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.forEach.sendEnd",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.forEach.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet instanceProperties = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = {\n    end: instanceProperties.end\n}\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4b5c1ce7.4c9eb4",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.setOutputSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta); \n\nmsgUpdate = {\n    payload: {\n        sempv2: {\n            about: {\n                solaceBrokerId: mips.solaceBrokerId,\n                data: mips.data.about    \n            }\n        }\n    }\n}\n\nsu.misc.merge(msg, msgUpdate);\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"end:success\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1600,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "382d8818.fc2bd8",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.stripHttpFromMsg",
        "func": "\nmsg.headers = undefined;\nmsg.method = undefined;\nmsg.url = undefined;\nmsg.requestTimeout = undefined;\nmsg.statusCode = undefined;\nmsg.responseUrl = undefined;\nmsg.redirectList = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 300,
        "wires": [
            [
                "4b5c1ce7.4c9eb4"
            ]
        ]
    },
    {
        "id": "89ba3432.cbbfa8",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.set(broker.about)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.set(broker.about)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1540,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c3d7a262.3e2",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'broker.about',\n        params: {\n            solaceBrokerId: msg.payload.sempv2.about.solaceBrokerId,\n            about: msg.payload.sempv2.about\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "89ba3432.cbbfa8"
            ]
        ]
    },
    {
        "id": "1530c0ba.819a4f",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "b661b75c.e7b738",
        "name": "app get deviceBroker about",
        "env": [
            {
                "name": "instance-name",
                "value": "app get deviceBroker about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "c2676af7.59e7d8"
            ]
        ]
    },
    {
        "id": "27aaf355.bce7dc",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'broker.about',\n        params: {\n            solaceBrokerId: 'solaceDeviceBroker'\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 640,
        "wires": [
            [
                "1530c0ba.819a4f"
            ]
        ]
    },
    {
        "id": "7974ec04.8977c4",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.checks",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet about = msg.payload.sempv2.about.data;\nif(su.misc.isObjectEmpty(about)) return throwError(msg, 'msg.payload.sempv2.about not found', {payload:payload});\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\nlet config = global.get(path);\nif(su.misc.isObjectEmpty(config)) return throwError(msg, 'broker config not found in global context', {path: path});\n\n\n// now validate if configured vpn exists\nlet actualVpns = about.user.msgVpns;\nif(su.misc.isArrayEmpty(actualVpns)) return throwError(msg, 'about.user.msgVpns not found in sempv2/about call to broker', {about: about});\n\nlet actualVpn = su.misc.find(actualVpns, function(o) { return o.msgVpnName === config.vpn; });\nif(actualVpn === undefined) return throwError(msg, 'configured msgVpn not found on broker', {configuredVpn: config.vpn, brokerVpns: actualVpns});\n// check that \"accessLevel\": \"read-write\"\nif(actualVpn.accessLevel !== 'read-write') return throwError(msg, 'accessLevel of vpn not \\'read-write\\'', {brokerVpn: actualVpn});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 220,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "ed2cae31.155fb",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.endError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nvar aboutError = msg.payload.sempv2.about.error;\n\nmsg.payload = {\n    sempv2: {\n        config: {\n            error: aboutError\n        }\n    }\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"end:error\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1630,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "644ca100.f8086",
        "type": "function",
        "z": "72433083.19e34",
        "name": "sempv2.config.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.config.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// main ----------------------------------------------------\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet path = su.flow.getBasePath(_meta) + '.' + mips.solaceBrokerId;\n\nlet config = global.get(path);\n\nif(su.misc.isObjectEmpty(config)) return throwError(msg, 'broker config not found in global context', {path: path});\n\nsu.flow.setMsgPayload(msg, _meta, 'brokerConfig', config);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 180,
        "wires": [
            [
                "71fb6edf.d408"
            ]
        ]
    },
    {
        "id": "ddd8e537.7b8b08",
        "type": "function",
        "z": "6b984824.a17568",
        "name": "sempv2.about.stripHttp",
        "func": "\nmsg.headers = undefined;\nmsg.method = undefined;\nmsg.url = undefined;\nmsg.requestTimeout = undefined;\nmsg.statusCode = undefined;\nmsg.responseUrl = undefined;\nmsg.redirectList = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "71fb6edf.d408",
        "type": "function",
        "z": "72433083.19e34",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 180,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "f8140932.bb3d38",
        "type": "function",
        "z": "72433083.19e34",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 260,
        "wires": [
            [
                "9602ae1.378fd5"
            ]
        ]
    },
    {
        "id": "a3c60d3d.c74f5",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.sempV2.error",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nif(su.misc.hasObjectPath(msg, 'payload.error.payload.meta.error')) {\n    \n    msg.sempV2Error = msg.payload.error.payload.meta.error;\n    return msg;    \n}\n\nmsg.sempv2Error = {\n    statusCode: msg.statusCode,\n    payload: msg.payload\n}\nreturn msg;\n\n//return throwError('unknown error, can\\'t extract error description. check msg and add here extraction rule', null, msg);\n   ",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 800,
        "wires": [
            [
                "d90447e1.a3b2d8"
            ]
        ]
    },
    {
        "id": "d90447e1.a3b2d8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "errorUsrMsg",
        "func": "\n/*\nlet message = 'Broker id: \\'solaceDeviceBroker\\'' +\n                '<br/>' + \n                'error:' +\n                '<br/><pre>' + JSON.stringify(msg.sempV2Error,2) + '</pre>' + \n                '<br/>' +               \n                '<br/>-check your internet connection' +\n                '<br/>-check your connection credentials' +\n                '<br/>' + \n                '<br/>Please fix and re-start the app.';\n*/                \n\nlet message = 'Broker id: \\'solaceDeviceBroker\\'' +\n                '<br/>' + \n                'error:' +\n                '<br/><pre>' + JSON.stringify(msg.sempV2Error,null, 1) + '</pre>' + \n                '<br/>Please fix and re-start the app.';\n\nmsg.topic   = 'Error executing SempV2 call on device broker';\n\nmsg.payload = message;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 800,
        "wires": [
            [
                "205744f.4d5a1bc"
            ]
        ]
    },
    {
        "id": "205744f.4d5a1bc",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "dialog",
        "displayTime": "120",
        "highlight": "green",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "usrDialog",
        "x": 1740,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "8a9ce915.54acb8",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "600",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "errPopup",
        "x": 1520,
        "y": 840,
        "wires": []
    },
    {
        "id": "336138b0.b0e838",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.topic = 'SempV2 Error';\nmsg.payload = \"see log for more details\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1380,
        "y": 840,
        "wires": [
            [
                "8a9ce915.54acb8"
            ]
        ]
    },
    {
        "id": "ab0b2dca.6528",
        "type": "comment",
        "z": "b661b75c.e7b738",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 560,
        "wires": []
    },
    {
        "id": "ede934bb.6c6d58",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "utils.debug(app)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1220,
        "y": 200,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "6d711a4a.39ac34",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "82c135ff.9b73f8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.error",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\nif(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});",
        "outputs": 0,
        "noerr": 0,
        "x": 1200,
        "y": 520,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "735b775a.b754d8",
        "type": "catch",
        "z": "317873af.a031fc",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "7484821b.b6244c"
            ]
        ]
    },
    {
        "id": "7484821b.b6244c",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "utils.logError(appErrHandler)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"internal error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 0,
        "noerr": 0,
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "e243a40b.346b98",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "utils.debug(appErrHandler)",
        "func": "\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4bd780ca.5274",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.logError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nnode.error('_INTERNAL_SERVER_ERROR_\\n' + errorObj.toString());\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 380,
        "wires": [
            [
                "70faa34.7dde75c"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg"
        ]
    },
    {
        "id": "3d0f9846.147378",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "The End -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 711,
        "wires": []
    },
    {
        "id": "aea90ded.7c436",
        "type": "status",
        "z": "317873af.a031fc",
        "name": "",
        "scope": [
            "d3d9e124.a0f95",
            "7484821b.b6244c"
        ],
        "x": 100,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8696ab06.ffa0f8",
        "type": "subflow:8e181349.856bd",
        "z": "317873af.a031fc",
        "name": "appErrHandler.SolaceError.setTotalErrorCount",
        "env": [
            {
                "name": "instance-name",
                "value": "appErrHandler.SolaceError.setTotalErrorCount",
                "type": "str"
            },
            {
                "name": "method",
                "value": "setTotalErrorCount",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 540,
        "wires": [
            [],
            [
                "a042ac9c.ba70f"
            ]
        ]
    },
    {
        "id": "5a0dacb9.04ce04",
        "type": "function",
        "z": "8e181349.856bd",
        "name": "SolaceError.method.setTotalErrorCount",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.SolaceError.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\nlet totalErrorCount = msg.payload.solaceErrorCount;\nif(!su.misc.isNumber(totalErrorCount)) return throwError(msg, 'msg.payload.solaceErrorCount is not a number', {payload: msg.payload});\n\n// update properties        \nlet properties = global.get(su.flow.getPropertiesPath(_meta));\nsu.SolaceError.updateStatePropertiesTotalErrorCount(properties, totalErrorCount);\n\n// save it in global state\nglobal.set(su.flow.getPropertiesPath(_meta), properties);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 360,
        "wires": [
            [
                "7cd15b6d.5a5a04"
            ]
        ]
    },
    {
        "id": "a042ac9c.ba70f",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "eaae46ee.ec4098",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 380,
        "y": 260,
        "wires": []
    },
    {
        "id": "ded44cbd.6f7fb",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "todo SolaceErrorHandler",
        "func": "\nnode.warn(node.name + ': implement on browser connect', msg);\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "784b6bf1.5317b4",
        "type": "link out",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.startup.create",
        "links": [
            "2d5224dc.2df6bc"
        ],
        "x": 1350,
        "y": 300,
        "wires": [],
        "l": true
    },
    {
        "id": "ca728d7e.faee2",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "f492cfb7.ad103"
            ]
        ]
    },
    {
        "id": "f492cfb7.ad103",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'get':\n        return[msg];\n    case 'set': \n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "763d50e6.dd6b7"
            ],
            [
                "af583688.0c15b8"
            ]
        ],
        "outputLabels": [
            "get",
            "set"
        ]
    },
    {
        "id": "5685c913.594f58",
        "type": "comment",
        "z": "4f07498e.ebb5f8",
        "name": "utils.flowProperties -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a4e0854.e6b948",
        "type": "status",
        "z": "4f07498e.ebb5f8",
        "name": "",
        "scope": null,
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "763d50e6.dd6b7",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flowProperties.getParentFlowPath();\n\nflowProperties = flow.get(path);\n\nif(su.misc.isObjectEmpty(flowProperties)) return throwError(msg, 'flowProperties not found', {path:path});\n\nsu.flowProperties.setMsgFlowProperties(msg, flowProperties);\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "a4aea2a3.c1433"
            ]
        ]
    },
    {
        "id": "af583688.0c15b8",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet e = {\n    packageId: env.get('packageId'),    \n    componentId: env.get('componentId')\n}\n\nif(su.misc.isStringEmpty(e.packageId)) return throwError(msg, 'env.packageId not found', {env:e});\nif(su.misc.isStringEmpty(e.componentId)) return throwError(msg, 'env.componentId not found', {env:e});\n\nflow.set(su.flowProperties.getParentFlowPath(), su.flowProperties.createFlowProperties(e.packageId, e.componentId));\n\nreturn msg;\n\n// ------------\n// The End\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 240,
        "wires": [
            [
                "a4aea2a3.c1433"
            ]
        ]
    },
    {
        "id": "a4aea2a3.c1433",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "flowProperties.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.flowProperties.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c4bd5101.221ef",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "3eb672f6.dc73fe",
        "name": "flowProperties:set main.app",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set main.app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "app",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "b85f42f2.75907"
            ]
        ]
    },
    {
        "id": "e6c7abb3.5c08f8",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "b661b75c.e7b738",
        "name": "flowProperties:set main.about",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set main.about",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "about",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5858ed7a.deaca4",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todo: getting lots of them, only do it once... keep state",
        "info": "",
        "x": 1480,
        "y": 120,
        "wires": []
    },
    {
        "id": "c8e458a6.7dc698",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "b661b75c.e7b738",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "8532221e.d70a4"
            ]
        ]
    },
    {
        "id": "c0a145aa.41d538",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "3eb672f6.dc73fe",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "b5a3e8df.459f58"
            ]
        ]
    },
    {
        "id": "bdfbbce4.d6ca4",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "test: main_about_javascriptError_1111111",
        "func": "\nlet error = main_about_javascriptError_1111111.throw(msg);\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1460,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d3a6a2.d7d2c96",
        "type": "catch",
        "z": "4f07498e.ebb5f8",
        "name": "catch-all x (err handler)",
        "scope": [
            "ca728d7e.faee2",
            "f492cfb7.ad103",
            "5685c913.594f58",
            "9a4e0854.e6b948",
            "763d50e6.dd6b7",
            "af583688.0c15b8",
            "a4aea2a3.c1433"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "5ce3bcc2.d2fd74"
            ]
        ]
    },
    {
        "id": "5ce3bcc2.d2fd74",
        "type": "function",
        "z": "4f07498e.ebb5f8",
        "name": "utils.logError(flowProperties)",
        "func": "\nlet message =   '\\nSolaceError: INTERNAL ERROR' +\n                '\\n---------------------------\\n';\n\ntry {\n\n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.SolaceError.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n\n    message += errObj.getMessage() + \n                '\\n' + JSON.stringify(errObj.getAsDataObject(), null, 1); \n    \n    node.error(message);\n    \n    msg = errObj.getAsDataObject();\n\n} catch(err) {\n    message +=  'cannot create SolaceError object, error in logger:\\n' + \n                '\\n' + err.name + ':' + err.message + \n                '\\nmsg=\\n' + JSON.stringify(msg, null, 1);\n                \n    node.error(message);\n    \n    msg = message;\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"internal error\"});\n\nreturn msg;\n\n// -------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5615438f.c8e9fc",
        "type": "ui_template",
        "z": "b661b75c.e7b738",
        "group": "298a7e90.c76a82",
        "name": "displayAppDetails",
        "order": 2,
        "width": "21",
        "height": "5",
        "format": "\n\n<div>\n    <pre>{{msg.payload.app.about.details | json}}</pre>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 870,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b85f42f2.75907",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.clear-state (app)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.clear-state (app)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "clear-state",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "fb1bd8f9.91f568"
            ]
        ]
    },
    {
        "id": "4c8cf9e.3b8d708",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "utils.subflowErrorHandler(forEach) - make a subflow-node",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.forEach.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "d9c35b38.533828",
        "type": "function",
        "z": "44813701.a560c8",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c73be3b9.05f3a",
        "type": "function",
        "z": "72433083.19e34",
        "name": "utils.subflowErrorHandler(sempv2.config)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\n    var _meta = suSempv2.config.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "750c1d8d.8501c4",
        "type": "function",
        "z": "72433083.19e34",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "193fe52b.b9a7fb",
        "type": "link in",
        "z": "b661b75c.e7b738",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 210,
        "y": 640,
        "wires": [
            [
                "27aaf355.bce7dc"
            ]
        ],
        "l": true
    },
    {
        "id": "f96041d6.ab02",
        "type": "link out",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.initialize.create",
        "links": [
            "193fe52b.b9a7fb",
            "af47e4e7.3f1028",
            "2bce26b2.a7cd2a",
            "7228d7e4.7201d8"
        ],
        "x": 610,
        "y": 1020,
        "wires": [],
        "l": true
    },
    {
        "id": "8940887d.e380d8",
        "type": "link in",
        "z": "3eb672f6.dc73fe",
        "name": "main.app.initialize.update",
        "links": [
            "4b3510ea.91f22",
            "c3a55027.c2818",
            "fa9e6fc1.f5adb",
            "a6890ed.17d7ff"
        ],
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "c75372a4.e92b5"
            ]
        ],
        "l": true
    },
    {
        "id": "4b3510ea.91f22",
        "type": "link out",
        "z": "b661b75c.e7b738",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 850,
        "y": 700,
        "wires": [],
        "l": true
    },
    {
        "id": "d5f2be92.b4c37",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 700,
        "wires": [
            [
                "4b3510ea.91f22"
            ]
        ]
    },
    {
        "id": "845713fc.bbc2b",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "call modules: initialize ",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nsuccess = su.flow.unsetMsgAll(msg);\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "f96041d6.ab02"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "50816677.e479f8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.checkModules",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction showStatus(status) {\n    if(!status) node.status({fill:'yellow', shape: 'dot', text: 'false'});\n    else node.status({fill:'green', shape: 'dot', text: 'true'});     \n    return status;\n}\n\n// main -----------------------------------------------------------------\n\n\nlet modules = {\n    isAboutInitialized: global.get(sau.app.getIsInitializedPath(sau.about.getMetaInfo())) || false,\n    isOrderInitialized: global.get(sau.app.getIsInitializedPath(sau.order.getMetaInfo())) || false,\n    //isDeviceSettingsInitialized: global.get(sau.app.getIsInitializedPath(sau.devicesettings.getMetaInfo())) || false,\n    //isMqttDeviceSessionControl: global.get(sau.app.getIsInitializedPath(sau.mqttDeviceSessionControl.getMetaInfo())) || false\n}\n\nlet isFullyInitialized = true;\n\nfor(var p in modules) {\n    if(modules[p] === false) isFullyInitialized = false;\n}\n\nshowStatus(isFullyInitialized);\n\nmsg.payload = modules;\n\nif(!isFullyInitialized) {\n    return [null, msg];\n} \n\nreturn msg;\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 530,
        "y": 1540,
        "wires": [
            [
                "25855df.ddca3a2"
            ],
            []
        ],
        "outputLabels": [
            "true",
            "false"
        ]
    },
    {
        "id": "e58bfb0.929d608",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "about.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.about.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 700,
        "wires": [
            [
                "d5f2be92.b4c37"
            ]
        ]
    },
    {
        "id": "d9f82abd.764ae8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "enableTabs",
        "func": "\nmsg.payload = {\n    tab: 'Order',\n    tabs: {\n        enable: [\n            'Order', 'Settings', 'Device Commands', 'Device Config', 'Device Session'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 1540,
        "wires": [
            [
                "952ad74a.443de8"
            ]
        ]
    },
    {
        "id": "952ad74a.443de8",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 1370,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "60f3a96.b5b3158",
        "type": "ui_toast",
        "z": "3eb672f6.dc73fe",
        "position": "top right",
        "displayTime": "1",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Application started successfully.",
        "name": "done.",
        "x": 1390,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5e92c59c.1030dc",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "usrMsg",
        "func": "\nmsg.payload = \"enjoy.\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 1580,
        "wires": [
            [
                "60f3a96.b5b3158"
            ]
        ]
    },
    {
        "id": "8708783b.8323a8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "utils.log (app) end initialization",
        "func": "\nmsg.payload = {\n    log:    '_END_:_INITIALIZATION_'\n}\n\nnode.log(msg.payload.log);           \n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1130,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f7521c5a.a9712",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app set initialized=true",
        "env": [
            {
                "name": "instance-name",
                "value": "app set initialized=true",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 1540,
        "wires": [
            [
                "8708783b.8323a8",
                "4a61cafd.01b3d4"
            ]
        ]
    },
    {
        "id": "25855df.ddca3a2",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.isInitialized',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 1540,
        "wires": [
            [
                "f7521c5a.a9712"
            ]
        ]
    },
    {
        "id": "ea43befa.23769",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.set:configfile",
        "env": [
            {
                "name": "instance-name",
                "value": "app.set:configfile",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 900,
        "wires": [
            [
                "4c847b18.4176b4"
            ]
        ]
    },
    {
        "id": "fc6dd38b.c144e",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    set: {\n        state: 'app.configfile',\n        params: {\n            filename: 'solace-asapio-demo-config.json'\n        } \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 900,
        "wires": [
            [
                "ea43befa.23769"
            ]
        ]
    },
    {
        "id": "187dc50e.337d6b",
        "type": "file in",
        "z": "7335a6bf.4e03a8",
        "name": "app.read.configfile",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 710,
        "y": 620,
        "wires": [
            [
                "accb2e2b.aeb15"
            ]
        ]
    },
    {
        "id": "accb2e2b.aeb15",
        "type": "json",
        "z": "7335a6bf.4e03a8",
        "name": "app.parse.configFile",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 920,
        "y": 620,
        "wires": [
            [
                "eb11d271.83f0c"
            ]
        ]
    },
    {
        "id": "eb11d271.83f0c",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.setConfigFile",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nif(!su.misc.hasObjectPath(msg.payload, 'config')) {\n    let path = sau.app.getConfigfilePath(_meta) + '.filename';\n    return throwError(msg, \"config file must start with root element 'config'\", {filename: global.get(path)});\n}\n\nlet config = msg.payload.config;\n\nglobal.set(sau.app.getConfigfileConfigPath(_meta), config);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ]
    },
    {
        "id": "cb441c21.ea425",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    \n    let ips = {\n        instanceName: env.get('instance-name')\n    };\n\n    if(su.misc.isStringEmpty(ips.instanceName)) return throwError(msg, 'instance-name not found');\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    \n    return true;\n    \n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 180,
        "wires": [
            [
                "fcfd88ad.41cee8"
            ]
        ]
    },
    {
        "id": "e96b4059.79e92",
        "type": "comment",
        "z": "2dc7a432.56c74c",
        "name": "app codemaps ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 780,
        "y": 20,
        "wires": []
    },
    {
        "id": "50ee7de5.2b5c14",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "utils.debug(codemaps)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1440,
        "y": 80,
        "wires": []
    },
    {
        "id": "19a5c1ba.53ebae",
        "type": "catch",
        "z": "2dc7a432.56c74c",
        "name": "catch-all x (err handler)",
        "scope": [
            "4dd1ba1b.914c84",
            "73b99fcf.94c3c",
            "c1e143dc.91573",
            "41d283ce.df2a7c",
            "455042b0.6e533c",
            "4b1decb9.9c4564",
            "e64af90a.71bbf8",
            "5b5c96c8.4cbd18",
            "7bc56d49.97b274",
            "f75ff44f.2edeb8",
            "6967887e.553fb8",
            "e10a5cf1.0efdd",
            "781428bf.b860f8",
            "190b317f.4c610f",
            "7751e32d.ddfd9c",
            "c291703e.44635",
            "92749889.851a78",
            "ede934bb.6c6d58",
            "82c135ff.9b73f8",
            "fcfff917.be48a8",
            "588bbedf.b313f"
        ],
        "uncaught": false,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "d509a541.27cf88"
            ]
        ]
    },
    {
        "id": "38e45f77.a9b3a",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "utils.subflowErrorHandler(codemaps)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\n    var _meta = sau.codemaps.getMetaInfo()\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "7e6d60f2.3a877",
        "type": "status",
        "z": "2dc7a432.56c74c",
        "name": "",
        "scope": null,
        "x": 1400,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "fcfd88ad.41cee8",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "app.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return msg;\n        /*\n    case 'get':\n        return [null, msg];\n    case 'set':\n        return [null, null, msg];\n        */\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "78df91ab.dcc8f"
            ]
        ],
        "outputLabels": [
            "init"
        ]
    },
    {
        "id": "469b6340.baf81c",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.set.statusStatusMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nsu.flow.initMsgProperties(msg, _meta);\nsu.flow.updateMsgInstanceProperties(msg, _meta, { instanceName: env.get('instance-name') });\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.codemaps.getStatusMsgStatusMapPath(_meta);\n\nglobal.set(path, msg.payload);\n\nreturn msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 340,
        "wires": [
            [
                "3f4934c3.8368cc"
            ]
        ]
    },
    {
        "id": "3f4934c3.8368cc",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.test.statusStatusMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\n\nvar map = new Map(global.get(sau.codemaps.getStatusMsgStatusMapPath(_meta)));\n\nvar _0 = map.get(0);\nvar _4 = map.get(4);\n\nlet expectedValue_0 = 'AppStatusMessage_Status_Info';\nlet expectedValue_4 = 'AppStatusMessage_Status_Failed';\n\nlet path = sau.codemaps.getStatusMsgStatusMapPath(_meta);\nif(_0 !== expectedValue_0)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 0, actualValue: _0, expectedValue: expectedValue_0}});\n\nif(_4 !== expectedValue_4)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 4, actualValue: _4, expectedValue: expectedValue_4}});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "5eb9aff5.6db47"
            ]
        ]
    },
    {
        "id": "fccf8d2b.806c7",
        "type": "file in",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.file.statusDescrMap",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 550,
        "y": 400,
        "wires": [
            [
                "581047b3.922398"
            ]
        ]
    },
    {
        "id": "581047b3.922398",
        "type": "json",
        "z": "2dc7a432.56c74c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 400,
        "wires": [
            [
                "a597f146.d69c9"
            ]
        ]
    },
    {
        "id": "5eb9aff5.6db47",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.app.getConfigfileConfigPath(sau.app.getMetaInfo());\n\nvar codemapsConfig = global.get(path + '.codemaps');\n\nvar fn = codemapsConfig.directory + '/' + codemapsConfig.statusDescrFilename;\n\nif(su.misc.isStringEmpty(fn)) return throwError(msg, \"cannot compose filename\", {file: 'statusDescrFilename', path: path, codemaps: codemapsConfig});\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "fccf8d2b.806c7"
            ]
        ]
    },
    {
        "id": "a597f146.d69c9",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.set.statusDescrMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nsu.flow.initMsgProperties(msg, _meta);\nsu.flow.updateMsgInstanceProperties(msg, _meta, { instanceName: env.get('instance-name') });\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.codemaps.getStatusMsgDescrMapPath(_meta);\n\nglobal.set(path, msg.payload);\n\nreturn msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 400,
        "wires": [
            [
                "5a66b343.36b9dc"
            ]
        ]
    },
    {
        "id": "5a66b343.36b9dc",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.test.statusDescrMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nvar map = new Map(global.get(sau.codemaps.getStatusMsgDescrMapPath(_meta)));\n\nvar _0 = map.get(0);\nvar _4 = map.get(4);\nvar _57 = map.get(57);\n\nlet expectedValue_0 = 'AppStatusMessage_Descr_NULL';\nlet expectedValue_4 = 'AppStatusMessage_Descr_AdjustedRtTelemetryConfig_TelemetryRateDown';\nlet expectedValue_57 = 'AppStatusMessage_Descr_ActiveRuntimeConfig_TargetTelemetryConfig';\n\nlet path = sau.codemaps.getStatusMsgDescrMapPath(_meta);\nif(_0 !== expectedValue_0)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 0, actualValue: _0, expectedValue: expectedValue_0}});\n\nif(_4 !== expectedValue_4)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 4, actualValue: _4, expectedValue: expectedValue_4}});\n\nif(_57 !== expectedValue_57)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 57, actualValue: _57, expectedValue: expectedValue_57}});\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 400,
        "wires": [
            [
                "627520a.cddc2e"
            ]
        ]
    },
    {
        "id": "78df91ab.dcc8f",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "method=init",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "e6bddf7a.2dc9a"
            ]
        ]
    },
    {
        "id": "10875f5d.f22b81",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nsuccess = su.flow.unsetMsg(msg, _meta);\nmsg.filename = undefined;\nmsg.payload = undefined;\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"end:success\"});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5ab10456.5ed12c",
        "type": "file in",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.file.retcodeMap",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 540,
        "y": 460,
        "wires": [
            [
                "587c56ec.ea7448"
            ]
        ]
    },
    {
        "id": "587c56ec.ea7448",
        "type": "json",
        "z": "2dc7a432.56c74c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 460,
        "wires": [
            [
                "63260a7b.971d54"
            ]
        ]
    },
    {
        "id": "627520a.cddc2e",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.app.getConfigfileConfigPath(sau.app.getMetaInfo());\n\nvar codemapsConfig = global.get(path + '.codemaps');\n\nvar fn = codemapsConfig.directory + '/' + codemapsConfig.retcodeFilename;\n\nif(su.misc.isStringEmpty(fn)) return throwError(msg, \"cannot compose filename\", {file: 'retcodeFilename', path: path, codemaps: codemapsConfig});\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 460,
        "wires": [
            [
                "5ab10456.5ed12c"
            ]
        ]
    },
    {
        "id": "63260a7b.971d54",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.set.retcodeMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nsu.flow.initMsgProperties(msg, _meta);\nsu.flow.updateMsgInstanceProperties(msg, _meta, { instanceName: env.get('instance-name') });\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.codemaps.getRetcodeMapPath(_meta);\n\nglobal.set(path, msg.payload);\n\nreturn msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "e4a5f103.6491e"
            ]
        ]
    },
    {
        "id": "e4a5f103.6491e",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.test.retcodeMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nvar map = new Map(global.get(sau.codemaps.getRetcodeMapPath(_meta)));\n\nvar _201 = map.get(201);\nvar _237 = map.get(237);\nvar _294 = map.get(294);\n\nlet expectedValue_201 = 'RETCODE_SOLAPP_WLAN_NOT_CONNECTED';\nlet expectedValue_237 = 'RETCODE_SOLAPP_APP_CONTROLLER_ENABLE_FAILED';\nlet expectedValue_294 = 'RETCODE_SOLAPP_APPLY_NEW_RUNTIME_CONFIG_TOPIC';\n\nlet path = sau.codemaps.getRetcodeMapPath(_meta);\n\nif(_201 !== expectedValue_201)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 201, actualValue: _201, expectedValue: expectedValue_201}});\n\nif(_237 !== expectedValue_237)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 237, actualValue: _237, expectedValue: expectedValue_237}});\n\nif(_294 !== expectedValue_294)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 294, actualValue: _294, expectedValue: expectedValue_294}});\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 460,
        "wires": [
            [
                "3e41098.37e5df6"
            ]
        ]
    },
    {
        "id": "ec2d2d10.71af7",
        "type": "file in",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.file.appModuleMap",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "a454fd6a.1447"
            ]
        ]
    },
    {
        "id": "a454fd6a.1447",
        "type": "json",
        "z": "2dc7a432.56c74c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 520,
        "wires": [
            [
                "5839f45.60bf20c"
            ]
        ]
    },
    {
        "id": "3e41098.37e5df6",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.input",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.app.getConfigfileConfigPath(sau.app.getMetaInfo());\n\nvar codemapsConfig = global.get(path + '.codemaps');\n\nvar fn = codemapsConfig.directory + '/' + codemapsConfig.appModuleFilename;\n\nif(su.misc.isStringEmpty(fn)) return throwError(msg, \"cannot compose filename\", {file: 'appModuleFilename', path: path, codemaps: codemapsConfig});\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 520,
        "wires": [
            [
                "ec2d2d10.71af7"
            ]
        ]
    },
    {
        "id": "5839f45.60bf20c",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.set.appModuleMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nsu.flow.initMsgProperties(msg, _meta);\nsu.flow.updateMsgInstanceProperties(msg, _meta, { instanceName: env.get('instance-name') });\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = sau.codemaps.getAppModuleMapPath(_meta);\n\nglobal.set(path, msg.payload);\n\nreturn msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 520,
        "wires": [
            [
                "710682ef.51158c"
            ]
        ]
    },
    {
        "id": "710682ef.51158c",
        "type": "function",
        "z": "2dc7a432.56c74c",
        "name": "codemaps.test.appModuleMap",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.codemaps.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nvar map = new Map(global.get(sau.codemaps.getAppModuleMapPath(_meta)));\n\nvar _63 = map.get(63);\nvar _70 = map.get(70);\nvar _78 = map.get(78);\n\nlet expectedValue_63 = 'SOLACE_APP_MODULE_ID_MAIN';\nlet expectedValue_70 = 'SOLACE_APP_MODULE_ID_APP_RUNTIME_CONFIG';\nlet expectedValue_78 = 'SOLACE_APP_MODULE_ID_APP_TIMESTAMP';\n\nlet path = sau.codemaps.getAppModuleMapPath(_meta);\n\nif(_63 !== expectedValue_63)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 63, actualValue: _63, expectedValue: expectedValue_63}});\n\nif(_70 !== expectedValue_70)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 70, actualValue: _70, expectedValue: expectedValue_70}});\n\nif(_78 !== expectedValue_78)\n    return throwError(msg, 'codemap version mismatch', {path: path, map: {index: 78, actualValue: _78, expectedValue: expectedValue_78}});\n    \nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 520,
        "wires": [
            [
                "10875f5d.f22b81"
            ]
        ]
    },
    {
        "id": "288aace.55bda54",
        "type": "comment",
        "z": "44813701.a560c8",
        "name": "var _meta = {   packageId: 'utils',   componentId: 'forEach',   version: '0.2.1' }",
        "info": "",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "6e59dffa.724f1",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "main.devicesettings -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "afd5357e.d4e418",
        "type": "catch",
        "z": "475cded7.6c736",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "1906a6dd.62c9e9"
            ]
        ]
    },
    {
        "id": "d8ee4047.da424",
        "type": "subflow:317873af.a031fc",
        "z": "475cded7.6c736",
        "name": "",
        "env": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "1906a6dd.62c9e9",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "475cded7.6c736",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "d8ee4047.da424"
            ]
        ]
    },
    {
        "id": "767f9d49.0857e4",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "7ae8a72f.21f618",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 340,
        "wires": []
    },
    {
        "id": "dbce17e4.5e46a8",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "the end  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 1640,
        "wires": []
    },
    {
        "id": "c7187f8c.a17bc",
        "type": "inject",
        "z": "475cded7.6c736",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "7cb75b13.28f8e4"
            ]
        ]
    },
    {
        "id": "7cb75b13.28f8e4",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "475cded7.6c736",
        "name": "flowProperties:set main.devicesettings",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set main.devicesettings",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "devicesettings",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2ab266af.197fda",
        "type": "comment",
        "z": "bd2c8430.9c7668",
        "name": "app device settings (ds) ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "d49f7e8a.b1453",
        "type": "comment",
        "z": "bd2c8430.9c7668",
        "name": "var _meta = {   packageId: 'app',   componentId: 'devicesettings',   version: '0.1.3',   shortName: 'ds' }",
        "info": "",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "53925640.db7878",
        "type": "catch",
        "z": "bd2c8430.9c7668",
        "name": "catch-all x (err handler)",
        "scope": [
            "2ab266af.197fda",
            "d49f7e8a.b1453",
            "39be31cf.42580e",
            "c42f3895.218738",
            "5a98fb26.cd60f4",
            "e27a3447.462c88",
            "a0cd2ca8.265ee",
            "e6411ab9.c94378",
            "ecb4a8b9.201e78",
            "656673fc.88ae2c",
            "e44de43e.0a56f8",
            "3f3a80bc.0462f",
            "14aae177.af539f",
            "d2132262.0ac85",
            "21cf0c91.df8e14",
            "5553d81c.2364f8",
            "bc80b362.aa9da",
            "b4b933b2.7e349"
        ],
        "uncaught": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "707f9724.6fed68"
            ]
        ]
    },
    {
        "id": "39be31cf.42580e",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 460,
        "wires": [
            [
                "c42f3895.218738"
            ]
        ]
    },
    {
        "id": "c42f3895.218738",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return [msg];\n    case 'getDeviceId': {\n        msg.payload = {\n            get: {\n                state: 'ds.entries.deviceId',\n                params: {}\n            }\n        }\n    }\n    case 'get':\n        return [null, msg];\n    case 'set':\n        return [null, null, msg];\n    case 'unset':\n        return [null, null, null, msg];\n    case 'getDeviceId':\n        msg.payload = {\n            get: {\n                state: 'ds.entries.deviceId',\n                params: {}\n            }\n        }\n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 4,
        "noerr": 0,
        "x": 310,
        "y": 460,
        "wires": [
            [
                "5a98fb26.cd60f4"
            ],
            [
                "5553d81c.2364f8"
            ],
            [
                "ecb4a8b9.201e78"
            ],
            [
                "e44de43e.0a56f8"
            ]
        ],
        "outputLabels": [
            "init",
            "get",
            "set",
            "unset"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "5a98fb26.cd60f4",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    let entries = msg.payload.deviceDefaults;\n    \n    if(su.misc.isObjectEmpty(entries)) {\n        let expected = sau.devicesettings.getMethodInitEntriesInputReference();\n        return throwError(msg, 'msg.payload.deviceDefaults is empty', {payload: msg.payload, expected: expected});\n    }\n    \n    let issues = su.misc.validateObjectPropertiesAgainstReference(entries, sau.devicesettings.getEntriesReference(), su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) return throwError(msg, \"invalid 'deviceDefaults'\", {issues: issues});\n\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\n// check if there are entries in the persistent global context\nlet entries = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n\nif(su.misc.isObjectEmpty(entries)) {\n    let defaults = msg.payload.deviceDefaults;\n    global.set(sau.devicesettings.getEntriesPath(_meta), defaults, 'persistent');\n}\n\n// set the state\nlet state = sau.devicesettings.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(su.flow.getBasePath(_meta), state);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 400,
        "wires": [
            [
                "d2132262.0ac85"
            ]
        ]
    },
    {
        "id": "e27a3447.462c88",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a0cd2ca8.265ee",
        "type": "status",
        "z": "bd2c8430.9c7668",
        "name": "",
        "scope": null,
        "x": 1240,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e6411ab9.c94378",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "95bc894.7230a78",
        "type": "subflow:bd2c8430.9c7668",
        "z": "475cded7.6c736",
        "name": "ds.init",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 830,
        "y": 420,
        "wires": [
            [
                "b1034fe6.83ea6",
                "678de2f.b48a71c"
            ],
            []
        ]
    },
    {
        "id": "ecb4a8b9.201e78",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.method.set",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.set.state')) return throwError(msg, 'msg.payload.set.state is empty');\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params')) return throwError(msg, 'msg.payload.set.params is empty');\n    \n    return true;\n}\n\nfunction isValueBoolean(msg) {\n    if(!su.misc.hasObjectPath(msg, 'payload.set.params.value')) return throwError(msg, 'msg.payload.set.params.value is empty');\n    if(!su.misc.isBoolean(msg.payload.set.params.value)) return throwError(msg, 'msg.payload.set.params.value is not a boolean', {payload: msg.payload});\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nswitch(msg.payload.set.state) {\n    case 'ds.isInitialized': {\n        if(!isValueBoolean(msg)) return;\n        global.set(sau.app.getIsInitializedPath(_meta), msg.payload.set.params.value);\n        return msg;\n    }\n    case 'ds.entries': {\n        return [null, msg];\n    }\n    default: {\n        let supportedList = [   sau.devicesettings.getMethodSetIsInitializedInputReference(), \n                                sau.devicesettings.getMethodSetEntriesInputReference()\n                            ];\n        return throwError(msg, 'unknown msg.payload.set.state', {payload: msg.payload, supported: supportedList});\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 500,
        "y": 520,
        "wires": [
            [
                "e27a3447.462c88"
            ],
            [
                "656673fc.88ae2c"
            ]
        ],
        "outputLabels": [
            "generic",
            "set.entries"
        ]
    },
    {
        "id": "656673fc.88ae2c",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.set.entries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* vars & functions  --- */\n\nfunction validateEntries(msg) {\n    \n    let entries = msg.payload.set.params.entries;\n    \n    if(su.misc.isObjectEmpty(entries)) {\n        let expected = sau.devicesettings.getMethodSetEntriesInputReference();\n        return throwError(msg, 'msg.payload.set.params.entries is empty', {payload: msg.payload, expected: expected});\n    }\n    \n    let issues = su.misc.validateObjectPropertiesAgainstReference(entries, sau.devicesettings.getEntriesReference(), su.misc.validateStringPropertyIsValidId);\n    \n    return issues;\n}\n\n/* main --- */\n\nlet issues = validateEntries(msg);\n\nif(issues.length === 0) {\n    \n    global.set(sau.devicesettings.getEntriesPath(_meta), msg.payload.set.params.entries, 'persistent');\n\n    return msg;\n    \n} else {\n    \n    msg.payload = {\n        status: 'invalidEntries',\n        issues: issues\n    };\n    \n    return [null, msg];\n} \n\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 680,
        "y": 560,
        "wires": [
            [
                "21cf0c91.df8e14"
            ],
            [
                "3b87da56.9e8466"
            ]
        ],
        "outputLabels": [
            "validEntries",
            "invalidEntries"
        ]
    },
    {
        "id": "6596e39f.b8f7ec",
        "type": "status",
        "z": "776ea548.cb42dc",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "afcb3a99.477868",
        "type": "function",
        "z": "776ea548.cb42dc",
        "name": "app.subflow.error-handler",
        "func": "//var solaceUtilsGlobalContext = '_solaceUtils';\n//var solaceAppUtilsGlobalContext = '_solaceAppUtils';\n//var solaceAppComponent = 'app';\n\nvar solaceUtilsGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceUtilsGlobalContext;\nvar solaceAppUtilsGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceAppUtilsGlobalContext;\nvar solaceAppUtilsComponentGlobalContext = msg._solaceUtilsSubflowErrorHandler.solaceAppUtilsComponentGlobalContext;\n\ntry {\n    var su = global.get(solaceUtilsGlobalContext) || node.error(solaceUtilsGlobalContext + ' not found in global context', msg);\n    var sau = global.get(solaceAppUtilsGlobalContext) || node.error(solaceAppUtilsGlobalContext + ' not found in global context', msg);\n    var _meta = sau[solaceAppUtilsComponentGlobalContext].getMetaInfo();\n    \n    //var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    //var sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\n    //var _meta = sau.devicesettings.getMetaInfo()\n\n\n        //node.warn(node.name + ': msg = \\n' + JSON.stringify(msg, null, 1));\n    \n    let method = 'unknown-method';\n    if(su.misc.hasObjectPath(msg, 'solaceError')) {\n        if(su.misc.hasObjectPath(msg.solaceError, 'msg')) {\n            let mips = su.flow.getMsgInstanceProperties(msg.solaceError.msg, _meta);\n                //node.warn(node.name + ': mips = \\n' + JSON.stringify(mips, null, 1));\n            method = mips.method;    \n        }\n    } else method = 'js';\n    \n    node.status({fill:\"red\",shape:\"dot\",text:\"error:\" + _meta.shortName + \":\" + method});\n    \n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n    node.status({fill:\"red\",shape:\"dot\",text:\"error:\" + _meta.shortName + \":err-handler\"});\n}\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 450,
        "y": 180,
        "wires": []
    },
    {
        "id": "cacc3e4f.9c57d",
        "type": "status",
        "z": "f315565e.b7a9b8",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3fec6f17.cf63e",
        "type": "subflow:776ea548.cb42dc",
        "z": "f315565e.b7a9b8",
        "name": "",
        "env": [],
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "ab2bbf0.6e03b4",
        "type": "function",
        "z": "f315565e.b7a9b8",
        "name": "input",
        "func": "\nvar solaceAppComponent = env.get('solace-app-component');\nif(solaceAppComponent === 'not-configured') solaceAppComponent = 'app';\n\nmsg._solaceUtilsSubflowErrorHandler = {\n    solaceUtilsGlobalContext: '_solaceUtils',\n    solaceAppUtilsGlobalContext: '_solaceAppUtils',\n    solaceAppUtilsComponentGlobalContext: solaceAppComponent\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "3fec6f17.cf63e"
            ]
        ]
    },
    {
        "id": "c728f80b.a1d258",
        "type": "subflow:f315565e.b7a9b8",
        "z": "7335a6bf.4e03a8",
        "name": "sf err handler (app)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "app",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 200,
        "wires": []
    },
    {
        "id": "707f9724.6fed68",
        "type": "subflow:f315565e.b7a9b8",
        "z": "bd2c8430.9c7668",
        "name": "sf err handler (ds)",
        "env": [
            {
                "name": "solace-app-component",
                "value": null,
                "type": "str"
            }
        ],
        "x": 350,
        "y": 160,
        "wires": []
    },
    {
        "id": "d509a541.27cf88",
        "type": "subflow:f315565e.b7a9b8",
        "z": "2dc7a432.56c74c",
        "name": "sf err handler (cm)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "codemaps",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "ec2f888a.3917d8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "af47e4e7.3f1028",
        "type": "link in",
        "z": "475cded7.6c736",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 230,
        "y": 420,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "e090fa99.298c58",
        "type": "subflow:bd2c8430.9c7668",
        "z": "475cded7.6c736",
        "name": "ds.unset (entries)",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.unset (entries)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "unset",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "11605803.969288",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "475cded7.6c736",
        "name": "app.get (defaultDeviceSettings)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get (defaultDeviceSettings)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "95bc894.7230a78"
            ]
        ]
    },
    {
        "id": "d37e494f.5eea58",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "input",
        "func": "\nmsg.payload = {\n    get: {\n        state: 'config.deviceDefaults'\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 420,
        "wires": [
            [
                "11605803.969288"
            ]
        ]
    },
    {
        "id": "81db91ca.cdff1",
        "type": "inject",
        "z": "475cded7.6c736",
        "name": "dev",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 930,
        "y": 220,
        "wires": [
            [
                "4a52f8b3.a59aa8"
            ]
        ]
    },
    {
        "id": "4a52f8b3.a59aa8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "input",
        "func": "\nmsg.payload = {\n    unset: {\n        state: 'ds.entries'\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "e090fa99.298c58"
            ]
        ]
    },
    {
        "id": "e44de43e.0a56f8",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.method.unset",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.unset.state')) return throwError(msg, 'msg.payload.unset.state is empty');\n\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nswitch(msg.payload.unset.state) {\n    case 'ds.entries': {\n        global.set(sau.devicesettings.getEntriesPath(_meta), undefined, 'persistent');\n        return msg;\n    }\n    default: {\n        let supportedList = [   sau.devicesettings.getMethodUnsetEntriesInputReference() \n                            ];\n        return throwError(msg, 'unknown msg.payload.unset.state', {payload: msg.payload, supported: supportedList});\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "e27a3447.462c88"
            ]
        ]
    },
    {
        "id": "14aae177.af539f",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.isInitialized=true",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 400,
        "wires": [
            [
                "e27a3447.462c88"
            ]
        ]
    },
    {
        "id": "c3a55027.c2818",
        "type": "link out",
        "z": "475cded7.6c736",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 1190,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "d2132262.0ac85",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.set.device-topics",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet entries = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n\nglobal.set(sau.devicesettings.getTopicsPath(_meta), sau.devicesettings.createTopicsObject(entries));\n\nreturn msg;\n\n\n// --------\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "14aae177.af539f"
            ]
        ]
    },
    {
        "id": "21cf0c91.df8e14",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.set.device-topics",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet entries = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n\nglobal.set(sau.devicesettings.getTopicsPath(_meta), sau.devicesettings.createTopicsObject(entries));\n\nreturn msg;\n\n\n// --------\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 540,
        "wires": [
            [
                "e27a3447.462c88"
            ]
        ]
    },
    {
        "id": "5f1a5110.7b057",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 680,
        "wires": [
            [
                "ec2f888a.3917d8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "5553d81c.2364f8",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.state')) return throwError(msg, 'msg.payload.get.state not found');\n    \n    return true;\n}\n\nfunction isValidMsgPayloadParams(msg) {\n    \n    if(!su.misc.hasObjectPath(msg, 'payload.get.params')) return throwError(msg, 'msg.payload.get.params not found');\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return; \n\nswitch(msg.payload.get.state) {\n    case 'ds.topics': {\n        msg.payload = {\n            topics: global.get(sau.devicesettings.getTopicsPath(_meta))\n        }\n        return msg;\n    }\n    case 'ds.entries': {\n        msg.payload = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.deviceId': {\n        msg.payload = {deviceId: global.get(sau.devicesettings.getDeviceIdPath(_meta), 'persistent')};\n        return msg;\n    }\n    /*\n    case 'ds.entries.region': {\n        msg.payload = global.get(sau.devicesettings.getRegionPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.site': {\n        msg.payload = global.get(sau.devicesettings.getSitePath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.subSitexxxxx': {\n        msg.payload = global.get(sau.devicesettings.getSubSitePath(_meta), 'persistent');\n        return msg;\n    }\n    */\n    default: {\n        let supportedList = [   sau.devicesettings.getMethodGetTopicsInputReference(), \n                                sau.devicesettings.getMethodGetEntriesInputReference(),     \n                            ];\n        return throwError(msg, 'unknown msg.payload.get.state', {received:{msg:{payload: msg.payload}}, supported: supportedList});\n    }\n}\n\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 440,
        "wires": [
            [
                "e27a3447.462c88"
            ]
        ]
    },
    {
        "id": "b1034fe6.83ea6",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 440,
        "wires": [
            [
                "8152338e.4fd1b"
            ]
        ],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "de57446b.2a5bb8",
        "type": "complete",
        "z": "475cded7.6c736",
        "name": "on_init_form",
        "scope": [
            "b1034fe6.83ea6",
            "aabbbe06.94f8b",
            "5c7b3a6e.d106a4"
        ],
        "uncaught": false,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "4f880538.643d1c",
                "c12ada90.fbc438"
            ]
        ]
    },
    {
        "id": "65cbe165.1b3dd",
        "type": "subflow:bd2c8430.9c7668",
        "z": "475cded7.6c736",
        "name": "ds.set (ds.entries)",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.set (ds.entries)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 850,
        "y": 900,
        "wires": [
            [
                "ec4cbb7f.d3b168",
                "5c7b3a6e.d106a4"
            ],
            [
                "83bccad2.8144a8"
            ]
        ]
    },
    {
        "id": "d6214778.d41508",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.enable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = true;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 940,
        "wires": [
            [
                "270efc3c.9c4344",
                "9a2a1d56.1394d"
            ]
        ]
    },
    {
        "id": "4abf0870.905a08",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.disable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = false;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "9a2a1d56.1394d",
                "270efc3c.9c4344"
            ]
        ]
    },
    {
        "id": "aabbbe06.94f8b",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 760,
        "y": 1040,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "ec4cbb7f.d3b168",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "input",
        "func": "\nmsg.payload = {\n    get: {\n      state: 'ds.topics',\n      params: {}\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 860,
        "wires": [
            [
                "ef7dd699.b539a8"
            ]
        ]
    },
    {
        "id": "ef7dd699.b539a8",
        "type": "subflow:bd2c8430.9c7668",
        "z": "475cded7.6c736",
        "name": "ds.get (ds.topics)",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.get (ds.topics)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 1190,
        "y": 860,
        "wires": [
            [
                "89a9b6a1.883448",
                "e1c0bc43.8f96f",
                "682f939d.30a69c"
            ],
            []
        ]
    },
    {
        "id": "b4b933b2.7e349",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "utils.debug(ds)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "4a61cafd.01b3d4",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "guiMgmt",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 1560,
        "wires": [
            [
                "d9f82abd.764ae8",
                "5e92c59c.1030dc"
            ]
        ]
    },
    {
        "id": "8ce917e4.1a7b88",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "guiMgmt",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "c47a31d.a5a67d",
                "4de7c1a8.404b1"
            ]
        ]
    },
    {
        "id": "2db4be75.9ac632",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.handleInternalError",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\n//if(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});\n\n// just log\nif(true) node.error('INTERNAL ERROR: SolaceError, msg = \\n' + JSON.stringify(msg, null, 1));\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1180,
        "y": 380,
        "wires": []
    },
    {
        "id": "e3c5221f.e2984",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "top right",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrNotification",
        "x": 1370,
        "y": 220,
        "wires": []
    },
    {
        "id": "a196c4fe.0f9e18",
        "type": "switch",
        "z": "317873af.a031fc",
        "name": "popupModal?",
        "property": "isPopupModal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 260,
        "wires": [
            [
                "e1291347.14803"
            ]
        ]
    },
    {
        "id": "e1291347.14803",
        "type": "ui_toast",
        "z": "317873af.a031fc",
        "position": "prompt",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "userErrModal",
        "x": 1540,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6c18ac59.e29e54",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.prepare4UsrDisplay",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context'));\n    \nlet errorObj = new su.SolaceError();\nif(!errorObj.populateFromMsgError(msg)) {\n    let message = 'msg does not contain a SolaceError object';\n    let errObj = new su.SolaceError('SolaceErrorHandler', node.name, message, 'ERROR', null, msg);\n    node.error(errObj.toString());\n    return;\n}\n\nlet errorHeading = 'Previous Internal Server Exception';\n\nlet userDisplayMsg = {\n    topic: errorHeading\n}\n    \nlet sourceStr = '';\nif((errorObj.getPreviousSourceType()!==null) && (errorObj.getPreviousSourceName()!==null)) {\n    sourceStr += errorObj.getPreviousSourceType() + \":\" + errorObj.getPreviousSourceName();\n} else {\n    sourceStr += errorObj.getSourceType() + \":\" + errorObj.getSourceName();\n}\n    \nuserDisplayMsg.payload = \n    \"component: \" + errorObj.getComponentName() +\n    \", instance: \" + errorObj.getInstanceName() +\n    \", source:\" + sourceStr +\n    \", caughtBy: \" + JSON.stringify(errorObj.getCaughtBy()) +\n    \"<br/>\" + errorObj.getMessage() +\n    \"<br/>details:\" + JSON.stringify(errorObj.getDetails());\n\n// prepare the message for user modal popup\nlet userModalMsg = {};\nif(errorObj.getSeverity() === 'ERROR') {\n    userModalMsg.isPopupModal = true;\n    userModalMsg.topic = errorHeading;\n    userModalMsg.payload = \n        errorObj.getMessage() +\n        \"<br/>\" + \n        \"<br/>-component:\" + errorObj.getComponentName() + \n        \"<br/>-instance:\" + errorObj.getInstanceName() + \n        \"<br/>-source:\" + sourceStr +\n        \"<br/><br/>Check the log for more details.\" + \n        \"<br/>(note: this is only the first error, there may be more in the log)\";\n}\n\nreturn [userDisplayMsg, userModalMsg];\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "e3c5221f.e2984"
            ],
            [
                "a196c4fe.0f9e18"
            ]
        ],
        "outputLabels": [
            "userDisplayMsg",
            "userModalMsg"
        ]
    },
    {
        "id": "ff107278.6e54d",
        "type": "rbe",
        "z": "317873af.a031fc",
        "name": "appErrHandler.rbe",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 650,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "59a29827.5ca218",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "todo SolaceErrorHandler",
        "func": "\nnode.warn(node.name + ': implement on browser connect', msg);\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "f9dac897.4c5b98",
        "type": "function",
        "z": "317873af.a031fc",
        "name": "appErrHandler.blockExceptFirst",
        "func": "let path = '$parent.appErrHandler.onBrowserConnect.count';\n\nlet count = flow.get(path) || 0;\n\nnode.warn(node.name + ': current count = ' + count);\n\ncount++;\n\nflow.set(path, count);\n\nif(count === 1) return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 160,
        "wires": [
            [
                "59a29827.5ca218"
            ]
        ]
    },
    {
        "id": "a62af3f3.af666",
        "type": "comment",
        "z": "317873af.a031fc",
        "name": "todos - xxxxxxxxxxxxxxxxxxxx",
        "info": "- can we find out if onBrowserConnect:\n    - sends a different message per browser session?\n    - number of messages depends on number of tabs?\n    - test with upgrading dashboard...\n    - ",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "8a55701b.04eec",
        "type": "comment",
        "z": "8e181349.856bd",
        "name": "todos xxxxxxxxxxxxxxxxxxx",
        "info": "SolaceError class:\n\n- sourceStack\n- catchStack\n\nperhaps:\nSolaceError subflow:\n- getOnBrowserConnectError:\n    - keeps counter and returns it only once per browser session\n    - can we actually find out if it is a new brower session?\n    - \ntest:\n- start browser with an existing error\n- multiple sessions\n\n",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "105fb369.9be87d",
        "type": "catch",
        "z": "6be2bb10.2f7fa4",
        "name": "catch-all x errHandler",
        "scope": [
            "55a3de07.952eb",
            "6bfcc2a5.afb3dc",
            "427d007.0f6b2",
            "17bf0d5e.27ce63",
            "c688684.fb4c298",
            "a1f75807.0e8888",
            "12ae2675.8d63aa",
            "c0092c06.69623",
            "20498c7b.18aa04",
            "127025cc.7032aa",
            "46892f4e.45ca1",
            "f8d76597.c978e8"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "8331919f.27a06"
            ]
        ]
    },
    {
        "id": "55a3de07.952eb",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.debug",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "6bfcc2a5.afb3dc",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "427d007.0f6b2",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "var _meta = {   packageId: 'app',   componentId: 'mqttConnectionMonitor',   version: '0.1.1',   shortName: 'mqttCm' }",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "17bf0d5e.27ce63",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'property \"instance-name\" not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    \n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "a1f75807.0e8888"
            ]
        ]
    },
    {
        "id": "c688684.fb4c298",
        "type": "status",
        "z": "6be2bb10.2f7fa4",
        "name": "",
        "scope": null,
        "x": 1180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a1f75807.0e8888",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return msg;\n    case 'get-status':\n        return[null, msg];\n    case 'set-status': \n        return [null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 3,
        "noerr": 0,
        "x": 360,
        "y": 300,
        "wires": [
            [
                "127025cc.7032aa"
            ],
            [
                "12ae2675.8d63aa"
            ],
            [
                "20498c7b.18aa04"
            ]
        ],
        "outputLabels": [
            "init",
            "get-status",
            "set-status"
        ]
    },
    {
        "id": "12ae2675.8d63aa",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.get-status",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flow.getPropertiesPath(_meta);\nlet properties = global.get(path);\nif(su.misc.isObjectEmpty(properties)) return throwError(msg, 'cannot get status: not initialized yet');\n\nmsg.payload = {\n    status: properties.currentStatus,\n    previousStatus: properties.previousStatus\n}\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "c0092c06.69623",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "20498c7b.18aa04",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.set-status",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\n// 'node-red:common.status.connected'\n// 'node-red:common.status.disconnected'\n// 'node-red:common.status.connecting' (lots of them)\n\nlet elements = msg.status.text.split('.');\nif(elements.length < 2) return throwError('cannot parse msg.status.text', {status: msg.status});\n\nlet status = elements[elements.length - 1];\n\n//node.warn(node.name + ': status.text = ' + msg.status.text + ', extracted status = ' + status);\n\nlet path = su.flow.getPropertiesPath(_meta);\n\nlet properties = global.get(path) || sau.mqttConnectionMonitor.getDefaultPropertiesObject();\n\nproperties.previousStatus = JSON.parse(JSON.stringify(properties.currentStatus));\n\nproperties.currentStatus = {\n    status: status,\n    details: msg.status\n}\nglobal.set(path, properties);\nreturn msg;        \n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 340,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "e33ef79f.130298",
        "type": "comment",
        "z": "46127397.12a33c",
        "name": "main mqtt Connection Monitor (mqttCm)  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 910,
        "y": 60,
        "wires": []
    },
    {
        "id": "79028a44.bdb534",
        "type": "catch",
        "z": "46127397.12a33c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "a56fe5a2.c709a8"
            ]
        ]
    },
    {
        "id": "d5b6908.c2c6c7",
        "type": "subflow:317873af.a031fc",
        "z": "46127397.12a33c",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "a56fe5a2.c709a8",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "46127397.12a33c",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "d5b6908.c2c6c7"
            ]
        ]
    },
    {
        "id": "a89db6ab.2a7988",
        "type": "inject",
        "z": "46127397.12a33c",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "70af4bf0.c0cbc4"
            ]
        ]
    },
    {
        "id": "70af4bf0.c0cbc4",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "46127397.12a33c",
        "name": "flowProperties.set(main.mqttCm)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties.set(main.mqttCm)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "mqttCm",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "5f0f137e.bd4e5c"
            ]
        ]
    },
    {
        "id": "5f0f137e.bd4e5c",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.init",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "127025cc.7032aa",
        "type": "function",
        "z": "6be2bb10.2f7fa4",
        "name": "mqttCm.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttConnectionMonitor.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet path = su.flow.getPropertiesPath(_meta);\nlet properties = sau.mqttConnectionMonitor.getDefaultPropertiesObject();\nglobal.set(path, properties);\n\n\nreturn msg;\n\n// ------------\n// The End\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 260,
        "wires": [
            [
                "c0092c06.69623"
            ]
        ]
    },
    {
        "id": "5da577dc.2ecb78",
        "type": "status",
        "z": "46127397.12a33c",
        "name": "on_mqttConnectionStatus",
        "scope": [
            "f3d40a1d.3a7608"
        ],
        "x": 150,
        "y": 480,
        "wires": [
            [
                "4e4e4b3f.1ebbf4"
            ]
        ]
    },
    {
        "id": "27f57376.8189ac",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.set-status",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.set-status",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set-status",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 480,
        "wires": [
            [
                "99ae49d3.7bde88"
            ]
        ]
    },
    {
        "id": "34155ee.83dbba2",
        "type": "subflow:6be2bb10.2f7fa4",
        "z": "46127397.12a33c",
        "name": "mqttCm.get-status",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttCm.get-status",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get-status",
                "type": "str"
            }
        ],
        "x": 790,
        "y": 480,
        "wires": [
            [
                "a222dac8.18b248"
            ]
        ]
    },
    {
        "id": "a222dac8.18b248",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "status",
        "property": "payload.status.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "disconnected",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 480,
        "wires": [
            [
                "989d169e.098488",
                "643ac5be.eec56c"
            ],
            [
                "232875d9.abeb3a",
                "c804ae39.28795"
            ],
            [
                "232875d9.abeb3a",
                "42876d45.4ece84"
            ],
            [
                "c1f208bb.c169d8"
            ]
        ]
    },
    {
        "id": "ade44798.930b88",
        "type": "delay",
        "z": "46127397.12a33c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 640,
        "wires": [
            [
                "99ae49d3.7bde88"
            ]
        ]
    },
    {
        "id": "7ba82ae9.61b8c4",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app:set:isConnected=true",
        "env": [
            {
                "name": "instance-name",
                "value": "app:set:isConnected=true",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1310,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "989d169e.098488",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "\n//todo = finish_on_isConnectedChange(on_off);\n\n/*\n    probably send the on/off payload, then treat differently\n*/\n\nmsg.payload = {\n    set: {\n        state: 'broker.isConnected',\n        params: {\n            value: true \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "7ba82ae9.61b8c4"
            ]
        ]
    },
    {
        "id": "4aefdd0.32b1024",
        "type": "debug",
        "z": "46127397.12a33c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 310,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1f208bb.c169d8",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "mqttCm.throwError(unknown-status)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nreturn throwError(\"unknown mqtt connection status\", {status: msg.payload.status});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1210,
        "y": 600,
        "wires": []
    },
    {
        "id": "99ae49d3.7bde88",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isStartupComplete'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "c83a791.0e36888"
            ]
        ]
    },
    {
        "id": "c83a791.0e36888",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app get isStartupComplete",
        "env": [
            {
                "name": "instance-name",
                "value": "app get isStartupComplete",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 580,
        "wires": [
            [
                "e0283eea.2b0c3"
            ]
        ]
    },
    {
        "id": "e0283eea.2b0c3",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "isStartupComplete?",
        "property": "payload.app.isStartupComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "34155ee.83dbba2"
            ],
            [
                "ade44798.930b88"
            ]
        ]
    },
    {
        "id": "643ac5be.eec56c",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "previousStatus",
        "property": "payload.previousStatus.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "unknown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 340,
        "wires": [
            [
                "5cfb0626.441d58"
            ]
        ]
    },
    {
        "id": "5cfb0626.441d58",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(connected)",
        "func": "\nmsg.topic   = 'Connection to broker successful.';\nmsg.payload = \"don't let it happen again\";\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 340,
        "wires": [
            [
                "2944b984.978436"
            ]
        ]
    },
    {
        "id": "2944b984.978436",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1520,
        "y": 340,
        "wires": []
    },
    {
        "id": "6b9b3f4b.63217",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(isConnected)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(isConnected)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 520,
        "y": 620,
        "wires": [
            [
                "303aa3a5.a3ccac"
            ]
        ]
    },
    {
        "id": "b952b68d.087178",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'broker.isConnected'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "6b9b3f4b.63217"
            ]
        ]
    },
    {
        "id": "303aa3a5.a3ccac",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "isConnected?",
        "property": "payload.broker.isConnected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 620,
        "wires": [
            [
                "ea57e263.ad971"
            ],
            [
                "54284a4a.389154",
                "517324eb.3c653c"
            ]
        ]
    },
    {
        "id": "fb957896.c755c8",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "app.throwError(not connected)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n\nfunction throwError(message, details, msg) {\n    let p = flow.get(su.flowProperties.getFlowPath());\n    let errObj = new su.SolaceError(p.packageId + '.' + p.componentId, p.instanceName, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n}\n\nreturn throwError(\"no mqtt connection - check connection parameters?\");\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1050,
        "y": 660,
        "wires": []
    },
    {
        "id": "4e4e4b3f.1ebbf4",
        "type": "delay",
        "z": "46127397.12a33c",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 480,
        "wires": [
            [
                "27f57376.8189ac"
            ]
        ]
    },
    {
        "id": "f7548ed1.a51a9",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "46127397.12a33c",
        "name": "app:set:isConnected=false",
        "env": [
            {
                "name": "instance-name",
                "value": "app:set:isConnected=false",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            }
        ],
        "x": 1320,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "232875d9.abeb3a",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "input",
        "func": "\n//todo = finish_on_isConnectedChange(on_off);\n\n/*\n    probably send the on/off payload, then treat differently\n*/\n\nmsg.payload = {\n    set: {\n        state: 'broker.isConnected',\n        params: {\n            value: false \n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "f7548ed1.a51a9"
            ]
        ]
    },
    {
        "id": "c804ae39.28795",
        "type": "switch",
        "z": "46127397.12a33c",
        "name": "previousStatus",
        "property": "payload.previousStatus.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "cbf3dc41.f2f02"
            ]
        ]
    },
    {
        "id": "cbf3dc41.f2f02",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(disconnected)",
        "func": "\nmsg.topic   = 'Connection to broker lost.';\nmsg.payload = 'trying to re-connect ...';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 460,
        "wires": [
            [
                "9fe4e938.875028"
            ]
        ]
    },
    {
        "id": "9fe4e938.875028",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1540,
        "y": 460,
        "wires": []
    },
    {
        "id": "42876d45.4ece84",
        "type": "function",
        "z": "46127397.12a33c",
        "name": "usrMsg(connecting)",
        "func": "\nmsg.topic = 'Trying to connect to broker ...';\nmsg.payload = 'perhaps check the connection credentials';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "2bcbf7ad.267a18"
            ]
        ]
    },
    {
        "id": "2bcbf7ad.267a18",
        "type": "ui_toast",
        "z": "46127397.12a33c",
        "position": "top right",
        "displayTime": "10",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrPopup",
        "x": 1360,
        "y": 540,
        "wires": []
    },
    {
        "id": "54284a4a.389154",
        "type": "delay",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 540,
        "y": 680,
        "wires": [
            [
                "b952b68d.087178"
            ]
        ]
    },
    {
        "id": "6c6d8d1.38dc974",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "todo: hint:  check your connection parameters: display them here?",
        "info": "",
        "x": 1160,
        "y": 580,
        "wires": []
    },
    {
        "id": "517324eb.3c653c",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'config.broker'\n    }\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 620,
        "wires": [
            [
                "300006aa.e29c0a"
            ]
        ]
    },
    {
        "id": "300006aa.e29c0a",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(config.broker)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(config.broker)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "140374f6.8e392b"
            ]
        ]
    },
    {
        "id": "140374f6.8e392b",
        "type": "debug",
        "z": "3eb672f6.dc73fe",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1360,
        "y": 620,
        "wires": []
    },
    {
        "id": "3b87da56.9e8466",
        "type": "function",
        "z": "bd2c8430.9c7668",
        "name": "ds.endInvalidEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.devicesettings.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"invalid entries:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1180,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5c7b3a6e.d106a4",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1420,
        "y": 900,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "88c5c13b.981e",
        "type": "complete",
        "z": "475cded7.6c736",
        "name": "on_enable_buttons",
        "scope": [
            "f1d6439b.8edf9"
        ],
        "uncaught": false,
        "x": 150,
        "y": 940,
        "wires": [
            [
                "d6214778.d41508"
            ]
        ]
    },
    {
        "id": "b6c997d0.02cce8",
        "type": "complete",
        "z": "475cded7.6c736",
        "name": "on_disable_buttons",
        "scope": [
            "e0ac08d4.684718",
            "99dd0528.c06478",
            "d9282cea.a9c32",
            "4f880538.643d1c"
        ],
        "uncaught": false,
        "x": 150,
        "y": 1000,
        "wires": [
            [
                "4abf0870.905a08"
            ]
        ]
    },
    {
        "id": "f1d6439b.8edf9",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_enable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1450,
        "y": 620,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "d554ebee.fcf048",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "isChanged?",
        "func": "if(msg.isChanged) return msg;    \n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 620,
        "wires": [
            [
                "f1d6439b.8edf9"
            ]
        ]
    },
    {
        "id": "d9282cea.a9c32",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 790,
        "y": 1080,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "4f880538.643d1c",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 350,
        "y": 560,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "c12ada90.fbc438",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "input",
        "func": "\nmsg.payload = {\n    get: {\n      state: 'ds.entries',\n      params: {}\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 620,
        "wires": [
            [
                "827b05de.218838"
            ]
        ]
    },
    {
        "id": "827b05de.218838",
        "type": "subflow:bd2c8430.9c7668",
        "z": "475cded7.6c736",
        "name": "ds.get (ds.entries)",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.get (ds.entries)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 620,
        "wires": [
            [
                "797fe78a.003e68",
                "c38fec.c0855018",
                "33c9bac9.62b176",
                "f5ec93d9.87f8d"
            ],
            []
        ]
    },
    {
        "id": "797fe78a.003e68",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.deviceId",
        "func": "msg.payload = msg.payload.deviceId;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 560,
        "wires": [
            [
                "651007ad.653e88",
                "169222bf.fbf00d"
            ]
        ]
    },
    {
        "id": "c38fec.c0855018",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.region",
        "func": "msg.payload = msg.payload.categorization.region;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "263f5d52.fdd432",
                "1ee1d9d9.aae796"
            ]
        ]
    },
    {
        "id": "33c9bac9.62b176",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.site",
        "func": "msg.payload = msg.payload.categorization.site;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 640,
        "wires": [
            [
                "4fb0df0c.5c114",
                "5f4b97a5.14aa28"
            ]
        ]
    },
    {
        "id": "f5ec93d9.87f8d",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "ds.subSite",
        "func": "msg.payload = msg.payload.categorization.subSite;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 680,
        "wires": [
            [
                "49c798ac.16d388",
                "2fc18aec.0752f6"
            ]
        ]
    },
    {
        "id": "8bc76c52.a23fb",
        "type": "complete",
        "z": "475cded7.6c736",
        "name": "on_update_topics",
        "scope": [
            "8152338e.4fd1b",
            "74fa89b1.af9218"
        ],
        "uncaught": false,
        "x": 850,
        "y": 860,
        "wires": [
            [
                "ec4cbb7f.d3b168"
            ]
        ]
    },
    {
        "id": "8152338e.4fd1b",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_update_topics",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1200,
        "y": 440,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "9c5a9fcf.5f6dd",
        "type": "ui_ui_control",
        "z": "475cded7.6c736",
        "name": "connect event only",
        "events": "connect",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "74fa89b1.af9218"
            ]
        ]
    },
    {
        "id": "74fa89b1.af9218",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "trigger_update_topics",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "x": 340,
        "y": 280,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "f3d40a1d.3a7608",
        "type": "mqtt in",
        "z": "46127397.12a33c",
        "name": "iot-mgmt/connection/+",
        "topic": "iot-mgmt/connection/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "62bac859.25e008",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "4aefdd0.32b1024"
            ]
        ]
    },
    {
        "id": "46892f4e.45ca1",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 770,
        "y": 80,
        "wires": []
    },
    {
        "id": "f8d76597.c978e8",
        "type": "comment",
        "z": "6be2bb10.2f7fa4",
        "name": "todos",
        "info": " * re-package as part of solace.utils",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "8331919f.27a06",
        "type": "subflow:f315565e.b7a9b8",
        "z": "6be2bb10.2f7fa4",
        "name": "sf err handler (mqttCm)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "mqttConnectionMonitor",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "9551c011.b935d",
        "type": "comment",
        "z": "bd2c8430.9c7668",
        "name": "todos",
        "info": " * test the error handling:\n    * SolaceError\n    * js error\n    * \n    * ",
        "x": 750,
        "y": 80,
        "wires": []
    },
    {
        "id": "b74f1ea.c0e00e",
        "type": "catch",
        "z": "c50bcf9b.51248",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 500,
        "wires": [
            [
                "3b53b49a.96ee0c"
            ]
        ]
    },
    {
        "id": "7cce5e51.3c707",
        "type": "subflow:317873af.a031fc",
        "z": "c50bcf9b.51248",
        "name": "",
        "env": [],
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "3b53b49a.96ee0c",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "c50bcf9b.51248",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 500,
        "wires": [
            [
                "7cce5e51.3c707"
            ]
        ]
    },
    {
        "id": "64238248.18730c",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 580,
        "wires": [
            [
                "e7ff1d71.3608f"
            ]
        ]
    },
    {
        "id": "e7ff1d71.3608f",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "c50bcf9b.51248",
        "name": "flowProperties.set(main.mqttDsCtrl)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties.set(main.mqttDsCtrl)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "mqttDeviceSessionControl",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "1cd36a0b.15fb26",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "main mqtt Device Session Control (mqttDsCtrl)  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "7fd75171.ba907",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "connect event only",
        "events": "connect",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "d093dddd.a1771"
            ]
        ]
    },
    {
        "id": "64ed80ba.c077b",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "enableTabs",
        "func": "\nmsg.payload = {\n    tab: 'Order',\n    tabs: {\n        enable: [\n            'Order', 'Settings', 'Device Commands', 'Device Config', 'Device Session'\n        ]\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 440,
        "wires": [
            [
                "61e753d6.19effc"
            ]
        ]
    },
    {
        "id": "61e753d6.19effc",
        "type": "ui_ui_control",
        "z": "3eb672f6.dc73fe",
        "name": "applyTabs",
        "events": "change",
        "x": 970,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "79d86d11.3e20d4",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get(isInitialized)",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get(isInitialized)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "6b1648d4.5a4af8"
            ]
        ]
    },
    {
        "id": "d093dddd.a1771",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isInitialized'\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "79d86d11.3e20d4"
            ]
        ]
    },
    {
        "id": "6b1648d4.5a4af8",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "isInitialized?",
        "property": "payload.app.isInitialized",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "64ed80ba.c077b"
            ]
        ]
    },
    {
        "id": "ed1064cf.934c58",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "var _meta = {   packageId: 'app',   componentId: 'controller',   version: '0.1.0',   shortName: 'app',   id: 'solace-asapio-demo' }",
        "info": "",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "3e6162b4.7ea1ae",
        "type": "comment",
        "z": "7335a6bf.4e03a8",
        "name": "todos",
        "info": "",
        "x": 1470,
        "y": 120,
        "wires": []
    },
    {
        "id": "d2fbb921.9bdb58",
        "type": "ui_ui_control",
        "z": "c50bcf9b.51248",
        "name": "connect event only",
        "events": "connect",
        "x": 150,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "b9c10219.31316",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "show state & log",
        "info": "",
        "x": 480,
        "y": 660,
        "wires": []
    },
    {
        "id": "c588eef1.2b946",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "if initialized",
        "info": "",
        "x": 320,
        "y": 660,
        "wires": []
    },
    {
        "id": "2bce26b2.a7cd2a",
        "type": "link in",
        "z": "c50bcf9b.51248",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 270,
        "y": 1180,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "f6ea5235.5c7d8",
        "type": "comment",
        "z": "f38ebeda.df285",
        "name": "app mqtt device session control (mqttDsCtrl) ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 870,
        "y": 100,
        "wires": []
    },
    {
        "id": "87b0aae1.b67148",
        "type": "comment",
        "z": "f38ebeda.df285",
        "name": "var _meta = {   packageId: 'app',   componentId: 'mqttDeviceSessionControl',   version: '0.1.0',   shortName: 'mqttDsCtrl' }",
        "info": "",
        "x": 420,
        "y": 60,
        "wires": []
    },
    {
        "id": "67eea02e.00d24",
        "type": "catch",
        "z": "f38ebeda.df285",
        "name": "catch-all x (err handler)",
        "scope": [
            "f6ea5235.5c7d8",
            "87b0aae1.b67148",
            "649d0918.5ddfd8",
            "4a139710.6b1518",
            "86f352cb.e2bea",
            "46b5e1d1.8feee",
            "2930a721.36cad8",
            "5f088461.bce22c",
            "ac712fa.f34e4d",
            "dcfeab.25a8a158",
            "485be775.b38b18",
            "deaa32be.7cd33",
            "693efad1.6dfce4",
            "85c2c375.65ad4",
            "58869b78.59c794",
            "6b6728e5.63c168",
            "89a8c200.3dd82",
            "b1be9e61.8f63d",
            "9d3c2e56.35df5",
            "79a827ca.dd48b8",
            "55b6d9df.3f91b8",
            "d1f8ba35.a15e98",
            "78362d91.ef1fe4",
            "445d60e2.bfa3f",
            "fbd43d9.e5d23c",
            "6598bde5.213694",
            "a406d54.2978328",
            "cb66143e.a89f58",
            "603d130f.4de91c",
            "901eea70.b5ead8",
            "d56eeec.7d4491",
            "f7858e3b.482da",
            "bf849faa.f8789",
            "ee632c73.ee2c6",
            "3b91caff.f16c06",
            "4cb19afd.d9b8f4",
            "dcb79827.7b6888",
            "d9fbf110.c120a",
            "3807a62b.e893ea",
            "33e87b32.4eacd4",
            "1e0329e9.a02a86",
            "135e2ef0.bed491",
            "7fcf8ea9.11d89",
            "f0871ed2.5ab06",
            "43599cb2.ebaf74",
            "d4f18b4d.a0ff98",
            "ea0f9037.50968",
            "e8194eea.b5153",
            "82e0e0d6.4c5a6",
            "85ec162f.d2e058",
            "84d602c8.4fdde",
            "af2ca860.86d9f8",
            "be7d08cd.519a48",
            "54ceaa0c.5f96e4",
            "fc3e65a.a487398"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "a9546c8b.0e923"
            ]
        ]
    },
    {
        "id": "649d0918.5ddfd8",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1450,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "a9546c8b.0e923",
        "type": "subflow:f315565e.b7a9b8",
        "z": "f38ebeda.df285",
        "name": "sf err handler (mqttDsCtrl)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "mqttDeviceSessionControl",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "4a139710.6b1518",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "utils.debug(mqttDsCtrl)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1190,
        "y": 140,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "86f352cb.e2bea",
        "type": "comment",
        "z": "f38ebeda.df285",
        "name": "todos",
        "info": "",
        "x": 890,
        "y": 60,
        "wires": []
    },
    {
        "id": "46b5e1d1.8feee",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta, false);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "693efad1.6dfce4"
            ]
        ]
    },
    {
        "id": "2930a721.36cad8",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n// capture the deviceId\nlet mipsUpdate = {\n    deviceId: msg.payload.deviceId\n}\nsu.flow.updateMsgInstanceProperties(msg, _meta, mipsUpdate);\n\nlet isInitialized = global.get(sau.app.getIsInitializedPath(_meta));\nif(!isInitialized && mips.method !== 'init') return throwError(msg, \"not initialized, can't execute method\", { method: mips.method});\n\nswitch(mips.method) {\n    case 'init':\n        return msg;\n    case 'getDeviceSessionInfo':\n        return [null, msg];\n    case 'getState':\n        return [null, null, msg];\n    case 'enableDeviceSession':\n        return [null, null, null, msg];\n    case 'disableDeviceSession':\n        return [null, null, null, null, msg];\n    case 'addAllSubscriptions':\n        return [null, null, null, null, null, msg];\n    case 'deleteAllSubscriptions':\n        return [null, null, null, null, null, null, msg];\n    case 'createSession':\n        return [null, null, null, null, null, null, null, msg];\n    case 'deleteSession':\n        return [null, null, null, null, null, null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: mips.method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 9,
        "noerr": 0,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "5f088461.bce22c"
            ],
            [
                "485be775.b38b18"
            ],
            [
                "fbd43d9.e5d23c"
            ],
            [
                "bf849faa.f8789"
            ],
            [
                "603d130f.4de91c"
            ],
            [
                "43599cb2.ebaf74"
            ],
            [
                "5652e84e.ef4a18"
            ],
            [
                "4cb19afd.d9b8f4"
            ],
            [
                "1e0329e9.a02a86"
            ]
        ],
        "outputLabels": [
            "init",
            "getDeviceSessionInfo",
            "getState",
            "enableDeviceSession",
            "disableDeviceSession",
            "addAllSubscriptions",
            "deleteAllSubscriptions",
            "createSession",
            "deleteSession"
        ]
    },
    {
        "id": "5f088461.bce22c",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\n// set the state\nlet state = sau.mqttDeviceSessionControl.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(sau.mqttDeviceSessionControl.getStateBasePath(), state);\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 360,
        "wires": [
            [
                "445d60e2.bfa3f"
            ]
        ]
    },
    {
        "id": "ac712fa.f34e4d",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.end.success",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// check\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet isInitialized = global.get(sau.app.getIsInitializedPath(_meta));\nif(!isInitialized) node.warn(node.name + ': LOST isInitialized on this method: ' + mips.method);\n// end check\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta, true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1650,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "dcfeab.25a8a158",
        "type": "status",
        "z": "f38ebeda.df285",
        "name": "",
        "scope": null,
        "x": 1660,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5a14f525.b3535c",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.init",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "10324b8f.9b0354"
            ],
            []
        ]
    },
    {
        "id": "fa9e6fc1.f5adb",
        "type": "link out",
        "z": "c50bcf9b.51248",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 1270,
        "y": 1180,
        "wires": [],
        "l": true
    },
    {
        "id": "faadedfd.bea3b",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "f43ea96d.c80498"
            ]
        ]
    },
    {
        "id": "23226210.fa520e",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "in",
        "func": "\n\nmsg.payload = {\n    a: {\n        very: {\n            complex: {\n                object: 'hello world'\n            }\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "ff44df0d.4e424"
            ]
        ]
    },
    {
        "id": "eb5155fb.8b9fd8",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "append.httpResponse",
        "topic": "",
        "payload": "{\"action\":\"GET_SESSION_INFO\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "23226210.fa520e"
            ]
        ]
    },
    {
        "id": "34686fe.9cc3a9",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 460,
        "y": 1340,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "31242873.8e99c8",
        "type": "status",
        "z": "c1968b71.0f6d08",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a8066ec8.efbd6",
        "type": "subflow:776ea548.cb42dc",
        "z": "c1968b71.0f6d08",
        "name": "",
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "d8b3f883.4b3108",
        "type": "function",
        "z": "c1968b71.0f6d08",
        "name": "input",
        "func": "\nvar solaceAppComponent = env.get('solace-app-component');\nif(solaceAppComponent === 'not-configured') solaceAppComponent = 'app';\n\nmsg._solaceUtilsSubflowErrorHandler = {\n    solaceUtilsGlobalContext: '_solaceUtils',\n    solaceAppUtilsGlobalContext: '_solaceAppUtils',\n    solaceAppUtilsComponentGlobalContext: solaceAppComponent\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "a8066ec8.efbd6"
            ]
        ]
    },
    {
        "id": "b4390b89.651248",
        "type": "comment",
        "z": "ba93632a.b212b",
        "name": "solace.utils.log ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "b9d72bab.020668",
        "type": "comment",
        "z": "ba93632a.b212b",
        "name": "var _meta = {   packageId: 'utils',   componentId: 'log',   version: '0.1.0',   shortName: 'log' }",
        "info": "",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "21fe3658.fe230a",
        "type": "catch",
        "z": "ba93632a.b212b",
        "name": "catch-all x (err handler)",
        "scope": [
            "b4390b89.651248",
            "b9d72bab.020668",
            "39be31cf.42580e",
            "c42f3895.218738",
            "5a98fb26.cd60f4",
            "e27a3447.462c88",
            "a0cd2ca8.265ee",
            "f61912dc.6a6d5",
            "ecb4a8b9.201e78",
            "656673fc.88ae2c",
            "e44de43e.0a56f8",
            "3f3a80bc.0462f",
            "14aae177.af539f",
            "d2132262.0ac85",
            "21cf0c91.df8e14",
            "5553d81c.2364f8",
            "bc80b362.aa9da",
            "ce4079c6.3a62a8"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "79715e40.41d8f"
            ]
        ]
    },
    {
        "id": "f61912dc.6a6d5",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.throw.error.javascript",
        "func": "\nlet hello = thisPackageIsNotDefined.world(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "ce4079c6.3a62a8",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.debug(utils.log)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1140,
        "y": 140,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "65f0e574.7b208c",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        logName: env.get('log-name'),\n        method: env.get('method')\n    };\n\n    if(su.misc.isStringEmpty(ips.logName)) return throwError(msg, 'log-name not found');\n    // now get the parent flowProperties\n    let properties = flow.get(su.flowProperties.getParentFlowPath());\n    if(su.misc.isObjectEmpty(properties)) \n        return throwError(msg, 'cannot find parent flow properties', {path: su.flowProperties.getParentFlowPath()});\n    \n    let fullLogName = properties.packageId + '.' + properties.componentId + '.' + ips.logName;\n    ips.logName = fullLogName;\n\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 420,
        "wires": [
            [
                "1995fadd.3126c5"
            ]
        ]
    },
    {
        "id": "1995fadd.3126c5",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet elems = mips.method.split('.');\nlet methodStartsWith = elems[0];\n\nswitch(methodStartsWith) {\n    case 'init':\n        return msg;\n    case 'log':\n        if(elems.length < 2) return throwError(msg, 'invalid log method, must have at least 2 elements', {method: method});\n        elems.shift();\n        mips.logMethod = elems.join('.');\n        su.flow.updateMsgInstanceProperties(msg, _meta, mips);\n        return [null, msg];\n    case 'get':\n        return [null, null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 3,
        "noerr": 0,
        "x": 340,
        "y": 420,
        "wires": [
            [
                "18282ec9.81f671"
            ],
            [
                "9d8e0631.826108"
            ],
            [
                "a6efd942.17e908"
            ]
        ],
        "outputLabels": [
            "init",
            "log.x",
            "get"
        ]
    },
    {
        "id": "18282ec9.81f671",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\n//if(!isValidMsgPayload(msg)) return;\n\n// set the state\nlet state = su.log.createInitializedStateObject();\n\nstate.properties = su.flow.getMsgMetaProperties(msg, _meta);\n\nglobal.set(su.flow.getBasePath(_meta), state);\n\n// clear the log\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nflow.set(su.log.getLogPath(mips.logName), undefined);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "76caf497.7891ac"
            ]
        ]
    },
    {
        "id": "94c8332b.57079",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d2b698bc.dacf78",
        "type": "status",
        "z": "ba93632a.b212b",
        "name": "",
        "scope": null,
        "x": 1380,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "76caf497.7891ac",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.isInitialized=true",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nglobal.set(su.flow.getIsInitializedPath(_meta), true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "94c8332b.57079"
            ]
        ]
    },
    {
        "id": "9d8e0631.826108",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.method.log",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        logEntryPath: env.get('log.entry')\n    };\n    \n    if(su.misc.isStringEmpty(ips.logEntryPath)) return throwError(msg, 'log.entry not found');\n    // must have at least two levels\n    let elems = ips.logEntryPath.split('.');\n    if(elems.length < 2) return throwError(msg, \"log.entry must have the format 'msg.{path}'\");\n    let start = elems.shift();\n    if(start !== 'msg') return throwError(msg, \"log.entry must have the format 'msg.{path}'\");\n    ips.logEntryMsgPath = elems.join('.');\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n/* main --- */\nif(!isValidInstanceProperties(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n    //node.warn(node.name + ': logEntryMsgPath = ' + JSON.stringify(mips.logEntryMsgPath, null, 1));\n\nlet logEntry = su.misc.getObjectPath(msg, mips.logEntryMsgPath);\nif(su.misc.isEmpty(logEntry)) return throwError(msg, 'cannot find log entry in msg', {path: 'msg.' + mips.logEntryMsgPath });\n    \n    //node.warn(node.name + ': logEntry = \\n' + JSON.stringify(logEntry));\n\n\nswitch(mips.logMethod) {\n    case 'init': {\n        let log = [];\n        log.push(logEntry);\n        flow.set(su.log.getLogPath(mips.logName), log);\n    }\n    break;\n    case 'append': {\n        let log = flow.get(su.log.getLogPath(mips.logName)) || [];\n        log.push(logEntry);\n        flow.set(su.log.getLogPath(mips.logName), log);\n        \n        //mips.logEntry = JSON.parse(JSON.stringify(logEntry));\n        mips.logEntry = logEntry;\n        //msg = su.flow.updateMsgInstanceProperties(msg, _meta, mips);\n        msg = su.flow.updateMsgInstanceProperties(msg, _meta, {logEntry: logEntry});\n    }\n    break;\n    case 'append.httpResponse': {\n        return [null, msg];\n    }\n    break;\n    default: {\n        return throwError(msg, 'unknown log method', {method: method});\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "94c8332b.57079"
            ],
            [
                "838df9d2.cdfd78"
            ]
        ],
        "outputLabels": [
            "done",
            "append.httpResponse"
        ]
    },
    {
        "id": "838df9d2.cdfd78",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.log.append.httpResponse",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\nlet error;\nlet responseCode;\nlet request;\nlet headers;\nlet data;\n\n//if(msg.statusCode === 'ENOTFOUND') {\nif(msg.statusCode !== 200) {\n    error = msg.payload;\n    responseCode = msg.statusCode;\n} else {\n    error = msg.payload.meta.error;\n    request = msg.payload.meta.request;\n    responseCode = msg.payload.meta.responseCode;\n}\n\n//if(msg.properties.isLogEntireResponse) {\n    headers = msg.headers;\n    data = msg.payload.data;\n//}\n\nlet entry = {\n    responseCode: responseCode,\n    error: error,\n    request: request,\n    responseHeaders: headers,\n    responseData: data\n}\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet log = flow.get(su.log.getLogPath(mips.logName)) || [];\nlog.push(entry);\nflow.set(su.log.getLogPath(mips.logName), log);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "94c8332b.57079"
            ]
        ]
    },
    {
        "id": "79715e40.41d8f",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "utils.subflowErrorHandler(utils.log)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var _meta = su.log.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "a6efd942.17e908",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "uitls.log.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar _meta = su.log.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.payload = flow.get(su.log.getLogPath(mips.logName)) || [];\n\nsu.misc.setObjectPath(msg, su.flow.getMsgOutputBasePath(_meta), {logName:mips.logName});\n//msg.logName = mips.logName;\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 480,
        "wires": [
            [
                "d5628a43.c4da68"
            ]
        ],
        "outputLabels": [
            "done"
        ]
    },
    {
        "id": "d5628a43.c4da68",
        "type": "function",
        "z": "ba93632a.b212b",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 480,
        "wires": [
            [
                "94c8332b.57079"
            ]
        ]
    },
    {
        "id": "10324b8f.9b0354",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init (mqttDsCtrl)",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init (mqttDsCtrl)",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "log",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "",
                "type": "str"
            }
        ],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "3db3ff55.e92c",
                "a209f62e.bcaaf8"
            ]
        ]
    },
    {
        "id": "ff44df0d.4e424",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append.httpResponse (mqttDsCtrl.test)",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append.httpResponse (mqttDsCtrl.test)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append.httpResponse",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "895c3a43.9e5468",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 1340,
        "wires": [
            [
                "34686fe.9cc3a9"
            ]
        ]
    },
    {
        "id": "7d06ff4e.7e0b2",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.get@updateDisplay",
        "env": [
            {
                "name": "instance-name",
                "value": "log.get@updateDisplay",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "10fda14b.b445df",
                "fd20effb.140ab"
            ]
        ]
    },
    {
        "id": "10fda14b.b445df",
        "type": "ui_template",
        "z": "c50bcf9b.51248",
        "group": "450bb1b5.12d1b",
        "name": "displayLog",
        "order": 1,
        "width": "21",
        "height": "6",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <hr/>\n    <li>\n        <ol>\n            <div>\n                <pre>{{x | json}}</pre>\n            </div>\n        </ol>\n    </li>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 730,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "485be775.b38b18",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.getDeviceSessionInfo",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'getMqttSessionObject',\n    params: {\n        mqttSessionClientId: mips.deviceId\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "deaa32be.7cd33"
            ]
        ]
    },
    {
        "id": "9f5cb403.c174b8",
        "type": "comment",
        "z": "4b6c2fb2.f3121",
        "name": "var _meta = {   packageId: 'sempv2',   componentId: 'mqttSession',   version: '0.1.0',   shortName: 'mqttSess' }",
        "info": "",
        "x": 380,
        "y": 40,
        "wires": []
    },
    {
        "id": "37f2340a.15817c",
        "type": "comment",
        "z": "6b984824.a17568",
        "name": "var _meta = {   packageId: 'sempv2',   componentId: 'about',   version: '0.2.1',   shortName: 'about' }",
        "info": "",
        "x": 350,
        "y": 60,
        "wires": []
    },
    {
        "id": "30493cfe.b7e634",
        "type": "comment",
        "z": "4b6c2fb2.f3121",
        "name": "solace.sempv2.mqttSession ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "67b273ee.8634bc",
        "type": "catch",
        "z": "4b6c2fb2.f3121",
        "name": "catch httpRequest",
        "scope": [
            "9862d632.9c1f98"
        ],
        "uncaught": false,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "3529ee33.17d942"
            ]
        ]
    },
    {
        "id": "4bbd0a50.bbb5b4",
        "type": "catch",
        "z": "4b6c2fb2.f3121",
        "name": "catch-all x (error handler, httpRequest)",
        "scope": [
            "edce5291.4150f",
            "98e29b3a.ed3a28",
            "1d6edb0c.753c55",
            "24712c0c.a48534",
            "f0a37a3c.240718",
            "cb0e7c66.e4916",
            "12d1e438.4acacc",
            "b6f2c18b.faeeb",
            "38aee301.c1120c",
            "e3cd4b2c.75ff68",
            "fa23ac3b.3845c",
            "cb47009d.a4e43",
            "f5383cd2.6eb1f",
            "9f5cb403.c174b8",
            "30493cfe.b7e634",
            "3529ee33.17d942",
            "dfe35743.0f3568",
            "fe9bd0c4.3fd72",
            "5ff662e3.731d9c",
            "76b4eff4.1f968",
            "ced2332.8e2f8d",
            "25b62685.79659a",
            "dc4131c2.64637",
            "d21a6755.5a2188",
            "74d4f2af.055d8c",
            "23ed5ea0.c1a2d2",
            "919e340a.158e18",
            "95cf1aef.3d5068",
            "9a001884.d32118",
            "eae9448.6be50b8",
            "5193df64.ed591"
        ],
        "uncaught": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "36df63b8.f47fcc"
            ]
        ]
    },
    {
        "id": "3529ee33.17d942",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "utils.log(sempv2.mqttSess.httpErr)",
        "func": "var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\n\nmsg = su.misc.setObjectPath(msg, '_solace.utils.log.meta', _meta);\n\nnode.error(JSON.stringify(msg, null, 1));\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"http error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 380,
        "y": 160,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "dfe35743.0f3568",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "utils.debug(sempv2.mqttSess)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 2);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1490,
        "y": 120,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "36df63b8.f47fcc",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "utils.subflowErrorHandler(sempv2.mqttSess)",
        "func": "\ntry {\n    \n    var su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\n    var suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\n    var _meta = suSempv2.mqttSession.getMetaInfo();\n\n    var errObj = su.flow.getMsgSolaceError(msg, _meta);\n    // instanceName may not be set, depending on where / what the error is\n    // let's make sure and get it from env\n    let instanceName = env.get('instance-name');\n    if(!su.misc.isStringEmpty(instanceName)) errObj.setInstanceName(instanceName);\n    \n    // now re-throw the error for the parent flow\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n\n} catch(err) {\n    // throw error here for parent flow\n    node.error(err.name + ':' + err.message, msg);\n}\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 530,
        "y": 120,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "fe9bd0c4.3fd72",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n/* solace framework --- */\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, \"property 'instance-name' not found\");\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n/* end solace framework --- */\n\n/* component vars & functions --- */\n\nfunction isValidComponentInstanceProperties(msg) {\n\n    let cips = {\n        sempv2ConfigId: env.get('sempv2.config.id'),\n    };\n\n    if(su.misc.isStringEmpty(cips.sempv2ConfigId)) return throwError(msg, \"property 'sempv2.config.id' not found\");\n    if(!su.misc.isValidId(cips.sempv2ConfigId)) return throwError(msg, \"property 'sempv2.config.id' is not a valid id\", {sempv2ConfigId: cips.sempv2ConfigId});\n\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, cips);\n    \n    return true;\n}\n\nfunction isValidInputMsg(msg) {\n    \n        //node.warn(node.name + ': isValidInputMsg: mark 1');\n        \n    let input = suSempv2.utils.getMsgInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidInputMsg: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let reference = suSempv2.utils.getMsgInputObjectReference(_meta);\n\n        //node.warn(node.name + ': isValidInputMsg: reference = \\n' + JSON.stringify(reference, null, 1));\n\n    if(su.misc.isObjectEmpty(input)) return throwError(msg, \"input not found in msg\", {expected: {msg:reference}});\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, reference);\n    if(issues.length > 0) return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:reference}, issues: issues});\n    \n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, input);\n\n    return true;\n\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return; \n\nif(!isValidComponentInstanceProperties(msg)) return;\n\nif(!isValidInputMsg(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n// get the config\nlet path = suSempv2.config.getConfigPath(mips.sempv2ConfigId);\nlet sempv2Config = global.get(path);\nif(su.misc.isObjectEmpty(sempv2Config)) return throwError(msg, \"sempv2 config not found in global context\", {path: path})\n\nsu.flow.updateMsgInstanceProperties(msg, _meta, {sempv2Config: sempv2Config})\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 340,
        "wires": [
            [
                "ced2332.8e2f8d"
            ]
        ]
    },
    {
        "id": "5ff662e3.731d9c",
        "type": "comment",
        "z": "4b6c2fb2.f3121",
        "name": "todo: descr: link to md page",
        "info": "",
        "x": 160,
        "y": 300,
        "wires": []
    },
    {
        "id": "c75372a4.e92b5",
        "type": "function",
        "z": "3eb672f6.dc73fe",
        "name": "input",
        "func": "msg.payload = {\n    get: {\n        state: 'app.isInitialized',\n        params: {}\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 1460,
        "wires": [
            [
                "f8e5df1f.800bd"
            ]
        ]
    },
    {
        "id": "f8e5df1f.800bd",
        "type": "subflow:7335a6bf.4e03a8",
        "z": "3eb672f6.dc73fe",
        "name": "app.get.isInitialized",
        "env": [
            {
                "name": "instance-name",
                "value": "app.get.isInitialized",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 1460,
        "wires": [
            [
                "44cb3f1.d0613c"
            ]
        ]
    },
    {
        "id": "44cb3f1.d0613c",
        "type": "switch",
        "z": "3eb672f6.dc73fe",
        "name": "! isInitialized",
        "property": "payload.app.isInitialized",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 1460,
        "wires": [
            [
                "50816677.e479f8"
            ]
        ]
    },
    {
        "id": "cc4a2ac4.261578",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "called async in parallel by every module ==> n times fire at same time",
        "info": "",
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9e214185.1724f",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "need a semaphore here to sync N threads",
        "info": "",
        "x": 1000,
        "y": 1400,
        "wires": []
    },
    {
        "id": "61445cb3.e15454",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "TODO xxxxxxxxxxxxxxxxxxxx",
        "info": "",
        "x": 460,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bcc04e46.5154",
        "type": "comment",
        "z": "3eb672f6.dc73fe",
        "name": "https://www.npmjs.com/package/async-mutex",
        "info": "",
        "x": 520,
        "y": 1400,
        "wires": []
    },
    {
        "id": "76b4eff4.1f968",
        "type": "status",
        "z": "4b6c2fb2.f3121",
        "name": "",
        "scope": null,
        "x": 1580,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ced2332.8e2f8d",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = suSempv2.utils.getMipsMethod(msg, _meta);\n\nswitch(method) {\n    case 'getMqttSessionObject':\n        return msg;\n    case 'getMqttSessionSubscriptions':\n        return [null, msg];\n    case 'patchMqttSessionObject':\n        return [null, null, msg];\n    case 'createMqttSessionObject':\n        return [null, null, null, msg];\n    case 'deleteMqttSessionObject':\n        return [null, null, null, null, msg];\n    case 'createMqttSessionSubscriptionObject':\n        return [null, null, null, null, null, msg];\n    case 'deleteMqttSessionSubscriptionObject':\n        return [null, null, null, null, null, null, msg];\n    default: {\n        return throwError(msg, 'unknown resource', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 7,
        "noerr": 0,
        "x": 480,
        "y": 340,
        "wires": [
            [
                "25b62685.79659a"
            ],
            [
                "23ed5ea0.c1a2d2"
            ],
            [
                "919e340a.158e18"
            ],
            [
                "9a001884.d32118"
            ],
            [
                "5193df64.ed591"
            ],
            [
                "afeb6ab5.540268"
            ],
            [
                "aed6a18.deb366"
            ]
        ],
        "outputLabels": [
            "getMqttSessionObject",
            "getMqttSessionSubscriptions",
            "patchMqttSessionObject",
            "createMqttSessionObject",
            "deleteMqttSessionObject",
            "createMqttSessionSubscriptionObject",
            "deleteMqttSessionSubscriptionObject"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "25b62685.79659a",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.getMqttSessionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_getMqttSessionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n    //node.warn(node.name + ': isValidMipsInput: mips = \\n' + JSON.stringify(mips, null, 1));\n\n/*\nGET /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}\n*/  \nlet sc = mips.sempv2Config;\n    //node.warn(node.name + ': sc = \\n' + JSON.stringify(sc, null, 1));\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n    //node.warn(node.name + ': params = \\n' + JSON.stringify(params, null, 1));\n\nvar url = sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter;\n\nvar httpMsg = {\n    headers: sc.headers,\n    method: \"GET\",\n    url: url,\n    requestTimeout: sc.requestTimeout\n}\n\nsu.misc.merge(msg, httpMsg);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n\n\n\n// --- \n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 240,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "dc4131c2.64637",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.setSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"success:\" + suSempv2.utils.getMipsMethod(msg, _meta)});\n\nsuSempv2.utils.unsetMsg(msg, _meta);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1490,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e6713a10.e7e6b8",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "todo: check out the error handling xxxxxxxxxx",
        "info": "",
        "x": 730,
        "y": 80,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "d21a6755.5a2188",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.setError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet errType = suSempv2.utils.getResponseErrorType(msg);\n\nnode.status({fill:\"red\", shape:\"dot\", text:\"error:\" + errType + \":\" + suSempv2.utils.getMipsMethod(msg, _meta)});\n\nsuSempv2.utils.unsetMsg(msg, _meta);\n\nswitch(errType) {\n    case 'http': return msg;\n    case 'api': return [null, msg];\n    default: return throwError(msg, 'unknown response error type', {errType: errType});\n}\n\n// --- \n// The End.",
        "outputs": 2,
        "noerr": 0,
        "x": 1480,
        "y": 380,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "http-error",
            "api-error"
        ]
    },
    {
        "id": "74d4f2af.055d8c",
        "type": "comment",
        "z": "4b6c2fb2.f3121",
        "name": "<-- httpRequest throws error and reports it via msg output, here we only log it",
        "info": "",
        "x": 790,
        "y": 160,
        "wires": []
    },
    {
        "id": "23ed5ea0.c1a2d2",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.getMqttSessionSubscriptions",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_getMqttSessionSubscriptionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n    //node.warn(node.name + ': isValidMipsInput: mips = \\n' + JSON.stringify(mips, null, 1));\n\n/*\nGET /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions\n*/  \nlet sc = mips.sempv2Config;\n    //node.warn(node.name + ': sc = \\n' + JSON.stringify(sc, null, 1));\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n    //node.warn(node.name + ': params = \\n' + JSON.stringify(params, null, 1));\n\nvar url = sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter + '/subscriptions' + '?count=' + params.count;\n\nvar httpMsg = {\n    headers: sc.headers,\n    method: \"GET\",\n    url: url,\n    requestTimeout: sc.requestTimeout\n}\n\nsu.misc.merge(msg, httpMsg);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n\n// --- \n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 280,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "deaa32be.7cd33",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "getMqttSessionObject@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "getMqttSessionObject@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "f7858e3b.482da"
            ],
            [
                "78362d91.ef1fe4"
            ],
            [
                "55b6d9df.3f91b8"
            ]
        ]
    },
    {
        "id": "693efad1.6dfce4",
        "type": "subflow:bd2c8430.9c7668",
        "z": "f38ebeda.df285",
        "name": "ds.getDeviceId@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.getDeviceId@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getDeviceId",
                "type": "str"
            }
        ],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "2930a721.36cad8"
            ],
            []
        ]
    },
    {
        "id": "ccadfd0d.fb4b1",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getDeviceSessionInfo",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getDeviceSessionInfo",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getDeviceSessionInfo",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 960,
        "wires": [
            [
                "fdaa65e2.320588",
                "67731c15.5276f4"
            ],
            [
                "bd1a89bb.b06578",
                "67731c15.5276f4"
            ]
        ]
    },
    {
        "id": "85c2c375.65ad4",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "getMqttSessionSubscriptions@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "getMqttSessionSubscriptions@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "ee632c73.ee2c6"
            ],
            [
                "3b91caff.f16c06"
            ],
            [
                "3b91caff.f16c06"
            ]
        ]
    },
    {
        "id": "58869b78.59c794",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.call.getMqttSessionSubscriptions",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'getMqttSessionSubscriptions',\n    params: {\n        mqttSessionClientId: mips.deviceId,\n        count: 200\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 540,
        "wires": [
            [
                "85c2c375.65ad4"
            ]
        ]
    },
    {
        "id": "6b6728e5.63c168",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "app.error.{template}",
        "func": "\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n\nif(true) return throwError(msg, 'INTERNAL ERROR: SolaceError', {msg: msg});",
        "outputs": 0,
        "noerr": 0,
        "x": 960,
        "y": 140,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "fdaa65e2.320588",
        "type": "debug",
        "z": "c50bcf9b.51248",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "bd1a89bb.b06578",
        "type": "debug",
        "z": "c50bcf9b.51248",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 1000,
        "wires": []
    },
    {
        "id": "89a8c200.3dd82",
        "type": "comment",
        "z": "f38ebeda.df285",
        "name": "test without internet - http timeout",
        "info": "",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "b1be9e61.8f63d",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.end.error",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n// check\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\nlet isInitialized = global.get(sau.app.getIsInitializedPath(_meta));\nif(!isInitialized) node.warn(node.name + ': LOST isInitialized on this method: ' + mips.method);\n// end check\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta, true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1660,
        "y": 820,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "8b3064fb.60fb68",
        "type": "complete",
        "z": "c50bcf9b.51248",
        "name": "on_updateDisplay",
        "scope": [
            "6db98568.d1059c",
            "3db3ff55.e92c",
            "65a382b5.02bb7c"
        ],
        "uncaught": false,
        "x": 150,
        "y": 840,
        "wires": [
            [
                "7d06ff4e.7e0b2"
            ]
        ]
    },
    {
        "id": "6db98568.d1059c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_updateDisplay",
        "func": "\n/*\nmsg.brokerControlLog = {\n    isCreateUsrMsg: false\n}\n*/\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1260,
        "y": 960,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "67731c15.5276f4",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@deviceSessionInfo",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@deviceSessionInfo",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "6db98568.d1059c"
            ]
        ]
    },
    {
        "id": "3c4d653b.d9e4ea",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "could use the _payload={action:'xxx'} to display different pop-ups",
        "info": "",
        "x": 300,
        "y": 800,
        "wires": []
    },
    {
        "id": "55b6d9df.3f91b8",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.updateState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\nif(su.misc.isObjectEmpty(state)) return throwError(msg, 'state is empty');\n\nstate.isKnown = true;\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) {\n    \n    // = 6: session not found\n    if(msg.payload.meta.error.code === 6) {\n        \n        state.isSessionExists = false;\n\n    } else {\n        return throwError(msg, \"unknown 'msg.payload.meta.error.code'\", {code: msg.payload.meta.error.code});\n    }\n \n} else {\n    \n    state.isSessionExists = true;\n    \n    if(su.misc.hasObjectPath(msg.payload, 'data')) {\n        \n        // array of subscriptions? allowed to be empty\n        if(su.misc.isArray(msg.payload.data)) {\n            state.subscriptions = msg.payload.data;\n        } else {\n            state.data = msg.payload.data;\n            if(su.misc.hasObjectPath(msg.payload, 'data.enabled')) state.isSessionEnabled = msg.payload.data.enabled;\n        }\n    }\n    else return throwError(msg, \"msg.payload.data not found\", {payload: msg.payload});\n}\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state);\n\nreturn msg;\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "78362d91.ef1fe4",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "445d60e2.bfa3f",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "ok",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 360,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "ce4d8672.af3848",
        "type": "ui_text",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "order": 3,
        "width": "3",
        "height": "1",
        "name": "",
        "label": "enabled:",
        "format": "{{msg.payload.deviceSessionState.isSessionEnabled}}",
        "layout": "row-left",
        "x": 1220,
        "y": 820,
        "wires": []
    },
    {
        "id": "8b923cfe.7c63c",
        "type": "ui_text",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "order": 2,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "Session exists:",
        "format": "{{msg.payload.deviceSessionState.isSessionExists}}",
        "layout": "row-left",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "76bb3667.52a108",
        "type": "ui_template",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "name": "displaySubscriptions",
        "order": 5,
        "width": "14",
        "height": "5",
        "format": "<b>Subscriptions:</b>\n<ol>\n<div ng-repeat=\"x in msg.payload.deviceSessionState.subscriptions\">\n    <li>\n        <div>{{x.subscriptionTopic}}, QoS:{{x.subscriptionQos}}</div>\n    </li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1400,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "51a8de3c.3bf2f",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "hasSubscriptions?",
        "property": "payload.deviceSessionState.subscriptions",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 860,
        "wires": [
            [
                "76bb3667.52a108"
            ],
            [
                "76bb3667.52a108"
            ]
        ]
    },
    {
        "id": "fbd43d9.e5d23c",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.getState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\n\n    //node.warn(node.name + ':getState: state = \\n' + JSON.stringify(state, null, 1));\n\nsau.mqttDeviceSessionControl.setMsgPayloadState(msg, state, mips.deviceId);\n\n    //node.warn(node.name + ':getState: msg.payload = \\n' + JSON.stringify(msg.payload, null, 1));\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 640,
        "wires": [
            [
                "6598bde5.213694"
            ]
        ]
    },
    {
        "id": "6598bde5.213694",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "ok",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "fd20effb.140ab",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getState@updateDisplay",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getState@updateDisplay",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getState",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 840,
        "wires": [
            [
                "8b923cfe.7c63c",
                "ce4d8672.af3848",
                "51a8de3c.3bf2f",
                "71f08be.aef5c74"
            ],
            []
        ]
    },
    {
        "id": "71f08be.aef5c74",
        "type": "ui_text",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "",
        "label": "Device Id:",
        "format": "{{msg.payload.deviceId}}",
        "layout": "row-left",
        "x": 940,
        "y": 820,
        "wires": []
    },
    {
        "id": "a406d54.2978328",
        "type": "comment",
        "z": "f38ebeda.df285",
        "name": "test without subscriptions",
        "info": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "3db3ff55.e92c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_updateDisplay",
        "func": "\n/*\nmsg.brokerControlLog = {\n    isCreateUsrMsg: false\n}\n*/\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "x": 880,
        "y": 1180,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "5f5e467.6e828b8",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "99776810.9e2f78"
            ]
        ]
    },
    {
        "id": "919e340a.158e18",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.patchMqttSessionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_patchMqttSessionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n    //node.warn(node.name + ': isValidMipsInput: mips = \\n' + JSON.stringify(mips, null, 1));\n\n/*\nPATCH /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}\n*/ \nlet sc = mips.sempv2Config;\n    //node.warn(node.name + ': sc = \\n' + JSON.stringify(sc, null, 1));\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n    //node.warn(node.name + ': params = \\n' + JSON.stringify(params, null, 1));\n    \nvar url=sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter;\n\nsuSempv2.utils.addMsgHttpRequest(msg, sc, url, 'PATCH', params.body);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n\n// --- \n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "95cf1aef.3d5068",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "utils.debug(sempv2.mqttSess)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 2);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1270,
        "y": 240,
        "wires": [],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "d6576d8.08aae9",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1400,
        "wires": [
            [
                "7ba921c8.1053d"
            ]
        ]
    },
    {
        "id": "99776810.9e2f78",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.disableDeviceSession",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.disableDeviceSession",
                "type": "str"
            },
            {
                "name": "method",
                "value": "disableDeviceSession",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "abe9afde.78e6d"
            ],
            [
                "abe9afde.78e6d"
            ]
        ]
    },
    {
        "id": "cb66143e.a89f58",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "mqttSession.patch@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttSession.patch@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 690,
        "y": 740,
        "wires": [
            [
                "d56eeec.7d4491"
            ],
            [
                "901eea70.b5ead8"
            ],
            [
                "901eea70.b5ead8",
                "55b6d9df.3f91b8"
            ]
        ]
    },
    {
        "id": "603d130f.4de91c",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.disableDeviceSession",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'patchMqttSessionObject',\n    params: {\n      mqttSessionClientId: mips.deviceId,\n      body: {\n          enabled: false\n      }\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 780,
        "wires": [
            [
                "cb66143e.a89f58"
            ]
        ]
    },
    {
        "id": "901eea70.b5ead8",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 780,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "6083fedd.376",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1040,
        "y": 1440,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "d56eeec.7d4491",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.updateState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\nif(su.misc.isObjectEmpty(state)) return throwError(msg, 'state is empty');\n\nstate.isKnown = true;\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) {\n    \n    // = 6: session not found\n    if(msg.payload.meta.error.code === 6) {\n        \n        state.isSessionExists = false;\n\n    } else {\n        return throwError(msg, \"unknown 'msg.payload.meta.error.code'\", {code: msg.payload.meta.error.code});\n    }\n \n} else {\n    \n    state.isSessionExists = true;\n    \n    if(su.misc.hasObjectPath(msg.payload, 'data')) {\n        \n        // array of subscriptions? allowed to be empty\n        if(su.misc.isArray(msg.payload.data)) {\n            state.subscriptions = msg.payload.data;\n        } else {\n            state.data = msg.payload.data;\n            if(su.misc.hasObjectPath(msg.payload, 'data.enabled')) state.isSessionEnabled = msg.payload.data.enabled;\n        }\n    }\n    else return throwError(msg, \"msg.payload.data not found\", {payload: msg.payload});\n}\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state);\n\nreturn msg;\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 700,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "f7858e3b.482da",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.updateState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\nif(su.misc.isObjectEmpty(state)) return throwError(msg, 'state is empty');\n\nstate.isKnown = true;\n\nstate.isSessionExists = true;\n    \nif(su.misc.hasObjectPath(msg.payload, 'data')) {\n    \n    state.data = msg.payload.data;\n    \n    if(su.misc.hasObjectPath(msg.payload, 'data.enabled')) state.isSessionEnabled = msg.payload.data.enabled;\n\n}\nelse return throwError(msg, \"msg.payload.data not found\", {payload: msg.payload});\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state);\n\nreturn msg;\n\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 500,
        "wires": [
            [
                "58869b78.59c794"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "e1fbb333.4e567",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "f850f45c.eb6998"
            ]
        ]
    },
    {
        "id": "fdfc8d41.30d68",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 1540,
        "wires": [
            [
                "7bdccc75.fd2394"
            ]
        ]
    },
    {
        "id": "7bdccc75.fd2394",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.enableDeviceSession",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.enableDeviceSession",
                "type": "str"
            },
            {
                "name": "method",
                "value": "enableDeviceSession",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "637347b2.3d53c8"
            ],
            [
                "637347b2.3d53c8"
            ]
        ]
    },
    {
        "id": "e6a08ee1.e03eb",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1040,
        "y": 1540,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "bf849faa.f8789",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.enableDeviceSession",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'patchMqttSessionObject',\n    params: {\n      mqttSessionClientId: mips.deviceId,\n      body: {\n          enabled: true\n      }\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 700,
        "wires": [
            [
                "cb66143e.a89f58"
            ]
        ]
    },
    {
        "id": "abe9afde.78e6d",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@disable",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@disable",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 1440,
        "wires": [
            [
                "6083fedd.376"
            ]
        ]
    },
    {
        "id": "637347b2.3d53c8",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@enable",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@enable",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 1540,
        "wires": [
            [
                "e6a08ee1.e03eb"
            ]
        ]
    },
    {
        "id": "a0a486ff.f1a498",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "ccadfd0d.fb4b1"
            ]
        ]
    },
    {
        "id": "f8bb1f20.12382",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "call",
        "func": "msg.payload = 'call: getDeviceSessionInfo';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 960,
        "wires": [
            [
                "a0a486ff.f1a498"
            ]
        ]
    },
    {
        "id": "af4d7bc5.257fc8",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "8ac03a12.8f1dc8"
            ]
        ]
    },
    {
        "id": "eadc82cf.64d91",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 1660,
        "wires": [
            [
                "65d4724c.0adf4c"
            ]
        ]
    },
    {
        "id": "59a60651.a8bf88",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.deleteAllSubscriptions",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.deleteAllSubscriptions",
                "type": "str"
            },
            {
                "name": "method",
                "value": "deleteAllSubscriptions",
                "type": "str"
            }
        ],
        "x": 1160,
        "y": 1660,
        "wires": [
            [
                "5201af4d.352e"
            ],
            [
                "5201af4d.352e"
            ]
        ]
    },
    {
        "id": "5201af4d.352e",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1390,
        "y": 1660,
        "wires": [
            [
                "65a382b5.02bb7c"
            ]
        ]
    },
    {
        "id": "43027fa3.e8f36",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "isSessionExists?",
        "property": "payload.deviceSessionState.isSessionExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1700,
        "wires": [
            [
                "8e7e5479.013818"
            ],
            [
                "15999878.23ba88"
            ]
        ]
    },
    {
        "id": "15999878.23ba88",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.no-session",
        "func": "msg.topic = \"Session does not exist\";\nmsg.payload = \"Create it first and add subscriptions.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 1740,
        "wires": [
            [
                "cce5817b.f7cd"
            ]
        ]
    },
    {
        "id": "cce5817b.f7cd",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usr message",
        "x": 1410,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "d4028b49.dc2168",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "test: no session",
        "info": "",
        "x": 500,
        "y": 1600,
        "wires": []
    },
    {
        "id": "46429f76.170c4",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "test: no subscriptions",
        "info": "",
        "x": 680,
        "y": 1600,
        "wires": []
    },
    {
        "id": "8e7e5479.013818",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "subscrCounter>0?",
        "property": "payload.deviceSessionState.subscriptionsCounter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1700,
        "wires": [
            [
                "59a60651.a8bf88"
            ],
            [
                "f1552e7a.78564"
            ]
        ]
    },
    {
        "id": "f1552e7a.78564",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.no-subscrs",
        "func": "msg.topic = \"Session has no subscriptions\";\nmsg.payload = \"Add some first.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 1720,
        "wires": [
            [
                "cce5817b.f7cd"
            ]
        ]
    },
    {
        "id": "26022475.7b947c",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getState",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getState",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getState",
                "type": "str"
            }
        ],
        "x": 480,
        "y": 1700,
        "wires": [
            [
                "43027fa3.e8f36"
            ],
            []
        ]
    },
    {
        "id": "65a382b5.02bb7c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_updateDisplay",
        "func": "\n/*\nmsg.brokerControlLog = {\n    isCreateUsrMsg: false\n}\n*/\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1580,
        "y": 1660,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "ee632c73.ee2c6",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.addStateSubscrs",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\n\nif(su.misc.hasObjectPath(msg.payload, 'data')) {\n    // array of subscriptions? allowed to be empty\n    if(su.misc.isArray(msg.payload.data)) {\n        \n        sau.mqttDeviceSessionControl.setStateSubscriptions(state, msg.payload.data);\n\n    } else return throwError(msg, \"msg.payload.data is not an array\", {payload: msg.payload});\n    \n} else return throwError(msg, \"msg.payload.data not found\", {payload: msg.payload});\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state);\n\n    //node.warn(node.name + ':addStateSubscrs: state = \\n' + JSON.stringify(state, null, 1));\n    \nreturn msg;\n\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 540,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "outputLabels": [
            "subscriptionCounter > 0"
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "3b91caff.f16c06",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "65d4724c.0adf4c",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getDeviceSessionInfo",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getDeviceSessionInfo",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getDeviceSessionInfo",
                "type": "str"
            }
        ],
        "x": 220,
        "y": 1700,
        "wires": [
            [
                "26022475.7b947c"
            ],
            [
                "cd629fe2.c069b"
            ]
        ]
    },
    {
        "id": "a0678f21.5a71e",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.error",
        "func": "msg.topic = \"An error occurred\";\nmsg.payload = \"Please check the log.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 1760,
        "wires": [
            [
                "cce5817b.f7cd"
            ]
        ]
    },
    {
        "id": "cd629fe2.c069b",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 1760,
        "wires": [
            [
                "a0678f21.5a71e"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "5491a051.a179b",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "test: delete",
        "info": "",
        "x": 660,
        "y": 1640,
        "wires": []
    },
    {
        "id": "1907828c.9d657d",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 2320,
        "wires": [
            [
                "7e11e86d.c0a488"
            ]
        ]
    },
    {
        "id": "ec59511c.2bdec",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "f791653b.11db78"
            ]
        ]
    },
    {
        "id": "7e11e86d.c0a488",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.createSession",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.createSession",
                "type": "str"
            },
            {
                "name": "method",
                "value": "createSession",
                "type": "str"
            }
        ],
        "x": 450,
        "y": 2320,
        "wires": [
            [
                "74b5181d.52df88"
            ],
            [
                "74b5181d.52df88",
                "afc17d6.0f46c8"
            ]
        ]
    },
    {
        "id": "4cb19afd.d9b8f4",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.createSession",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'createMqttSessionObject',\n    params: {\n        body: {\n            mqttSessionClientId: mips.deviceId,\n            enabled: false,\n            mqttSessionVirtualRouter: 'primary',\n            owner: sau.app.getId(),\n            \n            // require version 9.4 of broker\n            //queueMaxTtl: 10,\n            //queueRespectTtlEnabled: true\n        }\n    }\n    \n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 840,
        "wires": [
            [
                "dcb79827.7b6888"
            ]
        ]
    },
    {
        "id": "dcb79827.7b6888",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "mqttSession.createSession@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttSession.createSession@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 880,
        "wires": [
            [
                "3807a62b.e893ea"
            ],
            [
                "d9fbf110.c120a"
            ],
            [
                "d9fbf110.c120a"
            ]
        ]
    },
    {
        "id": "9a001884.d32118",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.createMqttSessionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_createMqttSessionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n/*\nPOST /msgVpns/{msgVpnName}/mqttSessions\n*/  \nlet sc = mips.sempv2Config;\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n\nvar url=sc.api.mqttSession.basePath;\n\nsuSempv2.utils.addMsgHttpRequest(msg, sc, url, 'POST', params.body);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n// --- \n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 360,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "d9fbf110.c120a",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 880,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "3807a62b.e893ea",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.updateState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\nif(su.misc.isObjectEmpty(state)) return throwError(msg, 'state is empty');\n\nstate.isKnown = true;\n\nstate.isSessionExists = true;\n    \nif(su.misc.hasObjectPath(msg.payload, 'data')) {\n    \n    state.data = msg.payload.data;\n    if(su.misc.hasObjectPath(msg.payload, 'data.enabled')) state.isSessionEnabled = msg.payload.data.enabled;\n\n}\nelse return throwError(msg, \"msg.payload.data not found\", {payload: msg.payload});\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state);\n\nreturn msg;\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 840,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "74b5181d.52df88",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@enable",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@enable",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 2320,
        "wires": [
            [
                "73533271.6780ac"
            ]
        ]
    },
    {
        "id": "73533271.6780ac",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 920,
        "y": 2320,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "afc17d6.0f46c8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.error",
        "func": "msg.topic = \"An error occurred\";\nmsg.payload = \"Please check the log.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 2280,
        "wires": [
            [
                "eb0df06c.d0d3e"
            ]
        ]
    },
    {
        "id": "eb0df06c.d0d3e",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usr message",
        "x": 810,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "8497d7d6.31f3a8",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 880,
        "wires": [
            [
                "7d06ff4e.7e0b2"
            ]
        ]
    },
    {
        "id": "a6a6484a.808998",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 2040,
        "wires": [
            [
                "251ace93.d2c8b2"
            ]
        ]
    },
    {
        "id": "9151349f.c36df8",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 2080,
        "wires": [
            [
                "576b33.f0a844cc"
            ]
        ]
    },
    {
        "id": "576b33.f0a844cc",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.deleteSession",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.deleteSession",
                "type": "str"
            },
            {
                "name": "method",
                "value": "deleteSession",
                "type": "str"
            }
        ],
        "x": 450,
        "y": 2080,
        "wires": [
            [
                "41c611a2.3e47"
            ],
            [
                "41c611a2.3e47",
                "593cdae9.ba9ab4"
            ]
        ]
    },
    {
        "id": "41c611a2.3e47",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@enable",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@enable",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 2080,
        "wires": [
            [
                "a04433c4.0a8ee"
            ]
        ]
    },
    {
        "id": "a04433c4.0a8ee",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 920,
        "y": 2080,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "1e0329e9.a02a86",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.deleteSession",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'deleteMqttSessionObject',\n    params: {\n        mqttSessionClientId: mips.deviceId\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 940,
        "wires": [
            [
                "135e2ef0.bed491"
            ]
        ]
    },
    {
        "id": "5193df64.ed591",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.deleteMqttSessionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_deleteMqttSessionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidId);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n/*\nDELETE /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}\n*/    \nlet sc = mips.sempv2Config;\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n\nvar url = sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter;\n\nsuSempv2.utils.addMsgHttpRequest(msg, sc, url, 'DELETE', null);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n// --- \n// The End.\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 400,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "135e2ef0.bed491",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "mqttSession.deleteSession@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttSession.deleteSession@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 980,
        "wires": [
            [
                "f0871ed2.5ab06"
            ],
            [
                "7fcf8ea9.11d89"
            ],
            [
                "7fcf8ea9.11d89"
            ]
        ]
    },
    {
        "id": "7fcf8ea9.11d89",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 980,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "593cdae9.ba9ab4",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.error",
        "func": "msg.topic = \"An error occurred\";\nmsg.payload = \"Please check the log.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 2040,
        "wires": [
            [
                "231e6f5d.0f279"
            ]
        ]
    },
    {
        "id": "231e6f5d.0f279",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usr message",
        "x": 810,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "f0871ed2.5ab06",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.updateState",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\n//let mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet state = global.get(sau.mqttDeviceSessionControl.getDeviceSessionStatePath());\nif(su.misc.isObjectEmpty(state)) return throwError(msg, 'state is empty');\n\nstate.isKnown = true;\n\nstate.isSessionExists = false;\n\nglobal.set(sau.mqttDeviceSessionControl.getDeviceSessionStatePath(), state)\n\nreturn msg;\n\n// ---\n// The End.\n\n\n    \n    \n    \n    \n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 940,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "a1dbdfda.c5b7a",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1820,
        "wires": [
            [
                "be5f4bf3.e37e78"
            ]
        ]
    },
    {
        "id": "a209f62e.bcaaf8",
        "type": "delay",
        "z": "c50bcf9b.51248",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1070,
        "y": 1180,
        "wires": [
            [
                "fa9e6fc1.f5adb"
            ]
        ]
    },
    {
        "id": "678de2f.b48a71c",
        "type": "delay",
        "z": "475cded7.6c736",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 990,
        "y": 400,
        "wires": [
            [
                "c3a55027.c2818"
            ]
        ]
    },
    {
        "id": "1d2fa21a.8404fe",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 1860,
        "wires": [
            [
                "945892fc.4e3c5"
            ]
        ]
    },
    {
        "id": "945892fc.4e3c5",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getDeviceSessionInfo",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getDeviceSessionInfo",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getDeviceSessionInfo",
                "type": "str"
            }
        ],
        "x": 520,
        "y": 1860,
        "wires": [
            [
                "af2648e2.3268e8"
            ],
            [
                "504a60d7.19045"
            ]
        ]
    },
    {
        "id": "af2648e2.3268e8",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.getState",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.getState",
                "type": "str"
            },
            {
                "name": "method",
                "value": "getState",
                "type": "str"
            }
        ],
        "x": 780,
        "y": 1860,
        "wires": [
            [
                "eef11e23.4ba24"
            ],
            []
        ]
    },
    {
        "id": "504a60d7.19045",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 1900,
        "wires": [
            [
                "73d06622.3f3318"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "eef11e23.4ba24",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "isSessionExists?",
        "property": "payload.deviceSessionState.isSessionExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1860,
        "wires": [
            [
                "30271829.f18db8"
            ],
            [
                "8df8c866.f9db18"
            ]
        ]
    },
    {
        "id": "8df8c866.f9db18",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.no-session",
        "func": "msg.topic = \"Session does not exist\";\nmsg.payload = \"Create it first.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1180,
        "y": 1880,
        "wires": [
            [
                "d5d7a658.291688"
            ]
        ]
    },
    {
        "id": "73d06622.3f3318",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "msg.error",
        "func": "msg.topic = \"An error occurred\";\nmsg.payload = \"Please check the log.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1460,
        "y": 1900,
        "wires": [
            [
                "d5d7a658.291688"
            ]
        ]
    },
    {
        "id": "d5d7a658.291688",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usr message",
        "x": 1610,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "43599cb2.ebaf74",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.addAllSubscriptions",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\nmsg.payload = {\n    get: {\n        state: 'ds.topics',\n        params: {}\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 1140,
        "wires": [
            [
                "1ac72c0d.6407f4"
            ]
        ]
    },
    {
        "id": "d4f18b4d.a0ff98",
        "type": "subflow:bd2c8430.9c7668",
        "z": "f38ebeda.df285",
        "name": "ds.getTopics@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "ds.getTopics@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "82e0e0d6.4c5a6"
            ],
            []
        ]
    },
    {
        "id": "30271829.f18db8",
        "type": "subflow:f38ebeda.df285",
        "z": "c50bcf9b.51248",
        "name": "mqttDsCtrl.addAllSubscriptions",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttDsCtrl.addAllSubscriptions",
                "type": "str"
            },
            {
                "name": "method",
                "value": "addAllSubscriptions",
                "type": "str"
            }
        ],
        "x": 1230,
        "y": 1840,
        "wires": [
            [
                "7a67d067.f5cfe"
            ],
            [
                "7a67d067.f5cfe",
                "73d06622.3f3318"
            ]
        ]
    },
    {
        "id": "e8194eea.b5153",
        "type": "subflow:44813701.a560c8",
        "z": "f38ebeda.df285",
        "name": "forEach.topicSubscr@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "forEach.topicSubscr@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 1220,
        "wires": [
            [
                "85ec162f.d2e058"
            ],
            [
                "84d602c8.4fdde"
            ],
            [
                "3b8e0803.cf5398"
            ]
        ]
    },
    {
        "id": "82e0e0d6.4c5a6",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.subscr.calls",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n// main ----------------------------------------------------\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet updateConfigTopics = msg.payload.topics.deviceSubs.updateConfigTopics;\nlet commandTopics = msg.payload.topics.deviceSubs.commandTopics;\n\nlet calls = [];\n\nlet call;\n\nfor(var i=0; i < updateConfigTopics.length; i++) {\n    call = {\n        method: 'createMqttSessionSubscriptionObject',\n        params: {\n            mqttSessionClientId: mips.deviceId,\n            body: {\n                subscriptionQos: 0,\n                subscriptionTopic: updateConfigTopics[i]\n          }\n        }\n    }\n    calls.push(call);\n}\nfor(i=0; i < commandTopics.length; i++) {\n    call = {\n        method: 'createMqttSessionSubscriptionObject',\n        params: {\n            mqttSessionClientId: mips.deviceId,\n            body: {\n                subscriptionQos: 0,\n                subscriptionTopic: commandTopics[i]\n          }\n        }\n    }\n    calls.push(call);\n}\n\nmsg.payload = {\n    start: true,\n    end: true,\n    items: calls\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "e8194eea.b5153"
            ]
        ]
    },
    {
        "id": "85ec162f.d2e058",
        "type": "delay",
        "z": "f38ebeda.df285",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "e8194eea.b5153"
            ]
        ]
    },
    {
        "id": "84d602c8.4fdde",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "call 2 sempv2.mqttSession",
        "func": "\n    //node.warn(node.name + ': msg = \\n' + JSON.stringify(msg, null, 1));\n\nmsg.sempv2mqttSession = msg.payload.item.v;\n\n    //node.warn(node.name + ': msg.sempv2mqttSession = \\n' + JSON.stringify(msg.sempv2mqttSession, null, 1));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 1220,
        "wires": [
            [
                "54ceaa0c.5f96e4"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "af2ca860.86d9f8",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "end",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 1280,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "54ceaa0c.5f96e4",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "mqttSession.addSubscr@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttSession.addSubscr@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 1270,
        "y": 1220,
        "wires": [
            [
                "85ec162f.d2e058",
                "617ae0f8.e2a46"
            ],
            [
                "fc3e65a.a487398"
            ],
            [
                "98734df9.68968"
            ]
        ]
    },
    {
        "id": "afeb6ab5.540268",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.createMqttSessionSubscriptionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_createMqttSessionSubscriptionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidPubTopic);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n\n/*\nPOST /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions\n\nsubscriptionQos \tinteger($int64)\nsubscriptionTopic   string\n\n*/  \nlet sc = mips.sempv2Config;\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n\nlet url = sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter + '/subscriptions';\n\nsuSempv2.utils.addMsgHttpRequest(msg, sc, url, 'POST', params.body);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n// --- \n// The End.\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 440,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "fc3e65a.a487398",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "http-error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 1160,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "98734df9.68968",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "api-error",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) {\n        \n    switch(msg.payload.meta.error.code) {\n        case 10: {\n            return msg;\n        }\n        break;\n        default: return throwError(msg, \"unknown api error\", {error: msg.payload.error});\n    }\n    \n    \n} else return throwError(msg, \"unknown api error, cannot find 'msg.payload.meta.error.code'\", {payload: msg.payload});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1520,
        "y": 1240,
        "wires": [
            [
                "85ec162f.d2e058",
                "617ae0f8.e2a46"
            ]
        ],
        "outputLabels": [
            "continue"
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "617ae0f8.e2a46",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.append.subscription@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append.subscription@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1750,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "7a67d067.f5cfe",
        "type": "subflow:ba93632a.b212b",
        "z": "c50bcf9b.51248",
        "name": "log.append@addAllSubscrs",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append@addAllSubscrs",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1520,
        "y": 1840,
        "wires": [
            [
                "b580e9f0.793878"
            ]
        ]
    },
    {
        "id": "3b8e0803.cf5398",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.get.subscription@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "log.get.subscription@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "dcd7d42.e591128"
            ]
        ]
    },
    {
        "id": "dcd7d42.e591128",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.addSubscrs.prepareLog",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 1280,
        "wires": [
            [
                "af2ca860.86d9f8"
            ]
        ]
    },
    {
        "id": "ebf58e34.e84b",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.setFlowPropertiesFromParent",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\n// main ----------------------------------------------------\n\nlet properties = flow.get(su.flowProperties.getParentFlowPath());\nflow.set(su.flowProperties.getFlowPath(), properties);\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 280,
        "wires": [
            [
                "46b5e1d1.8feee"
            ]
        ]
    },
    {
        "id": "5652e84e.ef4a18",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.method.deleteAllSubscriptions",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n/* main --- */\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nmsg.sempv2mqttSession = {\n    method: 'getMqttSessionSubscriptions',\n    params: {\n        mqttSessionClientId: mips.deviceId,\n        count: 200\n    }\n}\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 1460,
        "wires": [
            [
                "9e315def.561dd"
            ]
        ]
    },
    {
        "id": "3ebdd23.69dc52e",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "getMqttSessionSubscriptions@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "getMqttSessionSubscriptions@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 1500,
        "wires": [
            [
                "706f43b3.494a5c"
            ],
            [
                "5c268a31.9b41c4"
            ],
            [
                "5c268a31.9b41c4"
            ]
        ]
    },
    {
        "id": "5c268a31.9b41c4",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 1460,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "aed6a18.deb366",
        "type": "function",
        "z": "4b6c2fb2.f3121",
        "name": "sempv2.mqttSess.deleteMqttSessionSubscriptionObject",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar suSempv2 = global.get('_solaceUtilsSempv2') || (node.error('_solaceUtilsSempv2 not found in global context', msg));\nvar _meta = suSempv2.mqttSession.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMipsInput(msg) {\n\n    // validate the entire input \n    let input = suSempv2.utils.getMipsInputObject(msg, _meta);\n\n        //node.warn(node.name + ': isValidMipsInput: input = \\n' + JSON.stringify(input, null, 1));\n        \n    let paramsReference = suSempv2.mqttSession.getMethodParamsReference_deleteMqttSessionSubscriptionObject();\n    \n        //node.warn(node.name + ': isValidMipsInput: paramsReference = \\n' + JSON.stringify(paramsReference, null, 1));\n\n    let expected = suSempv2.utils.mergeParamsReference(_meta, paramsReference);\n\n        //node.warn(node.name + ': isValidMipsInput: expected = \\n' + JSON.stringify(expected, null, 1));\n\n    let issues = su.misc.validateObjectPropertiesAgainstReference(input, expected, su.misc.validateStringPropertyIsValidPubTopic);\n    if(issues.length > 0) {\n        return throwError(msg, \"invalid input msg\", {input: {msg:input}, expected: {msg:expected}, issues: issues});\n    }\n\n    return true;\n}\n  \n/* main --- */\n\nif(!isValidMipsInput(msg)) return; \n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\n/*\nDELETE /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}\nnote: the topic must be URL encoded\n*/\n\nlet sc = mips.sempv2Config;\n\nlet params = suSempv2.utils.getMipsParams(msg, _meta);\n\nlet encodedTopic = encodeURIComponent(params.subscriptionTopic);\n\nlet url = sc.api.mqttSession.basePath + '/' + params.mqttSessionClientId + ',' + sc.virtualRouter + '/subscriptions/' + encodedTopic;\n\nsuSempv2.utils.addMsgHttpRequest(msg, sc, url, 'DELETE', null);\n\nnode.status({fill:\"yellow\", shape:\"dot\", text:\"sempv2:\" + mips.method});\n\nreturn msg;\n\n// --- \n// The End.\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "9862d632.9c1f98"
            ]
        ]
    },
    {
        "id": "d9b350fb.7d75a",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "call 2 sempv2.mqttSession",
        "func": "\n    //node.warn(node.name + ': msg = \\n' + JSON.stringify(msg, null, 1));\n\nmsg.sempv2mqttSession = msg.payload.item.v;\n\n    //node.warn(node.name + ': msg.sempv2mqttSession = \\n' + JSON.stringify(msg.sempv2mqttSession, null, 1));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 1560,
        "wires": [
            [
                "f6554ee8.58667"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "706f43b3.494a5c",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.deleteSubscr.calls",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n\n// main ----------------------------------------------------\n\nlet mips = su.flow.getMsgInstanceProperties(msg, _meta);\n\nlet subscriptions = msg.payload.data;\nif(su.misc.isEmpty(subscriptions) || !su.misc.isArray(subscriptions)) return throwError(msg, \"subscriptions are empty\", {payload: msg.payload});\n\nlet calls = [];\n\nlet call;\n\nfor(var i=0; i < subscriptions.length; i++) {\n    call = {\n        method: 'deleteMqttSessionSubscriptionObject',\n        params: {\n            mqttSessionClientId: mips.deviceId,\n            subscriptionTopic: subscriptions[i].subscriptionTopic\n        }\n    }\n    calls.push(call);\n}\n\nmsg.payload = {\n    start: true,\n    end: true,\n    items: calls\n}\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 1500,
        "wires": [
            [
                "b9f49c6e.46687"
            ]
        ]
    },
    {
        "id": "f6554ee8.58667",
        "type": "subflow:4b6c2fb2.f3121",
        "z": "f38ebeda.df285",
        "name": "mqttSession.delSubscr@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "mqttSession.delSubscr@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 1270,
        "y": 1560,
        "wires": [
            [
                "9f33b253.b7f7e",
                "965eedeb.ed7b"
            ],
            [
                "1d5ba9a9.9c0e76"
            ],
            [
                "a08fc32f.65115"
            ]
        ]
    },
    {
        "id": "a08fc32f.65115",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "api-error",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.mqttDeviceSessionControl.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nif(su.misc.hasObjectPath(msg, 'payload.meta.error.code')) {\n        \n    switch(msg.payload.meta.error.code) {\n        case 10: {\n            return msg;\n        }\n        break;\n        default: return throwError(msg, \"unknown api error\", {error: msg.payload.error});\n    }\n    \n    \n} else return throwError(msg, \"unknown api error, cannot find 'msg.payload.meta.error.code'\", {payload: msg.payload});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1520,
        "y": 1580,
        "wires": [
            [
                "9f33b253.b7f7e",
                "965eedeb.ed7b"
            ]
        ],
        "outputLabels": [
            "continue"
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "9f33b253.b7f7e",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.append.subscription@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "log.append.subscription@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1750,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "1d5ba9a9.9c0e76",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "http-error",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 1500,
        "wires": [
            [
                "b1be9e61.8f63d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "b9f49c6e.46687",
        "type": "subflow:44813701.a560c8",
        "z": "f38ebeda.df285",
        "name": "forEach.topicSubscr@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "forEach.topicSubscr@mqttDsCtrl",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 1560,
        "wires": [
            [
                "965eedeb.ed7b"
            ],
            [
                "d9b350fb.7d75a"
            ],
            [
                "c89d4d75.d3fd7"
            ]
        ]
    },
    {
        "id": "965eedeb.ed7b",
        "type": "delay",
        "z": "f38ebeda.df285",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 670,
        "y": 1600,
        "wires": [
            [
                "b9f49c6e.46687"
            ]
        ]
    },
    {
        "id": "990b8901.ac2838",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "mqttDsCtrl.deleteSubscrs.prepareLog",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 1640,
        "wires": [
            [
                "3e6b4083.9820b"
            ]
        ]
    },
    {
        "id": "3e6b4083.9820b",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "end",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 1640,
        "wires": [
            [
                "ac712fa.f34e4d"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "c89d4d75.d3fd7",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.get.delSubscrs@mqttDsCtrl",
        "env": [
            {
                "name": "instance-name",
                "value": "log.get.delSubscrs@mqttDsCtrl",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 670,
        "y": 1640,
        "wires": [
            [
                "990b8901.ac2838"
            ]
        ]
    },
    {
        "id": "b580e9f0.793878",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "trigger_getDeviceSessionInfo",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1780,
        "y": 1840,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "943fa683.85e4a8",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "msg.logEntry",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 1140,
        "wires": [
            [
                "d4f18b4d.a0ff98"
            ]
        ]
    },
    {
        "id": "236858d8.f98a38",
        "type": "subflow:ba93632a.b212b",
        "z": "f38ebeda.df285",
        "name": "log.init",
        "env": [
            {
                "name": "instance-name",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.init",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "msg.logEntry",
                "type": "str"
            }
        ],
        "x": 1090,
        "y": 1460,
        "wires": [
            [
                "3ebdd23.69dc52e"
            ]
        ]
    },
    {
        "id": "9e315def.561dd",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "logEntry",
        "func": "msg.logEntry = 'start sempv2 calls: deleting subscriptions';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 1460,
        "wires": [
            [
                "236858d8.f98a38"
            ]
        ]
    },
    {
        "id": "1ac72c0d.6407f4",
        "type": "function",
        "z": "f38ebeda.df285",
        "name": "logEntry",
        "func": "msg.logEntry = 'start sempv2 calls: adding subscriptions';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 1140,
        "wires": [
            [
                "943fa683.85e4a8"
            ]
        ]
    },
    {
        "id": "eb5f4bb8.e61198",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "todo: delete session --> does not update display",
        "info": "",
        "x": 360,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ab598610.ef8f48",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "todo: delete all subscriptions --> does not update subscription display",
        "info": "",
        "x": 810,
        "y": 1040,
        "wires": []
    },
    {
        "id": "19465cb4.994783",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "app.config.broker.sempv2",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.app.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nlet envVars = [\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_BASE_PATH','basePath'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_VPN', 'vpn'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_VIRTUAL_ROUTER', 'virtualRouter'],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_USER', 'user' ],\n    ['SOLACE_SAP_DEMO_BROKER_SEMPV2_PASSWORD', 'pwd']\n    ];\n\nlet config = {};\nfor(i=0; i < envVars.length; i++) {\n    let v = env.get(envVars[i][0]);\n    if(su.misc.isStringEmpty(v)) return throwErrorEnvVar(msg, \"environment variable not found\", {envVar: envVars[i][0]});\n    su.misc.setObjectPath(config, envVars[i][1], v);\n}\n\nlet isSolaceCloudEnvVar = 'SOLACE_SAP_DEMO_BROKER_SEMPV2_IS_SOLACE_CLOUD';\nlet isSolaceCloudStr = env.get(isSolaceCloudEnvVar);\nif(su.misc.isStringEmpty(isSolaceCloudStr)) return throwError(msg, \"environment variable not found\", {envVar: isSolaceCloudEnvVar});\n\nlet isSolaceCloud = false;\ntry {\n    isSolaceCloud = JSON.parse(isSolaceCloudStr.toLowerCase());\n} catch(err) {\n    let message = 'Invalid boolean value of environment variable';\n    let details = {\n        envVar: isSolaceCloudEnvVar,\n        value: isSolaceCloudStr\n    }\n    return throwError(msg, message, details);\n}\nconfig.isSolaceCloud = isSolaceCloud;\n\n//node.warn(node.name + ':config = \\n' + JSON.stringify(config, null, 1));\n\nglobal.set(sau.app.getConfigPath(_meta) + '.broker.sempv2', config);\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 420,
        "wires": [
            [
                "781428bf.b860f8"
            ]
        ]
    },
    {
        "id": "9038781a.7c79d8",
        "type": "function",
        "z": "7335a6bf.4e03a8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "6967887e.553fb8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "2acc1d33.eaf0d2",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "main.order -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "ce702a10.2a3848",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "startup -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "70c66c40.bd0074",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "initialize -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "fa4aef7.df3561",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4d60d452.18914c",
        "name": "flowProperties:set(main.order)",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:set(main.order)",
                "type": "str"
            },
            {
                "name": "method",
                "value": "set",
                "type": "str"
            },
            {
                "name": "packageId",
                "value": "main",
                "type": "str"
            },
            {
                "name": "componentId",
                "value": "order",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "2c3db3bf.aec82c"
            ]
        ]
    },
    {
        "id": "d402bbbf.9307c8",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "startup",
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "fa4aef7.df3561"
            ]
        ]
    },
    {
        "id": "7228d7e4.7201d8",
        "type": "link in",
        "z": "4d60d452.18914c",
        "name": "main.app.initialize.create",
        "links": [
            "f96041d6.ab02"
        ],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "aa6c2d1.14194d"
            ]
        ],
        "l": true
    },
    {
        "id": "a6890ed.17d7ff",
        "type": "link out",
        "z": "4d60d452.18914c",
        "name": "main.app.initialize.update",
        "links": [
            "8940887d.e380d8"
        ],
        "x": 1050,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "be1e7465.193368",
        "type": "delay",
        "z": "4d60d452.18914c",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 850,
        "y": 540,
        "wires": [
            [
                "a6890ed.17d7ff"
            ]
        ]
    },
    {
        "id": "d67b54aa.7eb338",
        "type": "catch",
        "z": "4d60d452.18914c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "51d5e181.33ec1"
            ]
        ]
    },
    {
        "id": "47ec1d0f.cf6b94",
        "type": "subflow:317873af.a031fc",
        "z": "4d60d452.18914c",
        "name": "",
        "env": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "51d5e181.33ec1",
        "type": "subflow:4f07498e.ebb5f8",
        "z": "4d60d452.18914c",
        "name": "flowProperties:get",
        "env": [
            {
                "name": "instance-name",
                "value": "flowProperties:get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "47ec1d0f.cf6b94"
            ]
        ]
    },
    {
        "id": "f5a2c1a4.ff74b",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "var _meta = {   packageId: 'app',   componentId: 'order',   version: '0.1.0' }",
        "info": "",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "aa6c2d1.14194d",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.set(isInitialized=true)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "cee61bd8.0cb048",
                "37a23f.96f33dc2"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "cee61bd8.0cb048",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "cleanMsg",
        "func": "\n\nmsg = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 540,
        "wires": [
            [
                "be1e7465.193368"
            ]
        ]
    },
    {
        "id": "58202c41.46c074",
        "type": "status",
        "z": "d4ac8a00.7ba108",
        "name": "",
        "scope": null,
        "x": 1440,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "8bc06f73.0cf38",
        "type": "comment",
        "z": "d4ac8a00.7ba108",
        "name": "app product catalog (prodCat) ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "ecbd6d88.6206",
        "type": "comment",
        "z": "d4ac8a00.7ba108",
        "name": "var _meta = {   packageId: 'app',   componentId: 'productCatalog',   version: '0.1.0',   shortName: 'prodCat' }",
        "info": "",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "5824b5b7.2c73fc",
        "type": "catch",
        "z": "d4ac8a00.7ba108",
        "name": "catch-all x (err handler)",
        "scope": [
            "58202c41.46c074",
            "8bc06f73.0cf38",
            "ecbd6d88.6206",
            "3e2146.890fbeba",
            "f11dada0.e0e4f",
            "12aea1c9.e59e7e",
            "6e3c52a2.56d49c",
            "30227213.ebe22e",
            "30f7c7ae.b1f508",
            "bba22b64.48e368"
        ],
        "uncaught": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "ecf241b5.ed231"
            ]
        ]
    },
    {
        "id": "ecf241b5.ed231",
        "type": "subflow:f315565e.b7a9b8",
        "z": "d4ac8a00.7ba108",
        "name": "sf err handler (prodCat)",
        "env": [
            {
                "name": "solace-app-component",
                "value": "productCatalog",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "3e2146.890fbeba",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.start",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nfunction isValidFrameworkInstanceProperties(msg) {\n    let fips = {\n        instanceName: env.get('instance-name')\n    };\n    if(su.misc.isStringEmpty(fips.instanceName)) return throwError(msg, 'instance-name not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, fips);\n    return true;\n}\n\n/* component vars & functions --- */\n\nfunction isValidInstanceProperties(msg) {\n    let ips = {\n        method: env.get('method')\n    };\n    if(su.misc.isStringEmpty(ips.method)) return throwError(msg, 'method not found');\n    msg = su.flow.updateMsgInstanceProperties(msg, _meta, ips);\n    return true;\n}\n\n// main ----------------------------------------------------\n\nmsg = su.flow.initMsgProperties(msg, _meta);\n\nif(!isValidFrameworkInstanceProperties(msg)) return;\n\nif(!isValidInstanceProperties(msg)) return;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"start\"});\n\nreturn msg;\n\n//--------------------\n//The End.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "f11dada0.e0e4f"
            ]
        ]
    },
    {
        "id": "f11dada0.e0e4f",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* main --- */\n\nlet method = su.flow.getMsgInstanceProperties(msg, _meta).method;\nif(method === null) return throwError(msg, 'cannot find method in msg instance properties');\n\nswitch(method) {\n    case 'init':\n        return [msg];\n    case 'get':\n        return [null, msg];\n    default: {\n        return throwError(msg, 'unknown method', {method: method});\n    }\n}\n\n// ------------\n// The End",
        "outputs": 2,
        "noerr": 0,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "6e3c52a2.56d49c"
            ],
            [
                "30227213.ebe22e"
            ]
        ],
        "outputLabels": [
            "init",
            "get"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "12aea1c9.e59e7e",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "utils.debug(prodCat)",
        "func": "\n\nlet entry = JSON.stringify(msg, null, 1);\nnode.warn(entry);\n\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "x": 1500,
        "y": 140,
        "wires": []
    },
    {
        "id": "4c847b18.4176b4",
        "type": "subflow:d4ac8a00.7ba108",
        "z": "3eb672f6.dc73fe",
        "name": "prodCat.init@main.app",
        "env": [
            {
                "name": "instance-name",
                "value": "prodCat.init@main.app",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 900,
        "wires": [
            [
                "845713fc.bbc2b"
            ],
            []
        ]
    },
    {
        "id": "6e3c52a2.56d49c",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method.init",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return;\n\n// check if it exists and has the right schema\nlet path = sau.app.getProductCatalogConfigPath();\nlet prodCat = global.get(path) || {};\nif(su.misc.isObjectEmpty(prodCat)) return throwError(msg, \"cannot find product catalog in global context\", {path: path});\n\n// todo: check against the schema\n\nglobal.set(sau.app.getIsInitializedPath(_meta), true);\n\nreturn msg;\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 320,
        "wires": [
            [
                "30f7c7ae.b1f508"
            ]
        ]
    },
    {
        "id": "30227213.ebe22e",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.method.get",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\n/* vars & functions  --- */\n\nfunction isValidMsgPayload(msg) {\n    \n    return true;\n}\n\n/* main --- */\n\nif(!isValidMsgPayload(msg)) return; \n\nlet path = sau.app.getProductCatalogConfigPath();\nlet prodCat = global.get(path) || {};\nif(su.misc.isObjectEmpty(prodCat)) return throwError(msg, \"cannot find product catalog in global context\", {path: path});\n\nmsg.payload = {\n    productCatalog: prodCat\n}\n\nreturn msg;\n\n/*\nswitch(msg.payload.get.state) {\n    case 'ds.topics': {\n        msg.payload = {\n            topics: global.get(sau.devicesettings.getTopicsPath(_meta))\n        }\n        return msg;\n    }\n    case 'ds.entries': {\n        msg.payload = global.get(sau.devicesettings.getEntriesPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.deviceId': {\n        msg.payload = {deviceId: global.get(sau.devicesettings.getDeviceIdPath(_meta), 'persistent')};\n        return msg;\n    }\n    /*\n    case 'ds.entries.region': {\n        msg.payload = global.get(sau.devicesettings.getRegionPath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.site': {\n        msg.payload = global.get(sau.devicesettings.getSitePath(_meta), 'persistent');\n        return msg;\n    }\n    case 'ds.entries.subSitexxxxx': {\n        msg.payload = global.get(sau.devicesettings.getSubSitePath(_meta), 'persistent');\n        return msg;\n    }\n    \n    default: {\n        let supportedList = [   sau.devicesettings.getMethodGetTopicsInputReference(), \n                                sau.devicesettings.getMethodGetEntriesInputReference(),     \n                            ];\n        return throwError(msg, 'unknown msg.payload.get.state', {received:{msg:{payload: msg.payload}}, supported: supportedList});\n    }\n}\n*/\n\n// ------------\n// The End",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 360,
        "wires": [
            [
                "30f7c7ae.b1f508"
            ]
        ]
    },
    {
        "id": "30f7c7ae.b1f508",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.endSuccess",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"success:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "bba22b64.48e368",
        "type": "function",
        "z": "d4ac8a00.7ba108",
        "name": "prodCat.endError",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.productCatalog.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\nif(!su.flow.isValidFlowMsg(msg, _meta)) return throwError(msg, 'msg is not a valid flow msg structure', msg);\n/* end solace framework --- */\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"error:\" + su.flow.getMsgInstanceProperties(msg, _meta).method});\n\nsuccess = su.flow.unsetMsg(msg, _meta);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1450,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "37a23f.96f33dc2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 720,
        "y": 460,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "1e8e059.d4ee9fa",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_init_form",
        "scope": [
            "37a23f.96f33dc2",
            "9cf00085.0de8f",
            "9578252b.0883b8"
        ],
        "uncaught": false,
        "x": 110,
        "y": 660,
        "wires": [
            [
                "8f5549d2.0ed078",
                "ee2ec27a.9f713"
            ]
        ]
    },
    {
        "id": "8f5549d2.0ed078",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 350,
        "y": 600,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "1917bc4e.4f7644",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.enable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = true;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1080,
        "wires": [
            [
                "bea92709.2fe7d8",
                "5e3a3ac6.efd494"
            ]
        ]
    },
    {
        "id": "bd247377.be26b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.disable-buttons",
        "func": "\n//msg.payload = 'Apply/discard your changes.'\n\nmsg.enabled = false;\n\nnode.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\nreturn msg;    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 1140,
        "wires": [
            [
                "bea92709.2fe7d8",
                "5e3a3ac6.efd494"
            ]
        ]
    },
    {
        "id": "ce7032d4.b8ef8",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_enable_buttons",
        "scope": [
            "59d7ce49.43d73"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "1917bc4e.4f7644"
            ]
        ]
    },
    {
        "id": "2f147ab9.50f086",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_disable_buttons",
        "scope": [
            "8f5549d2.0ed078",
            "a1f17392.1791a"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "bd247377.be26b"
            ]
        ]
    },
    {
        "id": "bea92709.2fe7d8",
        "type": "ui_button",
        "z": "4d60d452.18914c",
        "name": "placeOrder",
        "group": "a0d570c.092769",
        "order": 9,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "place order",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "place-order",
        "payloadType": "str",
        "topic": "",
        "x": 570,
        "y": 1080,
        "wires": [
            [
                "7b3e0702.201668"
            ]
        ]
    },
    {
        "id": "5e3a3ac6.efd494",
        "type": "ui_button",
        "z": "4d60d452.18914c",
        "name": "discard",
        "group": "a0d570c.092769",
        "order": 7,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "discard changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DISCARD",
        "payloadType": "str",
        "topic": "",
        "x": 560,
        "y": 1140,
        "wires": [
            [
                "9cf00085.0de8f"
            ]
        ]
    },
    {
        "id": "ee2ec27a.9f713",
        "type": "subflow:d4ac8a00.7ba108",
        "z": "4d60d452.18914c",
        "name": "prodCat.get",
        "env": [
            {
                "name": "instance-name",
                "value": "prodCat.get",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "e895572.1db39a8"
            ],
            []
        ]
    },
    {
        "id": "24d94982.ff9bb6",
        "type": "ui_dropdown",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Product:",
        "tooltip": "",
        "place": "select product ...",
        "group": "a0d570c.092769",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 700,
        "y": 740,
        "wires": [
            [
                "7bca2b2f.252354"
            ]
        ]
    },
    {
        "id": "d1137e38.4cb59",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.products",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet products = msg.payload.productCatalog.products;\n\nlet options = [\n        {\n        \"select product ...\": \"\"\n        }\n    ];\n\nfor(var i=0; i < products.length; i++) {\n    \n    let option = su.misc.setObjectPath({}, products[i].title, products[i].sku);\n    \n    options.push(option);\n\n}\n\nmsg.options = options;\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.sku;\n\n} else msg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 720,
        "wires": [
            [
                "24d94982.ff9bb6",
                "f3a5d309.055a6"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "57ba93eb.f7c22c",
        "type": "ui_numeric",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Quantity:",
        "tooltip": "",
        "group": "a0d570c.092769",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "1",
        "max": "5",
        "step": 1,
        "x": 700,
        "y": 820,
        "wires": [
            [
                "31b49bfc.2c3af4"
            ]
        ]
    },
    {
        "id": "757ced6.ef37614",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.quantity",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.quantity;\n\n} else msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 800,
        "wires": [
            [
                "57ba93eb.f7c22c",
                "38bd3ec5.1f4132"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "829cf24.191d51",
        "type": "ui_dropdown",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Ship to:",
        "tooltip": "",
        "place": "",
        "group": "a0d570c.092769",
        "order": 3,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 700,
        "y": 900,
        "wires": [
            [
                "6af735d9.2d967c"
            ]
        ]
    },
    {
        "id": "15db755d.019e9b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.shipTo",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet partners = msg.payload.partners;\n\nlet options = [\n        {\n        \"select address ...\": \"\"\n        }\n    ];\n\nfor(var i=0; i < partners.length; i++) {\n    \n    let option = su.misc.setObjectPath({}, partners[i].displayName, partners[i].shipToId);\n    \n    options.push(option);\n\n}\n\nmsg.options = options;\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    msg.payload = msg.payload.orderEntries.shipTo;\n\n} else msg.payload = '';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 880,
        "wires": [
            [
                "829cf24.191d51",
                "ff1f5698.116cd8"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "8f2beeb3.7f3ec",
        "type": "ui_template",
        "z": "4d60d452.18914c",
        "group": "fe63781d.693448",
        "name": "displayOrderUpdates",
        "order": 5,
        "width": "14",
        "height": "7",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <ol>\n            <div>\n                <pre>{{x | json}}</pre>\n            </div>\n        </ol>\n    </li>\n    <hr/>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 560,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "e013f092.4a151",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderDisplayLog.init",
        "env": [
            {
                "name": "instance-name",
                "value": "orderDisplayLog.init",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderDisplayLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "msg.payload.orderEntries",
                "type": "str"
            }
        ],
        "x": 940,
        "y": 1080,
        "wires": [
            [
                "231ba45e.49414c"
            ]
        ]
    },
    {
        "id": "231ba45e.49414c",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderTechLog.init",
        "env": [
            {
                "name": "instance-name",
                "value": "orderTechLog.init",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderTechLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 1080,
        "wires": [
            [
                "19824587.ecd0ba",
                "b302ffb5.3538b",
                "a1f17392.1791a"
            ]
        ]
    },
    {
        "id": "c53c4d80.64d18",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_updateDisplay",
        "scope": [
            "19824587.ecd0ba",
            "d8272e7b.79ec2",
            "141896d.489c069",
            "676a534.75ce5ac"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "cf803f67.d0eb6",
                "6e2d5c43.705b34"
            ]
        ]
    },
    {
        "id": "19824587.ecd0ba",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1380,
        "y": 1080,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "b302ffb5.3538b",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_sendOrder",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1370,
        "y": 1140,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "f122bd3c.6fd9e",
        "type": "complete",
        "z": "4d60d452.18914c",
        "name": "on_sendOrder",
        "scope": [
            "b302ffb5.3538b"
        ],
        "uncaught": false,
        "x": 90,
        "y": 1560,
        "wires": [
            [
                "1fc51bab.9869d4"
            ]
        ]
    },
    {
        "id": "253c15c2.42a12a",
        "type": "mqtt in",
        "z": "4d60d452.18914c",
        "name": "SAPEvent.SalesOrderCreated",
        "topic": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "f1b10946.39ef68",
                "7305b383.79b80c"
            ]
        ]
    },
    {
        "id": "f1b10946.39ef68",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "filter",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nif(msg.topic.includes(orderReference)) return msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1820,
        "wires": [
            [
                "8de1f889.868108"
            ]
        ],
        "outputLabels": [
            "update"
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "c22d7fc5.dddd5",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 720,
        "wires": [
            [
                "757ced6.ef37614",
                "d1137e38.4cb59",
                "15db755d.019e9b",
                "d7d3a5ed.618ca8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "f3a5d309.055a6",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.sku",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "7bca2b2f.252354",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.sku');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 740,
        "wires": [
            [
                "f3a5d309.055a6"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "ea48b11a.9c8c7",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "any changes?",
        "func": "if(msg.isChanged) return msg;    \n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 840,
        "wires": [
            [
                "dd128cf3.5358f"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "59d7ce49.43d73",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_enable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1650,
        "y": 840,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "cf803f67.d0eb6",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderDisplayLog.get",
        "env": [
            {
                "name": "instance-name",
                "value": "orderDisplayLog.get",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderDisplayLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 1240,
        "wires": [
            [
                "8f2beeb3.7f3ec"
            ]
        ]
    },
    {
        "id": "3822c38e.c75a5c",
        "type": "ui_template",
        "z": "4d60d452.18914c",
        "group": "b1ee4438.4885c8",
        "name": "displayTechLog",
        "order": 1,
        "width": "21",
        "height": "15",
        "format": "\n<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <ol>\n            <div>\n                <pre>{{x | json}}</pre>\n            </div>\n        </ol>\n    </li>\n    <hr/>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 540,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "6e2d5c43.705b34",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderTechLog.get",
        "env": [
            {
                "name": "instance-name",
                "value": "orderTechLog.get",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderTechLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "get",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 1280,
        "wires": [
            [
                "3822c38e.c75a5c"
            ]
        ]
    },
    {
        "id": "708b44ac.d7412c",
        "type": "mqtt out",
        "z": "4d60d452.18914c",
        "name": "send Order 2 SAP",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 890,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7b3e0702.201668",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "setOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = JSON.parse(JSON.stringify(flow.get('app.order.entries')));\n\nglobal.set(sau.order.getOrderEntriesPath(), entries);\n\nmsg.payload = {\n    orderEntries: entries\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 1080,
        "wires": [
            [
                "e013f092.4a151"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "4c6d751b.c83c0c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.composeEvent(createSalesOrder)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet order = msg.payload.order;\nif(su.misc.isObjectEmpty(order)) return throwError(msg, \"cannot find order in msg.payload\", {payload: msg.payload});\n\n// get all eventSchemas\nlet eventSchemasPath = sau.app.getEventSchemasConfigPath();\nlet eventSchemas = global.get(eventSchemasPath) || {};\nif(su.misc.isObjectEmpty(eventSchemas)) return throwError(msg, \"cannot find eventSchemas in global context\", {path: eventSchemasPath});\n\nlet channelPath = sau.app.getAppChannelConfigPath();\nlet channel = global.get(channelPath);\nif(su.misc.isObjectEmpty(channel)) return throwError(msg, \"cannot find channel in global context\", {path: channelPath});\n\nlet sapEventMeta = {\n    eventName: 'createSalesOrder',\n    properties: { \n        qos: 1\n    },\n    schemas: eventSchemas,\n    channel: channel,\n    entries: order.orderEntries,\n    timestamp: order.orderCreatedTimestamp,\n    eventId: order.orderReference,\n    correlationId: order.orderReference,\n    externalReference: order.orderReference\n};\n\nlet event = sau.events.composeSAPCreateSalesOrderEvent(sapEventMeta);\n\nmsg.topic = event.topic;\nmsg.payload = event.payload;\nmsg.qos = event.properties.qos;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 1560,
        "wires": [
            [
                "708b44ac.d7412c",
                "28c54d13.d3cef2"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "dd128cf3.5358f",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "validateOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = flow.get('app.order.entries');\n\n    //node.warn(node.name + ': validate: entries = \\n' + JSON.stringify(entries, null, 1));\n\nlet isValidEntries = true;\n\nif(entries.quantity < 1) isValidEntries = false;\nelse if(su.misc.isStringEmpty(entries.shipTo)) isValidEntries = false;\nelse if(su.misc.isStringEmpty(entries.sku)) isValidEntries = false;\n\n// todo: could check if it is in the past, let's see what SAP does here\n//convert shipDate to ISO String\nlet shipDateISO = new Date();\nshipDateISO.setTime(entries.shipDate);\nentries.shipDateISO = shipDateISO.toISOString();\n\nif(isValidEntries) {\n    \n    flow.set('app.order.entries', entries);\n\n    node.status({fill:\"green\", shape:\"dot\", text:\"valid\"});\n \n    return msg;\n\n    \n} else {\n    \n    node.status({fill:\"yellow\", shape:\"dot\", text:\"invalid\"});\n    \n}\n\n// ---\n// The End.\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 840,
        "wires": [
            [
                "59d7ce49.43d73"
            ]
        ],
        "outputLabels": [
            "valid entries"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "38bd3ec5.1f4132",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.quantity",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "31b49bfc.2c3af4",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.quantity');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 820,
        "wires": [
            [
                "38bd3ec5.1f4132"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "6af735d9.2d967c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.shipTo');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 900,
        "wires": [
            [
                "ff1f5698.116cd8"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "ff1f5698.116cd8",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.shipTo",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "e895572.1db39a8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "getPartners",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet path = sau.app.getAppPartnersConfigPath();\nlet partners = global.get(path);\nif(su.misc.isObjectEmpty(partners)) return throwError(msg, \"cannot find partners in global context\", {path: path});\n\nmsg.payload.partners = partners;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "733d9d60.911814"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "9cf00085.0de8f",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 720,
        "y": 1140,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "6fed53e1.6596dc",
        "type": "ui_ui_control",
        "z": "4d60d452.18914c",
        "name": "connect event only",
        "events": "connect",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "d3b6fdfd.1ff32"
            ]
        ]
    },
    {
        "id": "9578252b.0883b8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_init_form",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 520,
        "y": 340,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "d3b6fdfd.1ff32",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.isInitialized?",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet isInitialized = global.get(sau.app.getIsInitializedPath(_meta));\n\nif(isInitialized) {\n    node.status({fill:\"green\", shape:\"dot\", text:\"true\"});\n    return msg;\n} else {\n    node.status({fill:\"yellow\", shape:\"dot\", text:\"false\"});\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 340,
        "wires": [
            [
                "9578252b.0883b8"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "56d84c34.858bb4",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 1480,
        "wires": [
            [
                "b1264c7a.575df"
            ]
        ]
    },
    {
        "id": "b1264c7a.575df",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "setOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = {\n    quantity: 1,\n    shipTo: 'CE01',\n    sku: 'CONTROLLER-2',\n    shipDate: 1589258170207,\n    shipDateISO: '2020-05-12T04:36:10.207Z'\n}\n\nglobal.set(sau.order.getOrderEntriesPath(), entries);\n\nmsg.payload = {\n    orderEntries: entries\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 1480,
        "wires": [
            [
                "1fc51bab.9869d4"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "1fc51bab.9869d4",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.composeOrder",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet orderEntries = global.get(sau.order.getOrderEntriesPath());\n\n    //node.warn(node.name + ': orderEntries = \\n' + JSON.stringify(orderEntries, null, 1));\n\nlet order = {\n    orderCreatedTimestamp: new Date().toISOString(),\n    orderReference: su.misc.uuid(),\n    orderEntries: orderEntries\n}\n\nglobal.set(sau.order.getNewOrderPath(), order);\n\nmsg.payload = { \n    order: order\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1560,
        "wires": [
            [
                "b9964c3e.6d543",
                "4c6d751b.c83c0c"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "d9458aee.a93de8",
        "type": "ui_date_picker",
        "z": "4d60d452.18914c",
        "name": "",
        "label": "Ship date:",
        "group": "a0d570c.092769",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "",
        "x": 710,
        "y": 980,
        "wires": [
            [
                "bcf58403.f0e108"
            ]
        ]
    },
    {
        "id": "d7d3a5ed.618ca8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "order.shipDate",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = su.flow.createSolaceError(msg, _meta, message, details);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\n\nlet shipDate = new Date();\n\n// check if we have orderEntries to preset value\nif(!su.misc.isObjectEmpty(msg.payload.orderEntries)) {\n    \n    shipDate.setTime(msg.payload.orderEntries.shipDate);\n    \n} else shipDate.setDate(shipDate.getDate() + 10); \n\nmsg.payload = shipDate.getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 960,
        "wires": [
            [
                "d9458aee.a93de8",
                "58868a5f.b30264"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "bcf58403.f0e108",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "changed?",
        "func": "let previous = flow.get('app.order.entries.shipDate');\nmsg.isChanged = (previous !== msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 980,
        "wires": [
            [
                "58868a5f.b30264"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "58868a5f.b30264",
        "type": "change",
        "z": "4d60d452.18914c",
        "name": "capture2flow",
        "rules": [
            {
                "t": "set",
                "p": "app.order.entries.shipDate",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "ea48b11a.9c8c7"
            ]
        ]
    },
    {
        "id": "b77aad2.ed9735",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "dab759a.d41e8a8"
            ]
        ]
    },
    {
        "id": "dab759a.d41e8a8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "setOrderEntries(shipDate in the past)",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet entries = {\n    quantity: 1,\n    shipTo: 'CE01',\n    sku: 'CONTROLLER-2',\n    shipDateISO: '2020-04-12T04:36:10.207Z'\n}\n\nglobal.set(sau.order.getOrderEntriesPath(), entries);\n\nmsg.payload = {\n    orderEntries: entries\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "1fc51bab.9869d4"
            ]
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "c24b4c63.5f296",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderTechLog.append",
        "env": [
            {
                "name": "instance-name",
                "value": "orderTechLog.append",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderTechLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 1020,
        "y": 1620,
        "wires": [
            [
                "d8272e7b.79ec2"
            ]
        ]
    },
    {
        "id": "28c54d13.d3cef2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\nmsg.payload = {\n    action: 'sent',\n    topic: msg.topic,\n    qos: msg.qos,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 1620,
        "wires": [
            [
                "c24b4c63.5f296"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "d8272e7b.79ec2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1240,
        "y": 1620,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "442b596a.bb0ff8",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderDisplayLog.append",
        "env": [
            {
                "name": "instance-name",
                "value": "orderDisplayLog.append",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderDisplayLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            },
            {
                "name": "log.entry",
                "value": "msg.payload.order",
                "type": "str"
            }
        ],
        "x": 690,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "b9964c3e.6d543",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 1500,
        "wires": [
            [
                "442b596a.bb0ff8"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "2c3db3bf.aec82c",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderDisplayLog.init",
        "env": [
            {
                "name": "instance-name",
                "value": "orderDisplayLog.init",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderDisplayLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "9b588f88.db526"
            ]
        ]
    },
    {
        "id": "9b588f88.db526",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderTechLog.init",
        "env": [
            {
                "name": "instance-name",
                "value": "orderTechLog.init",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderTechLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "init",
                "type": "str"
            }
        ],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "141896d.489c069"
            ]
        ]
    },
    {
        "id": "141896d.489c069",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1000,
        "y": 260,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "a1f17392.1791a",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_disable_buttons",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n  \n",
        "outputs": 0,
        "noerr": 0,
        "x": 1390,
        "y": 1020,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "733d9d60.911814",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "getOrderEntries",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nmsg.payload.orderEntries = global.get(sau.order.getOrderEntriesPath()) || {};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 660,
        "wires": [
            [
                "c22d7fc5.dddd5"
            ]
        ],
        "outputLabels": [
            "valid"
        ],
        "icon": "node-red/leveldb.png"
    },
    {
        "id": "22d2876f.e80fd8",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/{sales_org = orgId}/system1/{externalReference}/{vbeln}",
        "info": "",
        "x": 430,
        "y": 2100,
        "wires": []
    },
    {
        "id": "74323902.3a59b8",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/{sales_org = orgId}/system1/{externalReference}",
        "info": "",
        "x": 400,
        "y": 2140,
        "wires": []
    },
    {
        "id": "7305b383.79b80c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "",
        "func": "\nmsg.payload = {\n    action: 'received',\n    topic: msg.topic,\n    qos: msg.qos,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1760,
        "wires": [
            [
                "1d583ca4.7764c3"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1d583ca4.7764c3",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderTechLog.append",
        "env": [
            {
                "name": "instance-name",
                "value": "orderTechLog.append",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderTechLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 1760,
        "wires": [
            [
                "676a534.75ce5ac"
            ]
        ]
    },
    {
        "id": "8de1f889.868108",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "update",
        "func": "\nmsg.payload = {\n    action: 'order update received',\n    //topic: msg.topic,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 1820,
        "wires": [
            [
                "c4bc4121.d4cfa"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "c4bc4121.d4cfa",
        "type": "subflow:ba93632a.b212b",
        "z": "4d60d452.18914c",
        "name": "orderDisplayLog.append",
        "env": [
            {
                "name": "instance-name",
                "value": "orderDisplayLog.append",
                "type": "str"
            },
            {
                "name": "log-name",
                "value": "orderDisplayLog",
                "type": "str"
            },
            {
                "name": "method",
                "value": "log.append",
                "type": "str"
            }
        ],
        "x": 810,
        "y": 1840,
        "wires": [
            [
                "676a534.75ce5ac"
            ]
        ]
    },
    {
        "id": "c13eb75e.29c2f8",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "fault",
        "func": "\nmsg.payload = {\n    action: 'order fault received',\n    //topic: msg.topic,\n    payload: msg.payload\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "c4bc4121.d4cfa"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "676a534.75ce5ac",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "trigger_updateDisplay",
        "func": "node.status({fill:\"green\", shape:\"dot\", text:\"triggered\"});\n\n",
        "outputs": 0,
        "noerr": 0,
        "x": 1120,
        "y": 1800,
        "wires": [],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "33b555f0.a58f0a",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/#",
        "info": "",
        "x": 300,
        "y": 2060,
        "wires": []
    },
    {
        "id": "91041dde.6391b",
        "type": "mqtt in",
        "z": "4d60d452.18914c",
        "name": "SAPEvent.SalesOrderCreateFault",
        "topic": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/system1/#",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 150,
        "y": 1880,
        "wires": [
            [
                "8f1e4643.cf0728",
                "7305b383.79b80c"
            ]
        ]
    },
    {
        "id": "8f1e4643.cf0728",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "filter",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nif(msg.topic.includes(orderReference)) return msg;\n\n// ---\n// The End.",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1880,
        "wires": [
            [
                "c13eb75e.29c2f8"
            ]
        ],
        "outputLabels": [
            "update"
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "4a50a428.8034fc",
        "type": "comment",
        "z": "4d60d452.18914c",
        "name": "sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/system1/#",
        "info": "",
        "x": 290,
        "y": 2020,
        "wires": []
    },
    {
        "id": "a2b09c89.074d4",
        "type": "mqtt out",
        "z": "4d60d452.18914c",
        "name": "send test SAP ResponseEvent",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1410,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b5fcece6.0a7c7",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1010,
        "y": 1940,
        "wires": [
            [
                "65ed5efa.952b2"
            ]
        ]
    },
    {
        "id": "65ed5efa.952b2",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "fault",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/fault/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreateFault'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 1940,
        "wires": [
            [
                "a2b09c89.074d4"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "7048457b.eef91c",
        "type": "function",
        "z": "4d60d452.18914c",
        "name": "update",
        "func": "/* solace framework --- */\nvar su = global.get('_solaceUtils') || (node.error('_solaceUtils not found in global context', msg));\nvar sau = global.get('_solaceAppUtils') || (node.error('_solaceAppUtils not found in global context', msg));\nvar _meta = sau.order.getMetaInfo();\nfunction throwError(msg, message, details) {\n    let errObj = new su.SolaceError(_meta.packageId, _meta.componentId, message, 'ERROR', details, msg);\n    node.error(errObj.getMessage(), errObj.getAsDataObject());\n    return false;\n}\n/* end solace framework --- */\n\nlet orderReferencePath = sau.order.getOrderReferencePath();\nlet orderReference = global.get(orderReferencePath);\nif(su.misc.isStringEmpty(orderReference)) return throwError(msg, \"cannot find orderReference in global context\", {path: orderReferencePath});\n\nmsg.topic = 'sap_demo/BUS2032/sap-bo-data/update/json/v1/asadev/1000/system1/' + orderReference;\nmsg.qos = 1;\nmsg.payload = {\n    message: 'event: SalesOrderCreated'\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 1980,
        "wires": [
            [
                "a2b09c89.074d4"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "757f631b.a1352c",
        "type": "inject",
        "z": "4d60d452.18914c",
        "name": "t",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1010,
        "y": 1980,
        "wires": [
            [
                "7048457b.eef91c"
            ]
        ]
    }
]